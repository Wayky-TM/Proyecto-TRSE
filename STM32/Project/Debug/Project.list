
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b540  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800b6e0  0800b6e0  0001b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc7c  0800bc7c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc84  0800bc84  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc84  0800bc84  0001bc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc88  0800bc88  0001bc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bc8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a40  200001e4  0800be70  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c24  0800be70  00024c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2e0  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b6  00000000  00000000  0003a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  0003ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e4d  00000000  00000000  0003fc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001347f  00000000  00000000  00044a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e348  00000000  00000000  00057ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f621c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059bc  00000000  00000000  000f6270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6c8 	.word	0x0800b6c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b6c8 	.word	0x0800b6c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <led_on>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_on(uint8_t v)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	switch (v)
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d840      	bhi.n	8000fe2 <led_on+0x92>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <led_on+0x18>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f7d 	.word	0x08000f7d
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000fbb 	.word	0x08000fbb
 8000f74:	08000fc7 	.word	0x08000fc7
 8000f78:	08000fd5 	.word	0x08000fd5
	{
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	481a      	ldr	r0, [pc, #104]	; (8000fec <led_on+0x9c>)
 8000f84:	f001 fefe 	bl	8002d84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8e:	4817      	ldr	r0, [pc, #92]	; (8000fec <led_on+0x9c>)
 8000f90:	f001 fef8 	bl	8002d84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <led_on+0xa0>)
 8000f9a:	f001 fef3 	bl	8002d84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <led_on+0xa0>)
 8000fa6:	f001 feed 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8000faa:	e01b      	b.n	8000fe4 <led_on+0x94>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <led_on+0x9c>)
 8000fb4:	f001 fee6 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8000fb8:	e014      	b.n	8000fe4 <led_on+0x94>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <led_on+0xa0>)
 8000fc0:	f001 fee0 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8000fc4:	e00e      	b.n	8000fe4 <led_on+0x94>
		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <led_on+0x9c>)
 8000fce:	f001 fed9 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8000fd2:	e007      	b.n	8000fe4 <led_on+0x94>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <led_on+0xa0>)
 8000fdc:	f001 fed2 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8000fe0:	e000      	b.n	8000fe4 <led_on+0x94>
		default:
			break;
 8000fe2:	bf00      	nop

	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <led_off>:

void led_off(uint8_t v)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	switch (v)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d840      	bhi.n	8001086 <led_off+0x92>
 8001004:	a201      	add	r2, pc, #4	; (adr r2, 800100c <led_off+0x18>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	08001021 	.word	0x08001021
 8001010:	08001051 	.word	0x08001051
 8001014:	0800105f 	.word	0x0800105f
 8001018:	0800106b 	.word	0x0800106b
 800101c:	08001079 	.word	0x08001079
	{
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <led_off+0x9c>)
 8001028:	f001 feac 	bl	8002d84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <led_off+0x9c>)
 8001034:	f001 fea6 	bl	8002d84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2108      	movs	r1, #8
 800103c:	4815      	ldr	r0, [pc, #84]	; (8001094 <led_off+0xa0>)
 800103e:	f001 fea1 	bl	8002d84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <led_off+0xa0>)
 800104a:	f001 fe9b 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 800104e:	e01b      	b.n	8001088 <led_off+0x94>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <led_off+0x9c>)
 8001058:	f001 fe94 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 800105c:	e014      	b.n	8001088 <led_off+0x94>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2108      	movs	r1, #8
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <led_off+0xa0>)
 8001064:	f001 fe8e 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8001068:	e00e      	b.n	8001088 <led_off+0x94>
		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <led_off+0x9c>)
 8001072:	f001 fe87 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8001076:	e007      	b.n	8001088 <led_off+0x94>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <led_off+0xa0>)
 8001080:	f001 fe80 	bl	8002d84 <HAL_GPIO_WritePin>
			break;
 8001084:	e000      	b.n	8001088 <led_off+0x94>
		default:
			break;
 8001086:	bf00      	nop
	}
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109c:	f000 fece 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a0:	f000 f884 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a4:	f000 f992 	bl	80013cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010a8:	f000 f966 	bl	8001378 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010ac:	f000 f8e8 	bl	8001280 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <main+0xbc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <main+0xbc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010be:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <main+0xbc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <main+0xbc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0220 	orr.w	r2, r2, #32
 80010ce:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010d0:	f003 f9e0 	bl	8004494 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80010d4:	4820      	ldr	r0, [pc, #128]	; (8001158 <main+0xc0>)
 80010d6:	f003 fbbd 	bl	8004854 <osMutexNew>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a1f      	ldr	r2, [pc, #124]	; (800115c <main+0xc4>)
 80010de:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (8, sizeof(struct valorADC), &myQueue01_attributes);
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <main+0xc8>)
 80010e2:	2110      	movs	r1, #16
 80010e4:	2008      	movs	r0, #8
 80010e6:	f003 fcc3 	bl	8004a70 <osMessageQueueNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <main+0xcc>)
 80010ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <main+0xd0>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	481d      	ldr	r0, [pc, #116]	; (800116c <main+0xd4>)
 80010f6:	f003 fa17 	bl	8004528 <osThreadNew>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <main+0xd8>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <main+0xdc>)
 8001102:	2100      	movs	r1, #0
 8001104:	481c      	ldr	r0, [pc, #112]	; (8001178 <main+0xe0>)
 8001106:	f003 fa0f 	bl	8004528 <osThreadNew>
 800110a:	4603      	mov	r3, r0
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <main+0xe4>)
 800110e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <main+0xe8>)
 8001112:	2100      	movs	r1, #0
 8001114:	481b      	ldr	r0, [pc, #108]	; (8001184 <main+0xec>)
 8001116:	f003 fa07 	bl	8004528 <osThreadNew>
 800111a:	4603      	mov	r3, r0
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <main+0xf0>)
 800111e:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001120:	4a1a      	ldr	r2, [pc, #104]	; (800118c <main+0xf4>)
 8001122:	2100      	movs	r1, #0
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <main+0xf8>)
 8001126:	f003 f9ff 	bl	8004528 <osThreadNew>
 800112a:	4603      	mov	r3, r0
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <main+0xfc>)
 800112e:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <main+0x100>)
 8001132:	2100      	movs	r1, #0
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <main+0x104>)
 8001136:	f003 f9f7 	bl	8004528 <osThreadNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <main+0x108>)
 800113e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <main+0x10c>)
 8001142:	f003 fa9e 	bl	8004682 <osEventFlagsNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <main+0x110>)
 800114a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800114c:	f003 f9c6 	bl	80044dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001150:	e7fe      	b.n	8001150 <main+0xb8>
 8001152:	bf00      	nop
 8001154:	20004b88 	.word	0x20004b88
 8001158:	0800b860 	.word	0x0800b860
 800115c:	20004bcc 	.word	0x20004bcc
 8001160:	0800b848 	.word	0x0800b848
 8001164:	20004b84 	.word	0x20004b84
 8001168:	0800b794 	.word	0x0800b794
 800116c:	08001525 	.word	0x08001525
 8001170:	20004b24 	.word	0x20004b24
 8001174:	0800b7b8 	.word	0x0800b7b8
 8001178:	08001589 	.word	0x08001589
 800117c:	20004b7c 	.word	0x20004b7c
 8001180:	0800b7dc 	.word	0x0800b7dc
 8001184:	08001881 	.word	0x08001881
 8001188:	20004b80 	.word	0x20004b80
 800118c:	0800b800 	.word	0x0800b800
 8001190:	08001931 	.word	0x08001931
 8001194:	20004b30 	.word	0x20004b30
 8001198:	0800b824 	.word	0x0800b824
 800119c:	080019d9 	.word	0x080019d9
 80011a0:	20004b2c 	.word	0x20004b2c
 80011a4:	0800b870 	.word	0x0800b870
 80011a8:	20004b28 	.word	0x20004b28

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	; 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f007 f8de 	bl	800837c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <SystemClock_Config+0xcc>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <SystemClock_Config+0xcc>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <SystemClock_Config+0xcc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <SystemClock_Config+0xd0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a21      	ldr	r2, [pc, #132]	; (800127c <SystemClock_Config+0xd0>)
 80011f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <SystemClock_Config+0xd0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2310      	movs	r3, #16
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001218:	2300      	movs	r3, #0
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800121c:	2310      	movs	r3, #16
 800121e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001220:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001224:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001226:	2304      	movs	r3, #4
 8001228:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800122a:	2304      	movs	r3, #4
 800122c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fde4 	bl	8002e00 <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800123e:	f000 fc01 	bl	8001a44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	230f      	movs	r3, #15
 8001244:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	2302      	movs	r3, #2
 8001248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2102      	movs	r1, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f846 	bl	80032f0 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800126a:	f000 fbeb 	bl	8001a44 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3750      	adds	r7, #80	; 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <MX_ADC1_Init+0xec>)
 8001294:	4a36      	ldr	r2, [pc, #216]	; (8001370 <MX_ADC1_Init+0xf0>)
 8001296:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <MX_ADC1_Init+0xec>)
 800129a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <MX_ADC1_Init+0xec>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <MX_ADC1_Init+0xec>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <MX_ADC1_Init+0xec>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <MX_ADC1_Init+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_ADC1_Init+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_ADC1_Init+0xec>)
 80012c2:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <MX_ADC1_Init+0xf4>)
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <MX_ADC1_Init+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_ADC1_Init+0xec>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_ADC1_Init+0xec>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_ADC1_Init+0xec>)
 80012dc:	2201      	movs	r2, #1
 80012de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e0:	4822      	ldr	r0, [pc, #136]	; (800136c <MX_ADC1_Init+0xec>)
 80012e2:	f000 fe1d 	bl	8001f20 <HAL_ADC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012ec:	f000 fbaa 	bl	8001a44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012f8:	2307      	movs	r3, #7
 80012fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	481a      	ldr	r0, [pc, #104]	; (800136c <MX_ADC1_Init+0xec>)
 8001302:	f000 ffd1 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800130c:	f000 fb9a 	bl	8001a44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001310:	2301      	movs	r3, #1
 8001312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_ADC1_Init+0xec>)
 800131e:	f000 ffc3 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001328:	f000 fb8c 	bl	8001a44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800132c:	2304      	movs	r3, #4
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001330:	2303      	movs	r3, #3
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_ADC1_Init+0xec>)
 800133a:	f000 ffb5 	bl	80022a8 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001344:	f000 fb7e 	bl	8001a44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001348:	2306      	movs	r3, #6
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800134c:	2304      	movs	r3, #4
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC1_Init+0xec>)
 8001356:	f000 ffa7 	bl	80022a8 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001360:	f000 fb70 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20004b34 	.word	0x20004b34
 8001370:	40012000 	.word	0x40012000
 8001374:	0f000001 	.word	0x0f000001

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART2_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f002 f99a 	bl	80036e8 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 fb43 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20004b88 	.word	0x20004b88
 80013c8:	40004400 	.word	0x40004400

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <MX_GPIO_Init+0x128>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a42      	ldr	r2, [pc, #264]	; (80014f4 <MX_GPIO_Init+0x128>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <MX_GPIO_Init+0x128>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <MX_GPIO_Init+0x128>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a3b      	ldr	r2, [pc, #236]	; (80014f4 <MX_GPIO_Init+0x128>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <MX_GPIO_Init+0x128>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <MX_GPIO_Init+0x128>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a34      	ldr	r2, [pc, #208]	; (80014f4 <MX_GPIO_Init+0x128>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <MX_GPIO_Init+0x128>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <MX_GPIO_Init+0x128>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a2d      	ldr	r2, [pc, #180]	; (80014f4 <MX_GPIO_Init+0x128>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <MX_GPIO_Init+0x128>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001458:	4827      	ldr	r0, [pc, #156]	; (80014f8 <MX_GPIO_Init+0x12c>)
 800145a:	f001 fc93 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001464:	4825      	ldr	r0, [pc, #148]	; (80014fc <MX_GPIO_Init+0x130>)
 8001466:	f001 fc8d 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001476:	2301      	movs	r3, #1
 8001478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	481f      	ldr	r0, [pc, #124]	; (8001500 <MX_GPIO_Init+0x134>)
 8001482:	f001 fae3 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001486:	f44f 7348 	mov.w	r3, #800	; 0x320
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4816      	ldr	r0, [pc, #88]	; (80014f8 <MX_GPIO_Init+0x12c>)
 80014a0:	f001 fad4 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80014a4:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480f      	ldr	r0, [pc, #60]	; (80014fc <MX_GPIO_Init+0x130>)
 80014be:	f001 fac5 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c2:	2310      	movs	r3, #16
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <MX_GPIO_Init+0x130>)
 80014d8:	f001 fab8 	bl	8002a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2105      	movs	r1, #5
 80014e0:	200a      	movs	r0, #10
 80014e2:	f001 f9ea 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f001 fa03 	bl	80028f2 <HAL_NVIC_EnableIRQ>

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800

08001504 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	flag=1;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <HAL_UART_TxCpltCallback+0x1c>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000200 	.word	0x20000200

08001524 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//uint32_t variable;
	while(1)
  {
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) //pulsador externo, encolar valor 2
 800152c:	2110      	movs	r1, #16
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <StartDefaultTask+0x54>)
 8001530:	f001 fc10 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d108      	bne.n	800154c <StartDefaultTask+0x28>
		{
			/*variable=2;
			osMessageQueuePut(myQueue01Handle, &variable, 0, osWaitForever);*/
			osEventFlagsSet(myEvent01Handle, 0x01);
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <StartDefaultTask+0x58>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2101      	movs	r1, #1
 8001540:	4618      	mov	r0, r3
 8001542:	f003 f8dd 	bl	8004700 <osEventFlagsSet>
			flagread = 1;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <StartDefaultTask+0x5c>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
		}
		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) //pulsador interno, encolar valor 1
 800154c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <StartDefaultTask+0x60>)
 8001552:	f001 fbff 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <StartDefaultTask+0x4a>
		{
			/*variable=1;
			osMessageQueuePut(myQueue01Handle, &variable, 0, osWaitForever);*/
			osEventFlagsSet(myEvent01Handle, 0x02);
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <StartDefaultTask+0x58>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2102      	movs	r1, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f003 f8cc 	bl	8004700 <osEventFlagsSet>
			flagread = 0;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <StartDefaultTask+0x5c>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
		}
	osDelay(10);
 800156e:	200a      	movs	r0, #10
 8001570:	f003 f86c 	bl	800464c <osDelay>
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) //pulsador externo, encolar valor 2
 8001574:	e7da      	b.n	800152c <StartDefaultTask+0x8>
 8001576:	bf00      	nop
 8001578:	40020400 	.word	0x40020400
 800157c:	20004b28 	.word	0x20004b28
 8001580:	20000204 	.word	0x20000204
 8001584:	40020800 	.word	0x40020800

08001588 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09a      	sub	sp, #104	; 0x68
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
		 uint8_t buffer[50];
		 //Añadidas las siguientes variables
		 float Axout, Ayout, Azout, angle_x, angle_y, angle_z;
		 while (1)
		 {
			 if (osMessageQueueGetCount(myQueue01Handle) < 25)
 8001590:	4bb5      	ldr	r3, [pc, #724]	; (8001868 <StartTask02+0x2e0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fb9d 	bl	8004cd4 <osMessageQueueGetCount>
 800159a:	4603      	mov	r3, r0
 800159c:	2b18      	cmp	r3, #24
 800159e:	d8f7      	bhi.n	8001590 <StartTask02+0x8>
			 {
				 if (flagread)
 80015a0:	4bb2      	ldr	r3, [pc, #712]	; (800186c <StartTask02+0x2e4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f3      	beq.n	8001590 <StartTask02+0x8>
				 {
					HAL_ADC_Start (& hadc1); /*  INICIO  */
 80015a8:	48b1      	ldr	r0, [pc, #708]	; (8001870 <StartTask02+0x2e8>)
 80015aa:	f000 fcfd 	bl	8001fa8 <HAL_ADC_Start>
					status = HAL_ADC_PollForConversion (&hadc1 , 1);
 80015ae:	2101      	movs	r1, #1
 80015b0:	48af      	ldr	r0, [pc, #700]	; (8001870 <StartTask02+0x2e8>)
 80015b2:	f000 fde0 	bl	8002176 <HAL_ADC_PollForConversion>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if(status  ==  HAL_OK)
 80015bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d133      	bne.n	800162c <StartTask02+0xa4>
					{
						dato.temperatura = HAL_ADC_GetValue (& hadc1);
 80015c4:	48aa      	ldr	r0, [pc, #680]	; (8001870 <StartTask02+0x2e8>)
 80015c6:	f000 fe61 	bl	800228c <HAL_ADC_GetValue>
 80015ca:	ee07 0a90 	vmov	s15, r0
 80015ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
						dato.temperatura = dato.temperatura*(3.3/4095); //Voltios
 80015d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffbd 	bl	8000558 <__aeabi_f2d>
 80015de:	a396      	add	r3, pc, #600	; (adr r3, 8001838 <StartTask02+0x2b0>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f810 	bl	8000608 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fae2 	bl	8000bb8 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
						dato.temperatura = (dato.temperatura-0.5)/0.01; //Grados centigrados
 80015f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffac 	bl	8000558 <__aeabi_f2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b9b      	ldr	r3, [pc, #620]	; (8001874 <StartTask02+0x2ec>)
 8001606:	f7fe fe47 	bl	8000298 <__aeabi_dsub>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	a38b      	add	r3, pc, #556	; (adr r3, 8001840 <StartTask02+0x2b8>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff f920 	bl	800085c <__aeabi_ddiv>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fac8 	bl	8000bb8 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
						//osMessageQueuePut(myQueue01Handle, &dato, 0, osWaitForever);
					}
					status = HAL_ADC_PollForConversion (&hadc1 , 1);
 800162c:	2101      	movs	r1, #1
 800162e:	4890      	ldr	r0, [pc, #576]	; (8001870 <StartTask02+0x2e8>)
 8001630:	f000 fda1 	bl	8002176 <HAL_ADC_PollForConversion>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if(status  ==  HAL_OK)
 800163a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800163e:	2b00      	cmp	r3, #0
 8001640:	d146      	bne.n	80016d0 <StartTask02+0x148>
					{
						dato.ejeX = HAL_ADC_GetValue (& hadc1);
 8001642:	488b      	ldr	r0, [pc, #556]	; (8001870 <StartTask02+0x2e8>)
 8001644:	f000 fe22 	bl	800228c <HAL_ADC_GetValue>
 8001648:	ee07 0a90 	vmov	s15, r0
 800164c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001650:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
						//Añadido para conversion
						Axout = (((dato.ejeX * Vref)/4095)-1.6)/0.32;
 8001654:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001658:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001878 <StartTask02+0x2f0>
 800165c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001660:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800187c <StartTask02+0x2f4>
 8001664:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001668:	ee16 0a90 	vmov	r0, s13
 800166c:	f7fe ff74 	bl	8000558 <__aeabi_f2d>
 8001670:	a375      	add	r3, pc, #468	; (adr r3, 8001848 <StartTask02+0x2c0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe fe0f 	bl	8000298 <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	a373      	add	r3, pc, #460	; (adr r3, 8001850 <StartTask02+0x2c8>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8e8 	bl	800085c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa90 	bl	8000bb8 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	663b      	str	r3, [r7, #96]	; 0x60
						//angle_x = atan2(Axout,(sqrt(pow(Ayout,2)+pow(Azout,2))))*(180/PI);//en grados, formula sacada de internet
						angle_x= asin(Axout)*(180/PI);//en grados
 800169c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800169e:	f7fe ff5b 	bl	8000558 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	ec43 2b10 	vmov	d0, r2, r3
 80016aa:	f009 fcf5 	bl	800b098 <asin>
 80016ae:	ec51 0b10 	vmov	r0, r1, d0
 80016b2:	a369      	add	r3, pc, #420	; (adr r3, 8001858 <StartTask02+0x2d0>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ffa6 	bl	8000608 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa78 	bl	8000bb8 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	65fb      	str	r3, [r7, #92]	; 0x5c
						dato.ejeX = angle_x;
 80016cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
						//osMessageQueuePut(myQueue01Handle, &dato, 0, osWaitForever);
					}
					status = HAL_ADC_PollForConversion (&hadc1 , 1);
 80016d0:	2101      	movs	r1, #1
 80016d2:	4867      	ldr	r0, [pc, #412]	; (8001870 <StartTask02+0x2e8>)
 80016d4:	f000 fd4f 	bl	8002176 <HAL_ADC_PollForConversion>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if(status  ==  HAL_OK)
 80016de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d146      	bne.n	8001774 <StartTask02+0x1ec>
					{
						dato.ejeY = HAL_ADC_GetValue (& hadc1);
 80016e6:	4862      	ldr	r0, [pc, #392]	; (8001870 <StartTask02+0x2e8>)
 80016e8:	f000 fdd0 	bl	800228c <HAL_ADC_GetValue>
 80016ec:	ee07 0a90 	vmov	s15, r0
 80016f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
						//Añadido para conversion
						Ayout = (((dato.ejeY * Vref)/4095)-1.6)/0.32;
 80016f8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016fc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001878 <StartTask02+0x2f0>
 8001700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001704:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800187c <StartTask02+0x2f4>
 8001708:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800170c:	ee16 0a90 	vmov	r0, s13
 8001710:	f7fe ff22 	bl	8000558 <__aeabi_f2d>
 8001714:	a34c      	add	r3, pc, #304	; (adr r3, 8001848 <StartTask02+0x2c0>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe fdbd 	bl	8000298 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	a34a      	add	r3, pc, #296	; (adr r3, 8001850 <StartTask02+0x2c8>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7ff f896 	bl	800085c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa3e 	bl	8000bb8 <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0
 800173e:	65bb      	str	r3, [r7, #88]	; 0x58
						//angle_y = atan2(Ayout,(sqrt(pow(Axout,2)+pow(Azout,2))))*(180/PI); //en grados, formula sacada de internet
						angle_y= asin(Ayout)*(180/PI);//en grados
 8001740:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001742:	f7fe ff09 	bl	8000558 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	ec43 2b10 	vmov	d0, r2, r3
 800174e:	f009 fca3 	bl	800b098 <asin>
 8001752:	ec51 0b10 	vmov	r0, r1, d0
 8001756:	a340      	add	r3, pc, #256	; (adr r3, 8001858 <StartTask02+0x2d0>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff54 	bl	8000608 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff fa26 	bl	8000bb8 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	657b      	str	r3, [r7, #84]	; 0x54
						dato.ejeY = angle_y;
 8001770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
						//osMessageQueuePut(myQueue01Handle, &dato, 0, osWaitForever);
					}
					status = HAL_ADC_PollForConversion (&hadc1 , 1);
 8001774:	2101      	movs	r1, #1
 8001776:	483e      	ldr	r0, [pc, #248]	; (8001870 <StartTask02+0x2e8>)
 8001778:	f000 fcfd 	bl	8002176 <HAL_ADC_PollForConversion>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if(status  ==  HAL_OK)
 8001782:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001786:	2b00      	cmp	r3, #0
 8001788:	d146      	bne.n	8001818 <StartTask02+0x290>
					{
						dato.ejeZ = HAL_ADC_GetValue (& hadc1);
 800178a:	4839      	ldr	r0, [pc, #228]	; (8001870 <StartTask02+0x2e8>)
 800178c:	f000 fd7e 	bl	800228c <HAL_ADC_GetValue>
 8001790:	ee07 0a90 	vmov	s15, r0
 8001794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001798:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
						//Añadido para conversion
						Azout = (((dato.ejeZ * Vref)/4095)-1.7)/0.32;
 800179c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017a0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001878 <StartTask02+0x2f0>
 80017a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800187c <StartTask02+0x2f4>
 80017ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017b0:	ee16 0a90 	vmov	r0, s13
 80017b4:	f7fe fed0 	bl	8000558 <__aeabi_f2d>
 80017b8:	a329      	add	r3, pc, #164	; (adr r3, 8001860 <StartTask02+0x2d8>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe fd6b 	bl	8000298 <__aeabi_dsub>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	a321      	add	r3, pc, #132	; (adr r3, 8001850 <StartTask02+0x2c8>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7ff f844 	bl	800085c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff f9ec 	bl	8000bb8 <__aeabi_d2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	653b      	str	r3, [r7, #80]	; 0x50
						//angle_z = atan2((sqrt(pow(Axout,2)+pow(Ayout,2))),Azout)*(180/PI);  //en grados, formula sacada de internet
						angle_z= asin(Azout)*(180/PI);//en grados
 80017e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017e6:	f7fe feb7 	bl	8000558 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	ec43 2b10 	vmov	d0, r2, r3
 80017f2:	f009 fc51 	bl	800b098 <asin>
 80017f6:	ec51 0b10 	vmov	r0, r1, d0
 80017fa:	a317      	add	r3, pc, #92	; (adr r3, 8001858 <StartTask02+0x2d0>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe ff02 	bl	8000608 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff f9d4 	bl	8000bb8 <__aeabi_d2f>
 8001810:	4603      	mov	r3, r0
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
						dato.ejeZ = angle_z;
 8001814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001816:	647b      	str	r3, [r7, #68]	; 0x44
						//osMessageQueuePut(myQueue01Handle, &dato, 0, osWaitForever);
					}
					osMessageQueuePut(myQueue01Handle, &dato, 0, osWaitForever);
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <StartTask02+0x2e0>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	2200      	movs	r2, #0
 8001826:	f003 f997 	bl	8004b58 <osMessageQueuePut>
					HAL_ADC_Stop (& hadc1); /* FIN */
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <StartTask02+0x2e8>)
 800182c:	f000 fc70 	bl	8002110 <HAL_ADC_Stop>
			 if (osMessageQueueGetCount(myQueue01Handle) < 25)
 8001830:	e6ae      	b.n	8001590 <StartTask02+0x8>
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	e734d9b4 	.word	0xe734d9b4
 800183c:	3f4a680c 	.word	0x3f4a680c
 8001840:	47ae147b 	.word	0x47ae147b
 8001844:	3f847ae1 	.word	0x3f847ae1
 8001848:	9999999a 	.word	0x9999999a
 800184c:	3ff99999 	.word	0x3ff99999
 8001850:	47ae147b 	.word	0x47ae147b
 8001854:	3fd47ae1 	.word	0x3fd47ae1
 8001858:	79de2e87 	.word	0x79de2e87
 800185c:	404ca613 	.word	0x404ca613
 8001860:	33333333 	.word	0x33333333
 8001864:	3ffb3333 	.word	0x3ffb3333
 8001868:	20004b84 	.word	0x20004b84
 800186c:	20000204 	.word	0x20000204
 8001870:	20004b34 	.word	0x20004b34
 8001874:	3fe00000 	.word	0x3fe00000
 8001878:	40533333 	.word	0x40533333
 800187c:	457ff000 	.word	0x457ff000

08001880 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001884:	b09a      	sub	sp, #104	; 0x68
 8001886:	af06      	add	r7, sp, #24
 8001888:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
struct valorADC variable2;
	uint8_t buffer[50];
	while(1)
	{
		osMessageQueueGet(myQueue01Handle, &variable2, 0, osWaitForever);
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <StartTask03+0xa0>)
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	2200      	movs	r2, #0
 8001898:	f003 f9be 	bl	8004c18 <osMessageQueueGet>
		sprintf(buffer, "Valor X %f, valor Y %f, valor Z %f, valor temperatura %f\n\r", variable2.ejeX, variable2.ejeY, variable2.ejeZ, variable2.temperatura);
 800189c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe5a 	bl	8000558 <__aeabi_f2d>
 80018a4:	4682      	mov	sl, r0
 80018a6:	468b      	mov	fp, r1
 80018a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe54 	bl	8000558 <__aeabi_f2d>
 80018b0:	4604      	mov	r4, r0
 80018b2:	460d      	mov	r5, r1
 80018b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe4e 	bl	8000558 <__aeabi_f2d>
 80018bc:	4680      	mov	r8, r0
 80018be:	4689      	mov	r9, r1
 80018c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe48 	bl	8000558 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	f107 000c 	add.w	r0, r7, #12
 80018d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018d8:	e9cd 4500 	strd	r4, r5, [sp]
 80018dc:	4652      	mov	r2, sl
 80018de:	465b      	mov	r3, fp
 80018e0:	4910      	ldr	r1, [pc, #64]	; (8001924 <StartTask03+0xa4>)
 80018e2:	f007 f9bd 	bl	8008c60 <siprintf>
		HAL_UART_Transmit_IT(&huart2, buffer, strlen(buffer)-1);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fc78 	bl	80001e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	480a      	ldr	r0, [pc, #40]	; (8001928 <StartTask03+0xa8>)
 8001900:	f001 ff3f 	bl	8003782 <HAL_UART_Transmit_IT>
		while( !flag );
 8001904:	bf00      	nop
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <StartTask03+0xac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0fb      	beq.n	8001906 <StartTask03+0x86>
		flag=0;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <StartTask03+0xac>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
		osDelay(1000); //osDelay(1);
 8001914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001918:	f002 fe98 	bl	800464c <osDelay>
	{
 800191c:	e7b5      	b.n	800188a <StartTask03+0xa>
 800191e:	bf00      	nop
 8001920:	20004b84 	.word	0x20004b84
 8001924:	0800b740 	.word	0x0800b740
 8001928:	20004b88 	.word	0x20004b88
 800192c:	20000200 	.word	0x20000200

08001930 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	while (1)
	{ int i;
	  osEventFlagsWait(myEvent01Handle, 0x01, osFlagsWaitAny, osWaitForever);
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <StartTask04+0xa0>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	2200      	movs	r2, #0
 8001942:	2101      	movs	r1, #1
 8001944:	f002 ff20 	bl	8004788 <osEventFlagsWait>
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <StartTask04+0xa4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	4618      	mov	r0, r3
 8001952:	f003 f805 	bl	8004960 <osMutexAcquire>
	  for (i=1;i<5;i++)
 8001956:	2301      	movs	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e00b      	b.n	8001974 <StartTask04+0x44>
	  {
	  led_on(i);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff faf5 	bl	8000f50 <led_on>
	  osDelay(1000);
 8001966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196a:	f002 fe6f 	bl	800464c <osDelay>
	  for (i=1;i<5;i++)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b04      	cmp	r3, #4
 8001978:	ddf0      	ble.n	800195c <StartTask04+0x2c>
	  }
	  for (i=1;i<5;i++)
 800197a:	2301      	movs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e00b      	b.n	8001998 <StartTask04+0x68>
	  {
	  led_off(i);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb35 	bl	8000ff4 <led_off>
	  osDelay(1000);
 800198a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800198e:	f002 fe5d 	bl	800464c <osDelay>
	  for (i=1;i<5;i++)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b04      	cmp	r3, #4
 800199c:	ddf0      	ble.n	8001980 <StartTask04+0x50>
	  }
	  led_on(0);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fad6 	bl	8000f50 <led_on>
	  osDelay(1000);
 80019a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a8:	f002 fe50 	bl	800464c <osDelay>
	  led_off(0);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fb21 	bl	8000ff4 <led_off>
	  osDelay(1000);
 80019b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b6:	f002 fe49 	bl	800464c <osDelay>
	  osMutexRelease(myMutex01Handle);
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <StartTask04+0xa4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 f819 	bl	80049f6 <osMutexRelease>
	  osDelay(1000);
 80019c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c8:	f002 fe40 	bl	800464c <osDelay>
	{ int i;
 80019cc:	e7b4      	b.n	8001938 <StartTask04+0x8>
 80019ce:	bf00      	nop
 80019d0:	20004b28 	.word	0x20004b28
 80019d4:	20004bcc 	.word	0x20004bcc

080019d8 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
	  while(1)
	  {
		osEventFlagsWait(myEvent01Handle, 0x02, osFlagsWaitAny, osWaitForever);
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <StartTask05+0x64>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	2200      	movs	r2, #0
 80019ea:	2102      	movs	r1, #2
 80019ec:	f002 fecc 	bl	8004788 <osEventFlagsWait>
		osMutexAcquire(myMutex01Handle, osWaitForever);
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <StartTask05+0x68>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 ffb1 	bl	8004960 <osMutexAcquire>
		led_on(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff faa6 	bl	8000f50 <led_on>
		led_on(3);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f7ff faa3 	bl	8000f50 <led_on>
		osDelay(1000);
 8001a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0e:	f002 fe1d 	bl	800464c <osDelay>
		led_off(2);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f7ff faee 	bl	8000ff4 <led_off>
		led_off(4);
 8001a18:	2004      	movs	r0, #4
 8001a1a:	f7ff faeb 	bl	8000ff4 <led_off>
		osDelay(1000);
 8001a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a22:	f002 fe13 	bl	800464c <osDelay>
		osMutexRelease(myMutex01Handle);
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <StartTask05+0x68>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 ffe3 	bl	80049f6 <osMutexRelease>
		osDelay(1000);
 8001a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a34:	f002 fe0a 	bl	800464c <osDelay>
		osEventFlagsWait(myEvent01Handle, 0x02, osFlagsWaitAny, osWaitForever);
 8001a38:	e7d2      	b.n	80019e0 <StartTask05+0x8>
 8001a3a:	bf00      	nop
 8001a3c:	20004b28 	.word	0x20004b28
 8001a40:	20004bcc 	.word	0x20004bcc

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	210f      	movs	r1, #15
 8001a92:	f06f 0001 	mvn.w	r0, #1
 8001a96:	f000 ff10 	bl	80028ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_ADC_MspInit+0x7c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d127      	bne.n	8001b1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8001b02:	2353      	movs	r3, #83	; 0x53
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_ADC_MspInit+0x84>)
 8001b16:	f000 ff99 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40012000 	.word	0x40012000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_UART_MspInit+0x94>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d133      	bne.n	8001bba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4809      	ldr	r0, [pc, #36]	; (8001bcc <HAL_UART_MspInit+0x9c>)
 8001ba6:	f000 ff51 	bl	8002a4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2105      	movs	r1, #5
 8001bae:	2026      	movs	r0, #38	; 0x26
 8001bb0:	f000 fe83 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb4:	2026      	movs	r0, #38	; 0x26
 8001bb6:	f000 fe9c 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c00:	f000 f96e 	bl	8001ee0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c04:	f005 f9e4 	bl	8006fd0 <xTaskGetSchedulerState>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c0e:	f006 f903 	bl	8007e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c1a:	2010      	movs	r0, #16
 8001c1c:	f001 f8cc 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART2_IRQHandler+0x10>)
 8001c2a:	f001 fdef 	bl	800380c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20004b88 	.word	0x20004b88

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c52:	f006 fb5b 	bl	800830c <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
	}

return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
	}
	return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f006 fac0 	bl	800830c <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20020000 	.word	0x20020000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000208 	.word	0x20000208
 8001dc0:	20004c28 	.word	0x20004c28

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e12:	f7ff ffd7 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f006 fa7f 	bl	8008318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff f93d 	bl	8001098 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e2c:	0800bc8c 	.word	0x0800bc8c
  ldr r2, =_sbss
 8001e30:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e34:	20004c24 	.word	0x20004c24

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 fd1d 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fdee 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fd35 	bl	800290e <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f000 fcfd 	bl	80028ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20004bd0 	.word	0x20004bd0

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20004bd0 	.word	0x20004bd0

08001f20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e033      	b.n	8001f9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fdb2 	bl	8001aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d118      	bne.n	8001f90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f66:	f023 0302 	bic.w	r3, r3, #2
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 faca 	bl	800250c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8e:	e001      	b.n	8001f94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Start+0x1a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e097      	b.n	80020f2 <HAL_ADC_Start+0x14a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d018      	beq.n	800200a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe8:	4b45      	ldr	r3, [pc, #276]	; (8002100 <HAL_ADC_Start+0x158>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_ADC_Start+0x15c>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9a      	lsrs	r2, r3, #18
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d15f      	bne.n	80020d8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002056:	d106      	bne.n	8002066 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	f023 0206 	bic.w	r2, r3, #6
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	645a      	str	r2, [r3, #68]	; 0x44
 8002064:	e002      	b.n	800206c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_ADC_Start+0x160>)
 8002076:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002080:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d129      	bne.n	80020f0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e020      	b.n	80020f0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_ADC_Start+0x164>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d11b      	bne.n	80020f0 <HAL_ADC_Start+0x148>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d114      	bne.n	80020f0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	e00b      	b.n	80020f0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f043 0210 	orr.w	r2, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000000 	.word	0x20000000
 8002104:	431bde83 	.word	0x431bde83
 8002108:	40012300 	.word	0x40012300
 800210c:	40012000 	.word	0x40012000

08002110 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Stop+0x16>
 8002122:	2302      	movs	r3, #2
 8002124:	e021      	b.n	800216a <HAL_ADC_Stop+0x5a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002192:	d113      	bne.n	80021bc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800219e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a2:	d10b      	bne.n	80021bc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f043 0220 	orr.w	r2, r3, #32
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e063      	b.n	8002284 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021bc:	f7ff fea4 	bl	8001f08 <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021c2:	e021      	b.n	8002208 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d01d      	beq.n	8002208 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_ADC_PollForConversion+0x6c>
 80021d2:	f7ff fe99 	bl	8001f08 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d212      	bcs.n	8002208 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d00b      	beq.n	8002208 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e03d      	b.n	8002284 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d1d6      	bne.n	80021c4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f06f 0212 	mvn.w	r2, #18
 800221e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d123      	bne.n	8002282 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11f      	bne.n	8002282 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800225a:	2b00      	cmp	r3, #0
 800225c:	d111      	bne.n	8002282 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1c>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e113      	b.n	80024ec <HAL_ADC_ConfigChannel+0x244>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	d925      	bls.n	8002320 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	3b1e      	subs	r3, #30
 80022ea:	2207      	movs	r2, #7
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43da      	mvns	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	400a      	ands	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68d9      	ldr	r1, [r3, #12]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	4618      	mov	r0, r3
 800230c:	4603      	mov	r3, r0
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4403      	add	r3, r0
 8002312:	3b1e      	subs	r3, #30
 8002314:	409a      	lsls	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	e022      	b.n	8002366 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	2207      	movs	r2, #7
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	400a      	ands	r2, r1
 8002342:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6919      	ldr	r1, [r3, #16]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	4603      	mov	r3, r0
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4403      	add	r3, r0
 800235c:	409a      	lsls	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d824      	bhi.n	80023b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b05      	subs	r3, #5
 8002380:	221f      	movs	r2, #31
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	400a      	ands	r2, r1
 800238e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4618      	mov	r0, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b05      	subs	r3, #5
 80023aa:	fa00 f203 	lsl.w	r2, r0, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
 80023b6:	e04c      	b.n	8002452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d824      	bhi.n	800240a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b23      	subs	r3, #35	; 0x23
 80023d2:	221f      	movs	r2, #31
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43da      	mvns	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	400a      	ands	r2, r1
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3b23      	subs	r3, #35	; 0x23
 80023fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
 8002408:	e023      	b.n	8002452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b41      	subs	r3, #65	; 0x41
 800241c:	221f      	movs	r2, #31
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	400a      	ands	r2, r1
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	4618      	mov	r0, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b41      	subs	r3, #65	; 0x41
 8002446:	fa00 f203 	lsl.w	r2, r0, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_ADC_ConfigChannel+0x250>)
 8002454:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a28      	ldr	r2, [pc, #160]	; (80024fc <HAL_ADC_ConfigChannel+0x254>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d10f      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1d8>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b12      	cmp	r3, #18
 8002466:	d10b      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_ADC_ConfigChannel+0x254>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d12b      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x23a>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <HAL_ADC_ConfigChannel+0x258>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d003      	beq.n	800249c <HAL_ADC_ConfigChannel+0x1f4>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b11      	cmp	r3, #17
 800249a:	d122      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a11      	ldr	r2, [pc, #68]	; (8002500 <HAL_ADC_ConfigChannel+0x258>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d111      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_ADC_ConfigChannel+0x25c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_ADC_ConfigChannel+0x260>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	0c9a      	lsrs	r2, r3, #18
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d4:	e002      	b.n	80024dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40012300 	.word	0x40012300
 80024fc:	40012000 	.word	0x40012000
 8002500:	10000012 	.word	0x10000012
 8002504:	20000000 	.word	0x20000000
 8002508:	431bde83 	.word	0x431bde83

0800250c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002514:	4b79      	ldr	r3, [pc, #484]	; (80026fc <ADC_Init+0x1f0>)
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <ADC_Init+0x1f4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e00f      	b.n	800260a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002608:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0202 	bic.w	r2, r2, #2
 8002618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
 8002624:	005a      	lsls	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01b      	beq.n	8002670 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002646:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002656:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	3b01      	subs	r3, #1
 8002664:	035a      	lsls	r2, r3, #13
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	e007      	b.n	8002680 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800267e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	3b01      	subs	r3, #1
 800269c:	051a      	lsls	r2, r3, #20
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c2:	025a      	lsls	r2, r3, #9
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	029a      	lsls	r2, r3, #10
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40012300 	.word	0x40012300
 8002700:	0f000001 	.word	0x0f000001

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <__NVIC_EnableIRQ+0x38>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff8e 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff29 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff3e 	bl	800274c <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ff8e 	bl	80027f8 <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff31 	bl	8002768 <__NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffa2 	bl	8002860 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff fae8 	bl	8001f08 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d008      	beq.n	8002958 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e052      	b.n	80029fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0216 	bic.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002976:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d103      	bne.n	8002988 <HAL_DMA_Abort+0x62>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0208 	bic.w	r2, r2, #8
 8002996:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a8:	e013      	b.n	80029d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029aa:	f7ff faad 	bl	8001f08 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d90c      	bls.n	80029d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2203      	movs	r2, #3
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e015      	b.n	80029fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e4      	bne.n	80029aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	223f      	movs	r2, #63	; 0x3f
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d004      	beq.n	8002a24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2280      	movs	r2, #128	; 0x80
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e00c      	b.n	8002a3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2205      	movs	r2, #5
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e159      	b.n	8002d1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 8148 	bne.w	8002d16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d005      	beq.n	8002a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d130      	bne.n	8002b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0201 	and.w	r2, r3, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d017      	beq.n	8002b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d123      	bne.n	8002b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	69b9      	ldr	r1, [r7, #24]
 8002b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80a2 	beq.w	8002d16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bee:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_GPIO_Init+0x2ec>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a49      	ldr	r2, [pc, #292]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d019      	beq.n	8002c4e <HAL_GPIO_Init+0x202>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <HAL_GPIO_Init+0x2f4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_GPIO_Init+0x1fe>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a47      	ldr	r2, [pc, #284]	; (8002d44 <HAL_GPIO_Init+0x2f8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00d      	beq.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_GPIO_Init+0x2fc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_Init+0x1f6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a45      	ldr	r2, [pc, #276]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_GPIO_Init+0x1f2>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c3e:	2307      	movs	r3, #7
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	; (8002d38 <HAL_GPIO_Init+0x2ec>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c92:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cbc:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	f67f aea2 	bls.w	8002a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da0:	e003      	b.n	8002daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	041a      	lsls	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	619a      	str	r2, [r3, #24]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dce:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f806 	bl	8002de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40013c00 	.word	0x40013c00

08002de8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e264      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d075      	beq.n	8002f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1e:	4ba3      	ldr	r3, [pc, #652]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d00c      	beq.n	8002e44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2a:	4ba0      	ldr	r3, [pc, #640]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d112      	bne.n	8002e5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e36:	4b9d      	ldr	r3, [pc, #628]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	4b99      	ldr	r3, [pc, #612]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d05b      	beq.n	8002f08 <HAL_RCC_OscConfig+0x108>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d157      	bne.n	8002f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e23f      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x74>
 8002e66:	4b91      	ldr	r3, [pc, #580]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a90      	ldr	r2, [pc, #576]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e01d      	b.n	8002eb0 <HAL_RCC_OscConfig+0xb0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x98>
 8002e7e:	4b8b      	ldr	r3, [pc, #556]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a8a      	ldr	r2, [pc, #552]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b88      	ldr	r3, [pc, #544]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a87      	ldr	r2, [pc, #540]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0xb0>
 8002e98:	4b84      	ldr	r3, [pc, #528]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a83      	ldr	r2, [pc, #524]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b81      	ldr	r3, [pc, #516]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a80      	ldr	r2, [pc, #512]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f826 	bl	8001f08 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7ff f822 	bl	8001f08 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e204      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xc0>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff f812 	bl	8001f08 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff f80e 	bl	8001f08 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1f0      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	4b6c      	ldr	r3, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xe8>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d063      	beq.n	8002fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f22:	4b62      	ldr	r3, [pc, #392]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d11c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d116      	bne.n	8002f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_RCC_OscConfig+0x152>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e1c4      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f52:	4b56      	ldr	r3, [pc, #344]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4952      	ldr	r1, [pc, #328]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	e03a      	b.n	8002fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f70:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <HAL_RCC_OscConfig+0x2b0>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fe ffc7 	bl	8001f08 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7e:	f7fe ffc3 	bl	8001f08 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1a5      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	4b46      	ldr	r3, [pc, #280]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9c:	4b43      	ldr	r3, [pc, #268]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4940      	ldr	r1, [pc, #256]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]
 8002fb0:	e015      	b.n	8002fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCC_OscConfig+0x2b0>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe ffa6 	bl	8001f08 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc0:	f7fe ffa2 	bl	8001f08 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e184      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d030      	beq.n	800304c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_OscConfig+0x2b4>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe ff86 	bl	8001f08 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003000:	f7fe ff82 	bl	8001f08 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e164      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8003014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x200>
 800301e:	e015      	b.n	800304c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0x2b4>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe ff6f 	bl	8001f08 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302e:	f7fe ff6b 	bl	8001f08 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e14d      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a0 	beq.w	800319a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_RCC_OscConfig+0x2ac>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_OscConfig+0x2b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d121      	bne.n	80030da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCC_OscConfig+0x2b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_RCC_OscConfig+0x2b8>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fe ff31 	bl	8001f08 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e011      	b.n	80030ce <HAL_RCC_OscConfig+0x2ce>
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	42470000 	.word	0x42470000
 80030b4:	42470e80 	.word	0x42470e80
 80030b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fe ff24 	bl	8001f08 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e106      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x4e4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d106      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
 80030e2:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	4a80      	ldr	r2, [pc, #512]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6713      	str	r3, [r2, #112]	; 0x70
 80030ee:	e01c      	b.n	800312a <HAL_RCC_OscConfig+0x32a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b05      	cmp	r3, #5
 80030f6:	d10c      	bne.n	8003112 <HAL_RCC_OscConfig+0x312>
 80030f8:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a7a      	ldr	r2, [pc, #488]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	4b78      	ldr	r3, [pc, #480]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a77      	ldr	r2, [pc, #476]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	e00b      	b.n	800312a <HAL_RCC_OscConfig+0x32a>
 8003112:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a74      	ldr	r2, [pc, #464]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
 800311e:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a71      	ldr	r2, [pc, #452]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d015      	beq.n	800315e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe fee9 	bl	8001f08 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003138:	e00a      	b.n	8003150 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313a:	f7fe fee5 	bl	8001f08 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0c5      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ee      	beq.n	800313a <HAL_RCC_OscConfig+0x33a>
 800315c:	e014      	b.n	8003188 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fe fed3 	bl	8001f08 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fe fecf 	bl	8001f08 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0af      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	4b5a      	ldr	r3, [pc, #360]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ee      	bne.n	8003166 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a55      	ldr	r2, [pc, #340]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 809b 	beq.w	80032da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d05c      	beq.n	800326a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d141      	bne.n	800323c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b8:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x4ec>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe fea3 	bl	8001f08 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe fe9f 	bl	8001f08 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e081      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	019b      	lsls	r3, r3, #6
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	4937      	ldr	r1, [pc, #220]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_RCC_OscConfig+0x4ec>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fe78 	bl	8001f08 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fe74 	bl	8001f08 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e056      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x41c>
 800323a:	e04e      	b.n	80032da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <HAL_RCC_OscConfig+0x4ec>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe fe61 	bl	8001f08 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fe5d 	bl	8001f08 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e03f      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x44a>
 8003268:	e037      	b.n	80032da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e032      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_RCC_OscConfig+0x4e8>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d028      	beq.n	80032d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d11a      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40007000 	.word	0x40007000
 80032e8:	40023800 	.word	0x40023800
 80032ec:	42470060 	.word	0x42470060

080032f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0cc      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b68      	ldr	r3, [pc, #416]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d90c      	bls.n	800332c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b65      	ldr	r3, [pc, #404]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0b8      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003344:	4b59      	ldr	r3, [pc, #356]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a58      	ldr	r2, [pc, #352]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800334e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800335c:	4b53      	ldr	r3, [pc, #332]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4a52      	ldr	r2, [pc, #328]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b50      	ldr	r3, [pc, #320]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	494d      	ldr	r1, [pc, #308]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d044      	beq.n	8003410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d119      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e07f      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d003      	beq.n	80033ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e06f      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e067      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ce:	4b37      	ldr	r3, [pc, #220]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4934      	ldr	r1, [pc, #208]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e0:	f7fe fd92 	bl	8001f08 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7fe fd8e 	bl	8001f08 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e04f      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 020c 	and.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	429a      	cmp	r2, r3
 800340e:	d1eb      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d20c      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e032      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4916      	ldr	r1, [pc, #88]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	490e      	ldr	r1, [pc, #56]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003476:	f000 f821 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 800347a:	4602      	mov	r2, r0
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	490a      	ldr	r1, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	5ccb      	ldrb	r3, [r1, r3]
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fcf2 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023c00 	.word	0x40023c00
 80034ac:	40023800 	.word	0x40023800
 80034b0:	0800b880 	.word	0x0800b880
 80034b4:	20000000 	.word	0x20000000
 80034b8:	20000004 	.word	0x20000004

080034bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	2300      	movs	r3, #0
 80034ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034d4:	4b67      	ldr	r3, [pc, #412]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d00d      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x40>
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	f200 80bd 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ee:	e0b7      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f0:	4b61      	ldr	r3, [pc, #388]	; (8003678 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034f2:	60bb      	str	r3, [r7, #8]
       break;
 80034f4:	e0b7      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034f6:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034f8:	60bb      	str	r3, [r7, #8]
      break;
 80034fa:	e0b4      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034fc:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003504:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003506:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04d      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003512:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	099b      	lsrs	r3, r3, #6
 8003518:	461a      	mov	r2, r3
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	ea02 0800 	and.w	r8, r2, r0
 800352a:	ea03 0901 	and.w	r9, r3, r1
 800352e:	4640      	mov	r0, r8
 8003530:	4649      	mov	r1, r9
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	014b      	lsls	r3, r1, #5
 800353c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003540:	0142      	lsls	r2, r0, #5
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	ebb0 0008 	subs.w	r0, r0, r8
 800354a:	eb61 0109 	sbc.w	r1, r1, r9
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	018b      	lsls	r3, r1, #6
 8003558:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800355c:	0182      	lsls	r2, r0, #6
 800355e:	1a12      	subs	r2, r2, r0
 8003560:	eb63 0301 	sbc.w	r3, r3, r1
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	00d9      	lsls	r1, r3, #3
 800356e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003572:	00d0      	lsls	r0, r2, #3
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	eb12 0208 	adds.w	r2, r2, r8
 800357c:	eb43 0309 	adc.w	r3, r3, r9
 8003580:	f04f 0000 	mov.w	r0, #0
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	0259      	lsls	r1, r3, #9
 800358a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800358e:	0250      	lsls	r0, r2, #9
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	f7fd fb5a 	bl	8000c58 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e04a      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	461a      	mov	r2, r3
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	ea02 0400 	and.w	r4, r2, r0
 80035c6:	ea03 0501 	and.w	r5, r3, r1
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	014b      	lsls	r3, r1, #5
 80035d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035dc:	0142      	lsls	r2, r0, #5
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	1b00      	subs	r0, r0, r4
 80035e4:	eb61 0105 	sbc.w	r1, r1, r5
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	018b      	lsls	r3, r1, #6
 80035f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035f6:	0182      	lsls	r2, r0, #6
 80035f8:	1a12      	subs	r2, r2, r0
 80035fa:	eb63 0301 	sbc.w	r3, r3, r1
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	00d9      	lsls	r1, r3, #3
 8003608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800360c:	00d0      	lsls	r0, r2, #3
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	1912      	adds	r2, r2, r4
 8003614:	eb45 0303 	adc.w	r3, r5, r3
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0299      	lsls	r1, r3, #10
 8003622:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003626:	0290      	lsls	r0, r2, #10
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	f7fd fb0e 	bl	8000c58 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	60bb      	str	r3, [r7, #8]
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003662:	60bb      	str	r3, [r7, #8]
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	68bb      	ldr	r3, [r7, #8]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	007a1200 	.word	0x007a1200

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	0800b890 	.word	0x0800b890

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffdc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	0800b890 	.word	0x0800b890

080036e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e03f      	b.n	800377a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe fa0e 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fcb5 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b20      	cmp	r3, #32
 800379a:	d130      	bne.n	80037fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_Transmit_IT+0x26>
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e029      	b.n	8003800 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Transmit_IT+0x38>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e022      	b.n	8003800 <HAL_UART_Transmit_IT+0x7e>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2221      	movs	r2, #33	; 0x21
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0ba      	sub	sp, #232	; 0xe8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800384a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_UART_IRQHandler+0x66>
 800385e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb5b 	bl	8003f26 <UART_Receive_IT>
      return;
 8003870:	e256      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80de 	beq.w	8003a38 <HAL_UART_IRQHandler+0x22c>
 800387c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80d1 	beq.w	8003a38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_UART_IRQHandler+0xae>
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_UART_IRQHandler+0xd2>
 80038c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_UART_IRQHandler+0xf6>
 80038ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d011      	beq.n	8003932 <HAL_UART_IRQHandler+0x126>
 800390e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800391a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0208 	orr.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 81ed 	beq.w	8003d16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_UART_IRQHandler+0x14e>
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fae6 	bl	8003f26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_UART_IRQHandler+0x17a>
 800397e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d04f      	beq.n	8003a26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9ee 	bl	8003d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d141      	bne.n	8003a1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1d9      	bne.n	800399a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d013      	beq.n	8003a16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	4a7d      	ldr	r2, [pc, #500]	; (8003be8 <HAL_UART_IRQHandler+0x3dc>)
 80039f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f803 	bl	8002a06 <HAL_DMA_Abort_IT>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a10:	4610      	mov	r0, r2
 8003a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a14:	e00e      	b.n	8003a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f990 	bl	8003d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	e00a      	b.n	8003a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f98c 	bl	8003d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e006      	b.n	8003a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f988 	bl	8003d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a32:	e170      	b.n	8003d16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	bf00      	nop
    return;
 8003a36:	e16e      	b.n	8003d16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f040 814a 	bne.w	8003cd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8143 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 813c 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	f040 80b4 	bne.w	8003bec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8140 	beq.w	8003d1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	f080 8139 	bcs.w	8003d1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aba:	f000 8088 	beq.w	8003bce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1d9      	bne.n	8003abe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e1      	bne.n	8003b0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3314      	adds	r3, #20
 8003b4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e3      	bne.n	8003b46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9e:	f023 0310 	bic.w	r3, r3, #16
 8003ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e3      	bne.n	8003b8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe feac 	bl	8002926 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8b6 	bl	8003d50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003be4:	e099      	b.n	8003d1a <HAL_UART_IRQHandler+0x50e>
 8003be6:	bf00      	nop
 8003be8:	08003e2f 	.word	0x08003e2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 808b 	beq.w	8003d1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8086 	beq.w	8003d1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c36:	647a      	str	r2, [r7, #68]	; 0x44
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e3      	bne.n	8003c12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	623b      	str	r3, [r7, #32]
   return(result);
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e3      	bne.n	8003c4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0310 	bic.w	r3, r3, #16
 8003ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cb4:	61fa      	str	r2, [r7, #28]
 8003cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e3      	bne.n	8003c90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f83e 	bl	8003d50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd4:	e023      	b.n	8003d1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x4ea>
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8b1 	bl	8003e56 <UART_Transmit_IT>
    return;
 8003cf4:	e014      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00e      	beq.n	8003d20 <HAL_UART_IRQHandler+0x514>
 8003d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f8f1 	bl	8003ef6 <UART_EndTransmit_IT>
    return;
 8003d14:	e004      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
    return;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
      return;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
      return;
 8003d1e:	bf00      	nop
  }
}
 8003d20:	37e8      	adds	r7, #232	; 0xe8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop

08003d28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b095      	sub	sp, #84	; 0x54
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d90:	643a      	str	r2, [r7, #64]	; 0x40
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e5      	bne.n	8003d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e5      	bne.n	8003da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d119      	bne.n	8003e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e00:	61ba      	str	r2, [r7, #24]
 8003e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e22:	bf00      	nop
 8003e24:	3754      	adds	r7, #84	; 0x54
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff ff77 	bl	8003d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b21      	cmp	r3, #33	; 0x21
 8003e68:	d13e      	bne.n	8003ee8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d114      	bne.n	8003e9e <UART_Transmit_IT+0x48>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d110      	bne.n	8003e9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]
 8003e9c:	e008      	b.n	8003eb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	1c59      	adds	r1, r3, #1
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6211      	str	r1, [r2, #32]
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10f      	bne.n	8003ee4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd faf4 	bl	8001504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b08c      	sub	sp, #48	; 0x30
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b22      	cmp	r3, #34	; 0x22
 8003f38:	f040 80ab 	bne.w	8004092 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d117      	bne.n	8003f76 <UART_Receive_IT+0x50>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d113      	bne.n	8003f76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	1c9a      	adds	r2, r3, #2
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
 8003f74:	e026      	b.n	8003fc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f88:	d007      	beq.n	8003f9a <UART_Receive_IT+0x74>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <UART_Receive_IT+0x82>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e008      	b.n	8003fba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d15a      	bne.n	800408e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0220 	bic.w	r2, r2, #32
 8003fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d135      	bne.n	8004084 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f023 0310 	bic.w	r3, r3, #16
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	623a      	str	r2, [r7, #32]
 8004040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	69f9      	ldr	r1, [r7, #28]
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	61bb      	str	r3, [r7, #24]
   return(result);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d10a      	bne.n	8004076 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fe67 	bl	8003d50 <HAL_UARTEx_RxEventCallback>
 8004082:	e002      	b.n	800408a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fe4f 	bl	8003d28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e002      	b.n	8004094 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	; 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	b09f      	sub	sp, #124	; 0x7c
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	68d9      	ldr	r1, [r3, #12]
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	ea40 0301 	orr.w	r3, r0, r1
 80040bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040e0:	f021 010c 	bic.w	r1, r1, #12
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ea:	430b      	orrs	r3, r1
 80040ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	6999      	ldr	r1, [r3, #24]
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	ea40 0301 	orr.w	r3, r0, r1
 8004104:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4bc5      	ldr	r3, [pc, #788]	; (8004420 <UART_SetConfig+0x384>)
 800410c:	429a      	cmp	r2, r3
 800410e:	d004      	beq.n	800411a <UART_SetConfig+0x7e>
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4bc3      	ldr	r3, [pc, #780]	; (8004424 <UART_SetConfig+0x388>)
 8004116:	429a      	cmp	r2, r3
 8004118:	d103      	bne.n	8004122 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800411a:	f7ff fad1 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 800411e:	6778      	str	r0, [r7, #116]	; 0x74
 8004120:	e002      	b.n	8004128 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004122:	f7ff fab9 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004126:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004130:	f040 80b6 	bne.w	80042a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004136:	461c      	mov	r4, r3
 8004138:	f04f 0500 	mov.w	r5, #0
 800413c:	4622      	mov	r2, r4
 800413e:	462b      	mov	r3, r5
 8004140:	1891      	adds	r1, r2, r2
 8004142:	6439      	str	r1, [r7, #64]	; 0x40
 8004144:	415b      	adcs	r3, r3
 8004146:	647b      	str	r3, [r7, #68]	; 0x44
 8004148:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800414c:	1912      	adds	r2, r2, r4
 800414e:	eb45 0303 	adc.w	r3, r5, r3
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	00d9      	lsls	r1, r3, #3
 800415c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004160:	00d0      	lsls	r0, r2, #3
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	1911      	adds	r1, r2, r4
 8004168:	6639      	str	r1, [r7, #96]	; 0x60
 800416a:	416b      	adcs	r3, r5
 800416c:	667b      	str	r3, [r7, #100]	; 0x64
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	461a      	mov	r2, r3
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	1891      	adds	r1, r2, r2
 800417a:	63b9      	str	r1, [r7, #56]	; 0x38
 800417c:	415b      	adcs	r3, r3
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004184:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004188:	f7fc fd66 	bl	8000c58 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4ba5      	ldr	r3, [pc, #660]	; (8004428 <UART_SetConfig+0x38c>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011e      	lsls	r6, r3, #4
 800419a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419c:	461c      	mov	r4, r3
 800419e:	f04f 0500 	mov.w	r5, #0
 80041a2:	4622      	mov	r2, r4
 80041a4:	462b      	mov	r3, r5
 80041a6:	1891      	adds	r1, r2, r2
 80041a8:	6339      	str	r1, [r7, #48]	; 0x30
 80041aa:	415b      	adcs	r3, r3
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
 80041ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041b2:	1912      	adds	r2, r2, r4
 80041b4:	eb45 0303 	adc.w	r3, r5, r3
 80041b8:	f04f 0000 	mov.w	r0, #0
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	00d9      	lsls	r1, r3, #3
 80041c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041c6:	00d0      	lsls	r0, r2, #3
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	1911      	adds	r1, r2, r4
 80041ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80041d0:	416b      	adcs	r3, r5
 80041d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	461a      	mov	r2, r3
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	1891      	adds	r1, r2, r2
 80041e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80041e2:	415b      	adcs	r3, r3
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041ee:	f7fc fd33 	bl	8000c58 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <UART_SetConfig+0x38c>)
 80041f8:	fba3 1302 	umull	r1, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	2164      	movs	r1, #100	; 0x64
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	3332      	adds	r3, #50	; 0x32
 800420a:	4a87      	ldr	r2, [pc, #540]	; (8004428 <UART_SetConfig+0x38c>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004218:	441e      	add	r6, r3
 800421a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421c:	4618      	mov	r0, r3
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	1894      	adds	r4, r2, r2
 8004228:	623c      	str	r4, [r7, #32]
 800422a:	415b      	adcs	r3, r3
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004232:	1812      	adds	r2, r2, r0
 8004234:	eb41 0303 	adc.w	r3, r1, r3
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	f04f 0500 	mov.w	r5, #0
 8004240:	00dd      	lsls	r5, r3, #3
 8004242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004246:	00d4      	lsls	r4, r2, #3
 8004248:	4622      	mov	r2, r4
 800424a:	462b      	mov	r3, r5
 800424c:	1814      	adds	r4, r2, r0
 800424e:	653c      	str	r4, [r7, #80]	; 0x50
 8004250:	414b      	adcs	r3, r1
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	461a      	mov	r2, r3
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	1891      	adds	r1, r2, r2
 8004260:	61b9      	str	r1, [r7, #24]
 8004262:	415b      	adcs	r3, r3
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800426e:	f7fc fcf3 	bl	8000c58 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <UART_SetConfig+0x38c>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a67      	ldr	r2, [pc, #412]	; (8004428 <UART_SetConfig+0x38c>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 0207 	and.w	r2, r3, #7
 8004296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4432      	add	r2, r6
 800429c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800429e:	e0b9      	b.n	8004414 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a2:	461c      	mov	r4, r3
 80042a4:	f04f 0500 	mov.w	r5, #0
 80042a8:	4622      	mov	r2, r4
 80042aa:	462b      	mov	r3, r5
 80042ac:	1891      	adds	r1, r2, r2
 80042ae:	6139      	str	r1, [r7, #16]
 80042b0:	415b      	adcs	r3, r3
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042b8:	1912      	adds	r2, r2, r4
 80042ba:	eb45 0303 	adc.w	r3, r5, r3
 80042be:	f04f 0000 	mov.w	r0, #0
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	00d9      	lsls	r1, r3, #3
 80042c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042cc:	00d0      	lsls	r0, r2, #3
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	eb12 0804 	adds.w	r8, r2, r4
 80042d6:	eb43 0905 	adc.w	r9, r3, r5
 80042da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4618      	mov	r0, r3
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	008b      	lsls	r3, r1, #2
 80042ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042f2:	0082      	lsls	r2, r0, #2
 80042f4:	4640      	mov	r0, r8
 80042f6:	4649      	mov	r1, r9
 80042f8:	f7fc fcae 	bl	8000c58 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4b49      	ldr	r3, [pc, #292]	; (8004428 <UART_SetConfig+0x38c>)
 8004302:	fba3 2302 	umull	r2, r3, r3, r2
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	011e      	lsls	r6, r3, #4
 800430a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430c:	4618      	mov	r0, r3
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	1894      	adds	r4, r2, r2
 8004318:	60bc      	str	r4, [r7, #8]
 800431a:	415b      	adcs	r3, r3
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004322:	1812      	adds	r2, r2, r0
 8004324:	eb41 0303 	adc.w	r3, r1, r3
 8004328:	f04f 0400 	mov.w	r4, #0
 800432c:	f04f 0500 	mov.w	r5, #0
 8004330:	00dd      	lsls	r5, r3, #3
 8004332:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004336:	00d4      	lsls	r4, r2, #3
 8004338:	4622      	mov	r2, r4
 800433a:	462b      	mov	r3, r5
 800433c:	1814      	adds	r4, r2, r0
 800433e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004340:	414b      	adcs	r3, r1
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4618      	mov	r0, r3
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	008b      	lsls	r3, r1, #2
 8004358:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800435c:	0082      	lsls	r2, r0, #2
 800435e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004362:	f7fc fc79 	bl	8000c58 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <UART_SetConfig+0x38c>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <UART_SetConfig+0x38c>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800438a:	441e      	add	r6, r3
 800438c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800438e:	4618      	mov	r0, r3
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	1894      	adds	r4, r2, r2
 800439a:	603c      	str	r4, [r7, #0]
 800439c:	415b      	adcs	r3, r3
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a4:	1812      	adds	r2, r2, r0
 80043a6:	eb41 0303 	adc.w	r3, r1, r3
 80043aa:	f04f 0400 	mov.w	r4, #0
 80043ae:	f04f 0500 	mov.w	r5, #0
 80043b2:	00dd      	lsls	r5, r3, #3
 80043b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043b8:	00d4      	lsls	r4, r2, #3
 80043ba:	4622      	mov	r2, r4
 80043bc:	462b      	mov	r3, r5
 80043be:	eb12 0a00 	adds.w	sl, r2, r0
 80043c2:	eb43 0b01 	adc.w	fp, r3, r1
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	008b      	lsls	r3, r1, #2
 80043da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043de:	0082      	lsls	r2, r0, #2
 80043e0:	4650      	mov	r0, sl
 80043e2:	4659      	mov	r1, fp
 80043e4:	f7fc fc38 	bl	8000c58 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <UART_SetConfig+0x38c>)
 80043ee:	fba3 1302 	umull	r1, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2164      	movs	r1, #100	; 0x64
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	3332      	adds	r3, #50	; 0x32
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <UART_SetConfig+0x38c>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 020f 	and.w	r2, r3, #15
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4432      	add	r2, r6
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	377c      	adds	r7, #124	; 0x7c
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441e:	bf00      	nop
 8004420:	40011000 	.word	0x40011000
 8004424:	40011400 	.word	0x40011400
 8004428:	51eb851f 	.word	0x51eb851f

0800442c <__NVIC_SetPriority>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	6039      	str	r1, [r7, #0]
 8004436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443c:	2b00      	cmp	r3, #0
 800443e:	db0a      	blt.n	8004456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2da      	uxtb	r2, r3
 8004444:	490c      	ldr	r1, [pc, #48]	; (8004478 <__NVIC_SetPriority+0x4c>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	0112      	lsls	r2, r2, #4
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	440b      	add	r3, r1
 8004450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004454:	e00a      	b.n	800446c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4908      	ldr	r1, [pc, #32]	; (800447c <__NVIC_SetPriority+0x50>)
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	3b04      	subs	r3, #4
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	440b      	add	r3, r1
 800446a:	761a      	strb	r2, [r3, #24]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000e100 	.word	0xe000e100
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004484:	2100      	movs	r1, #0
 8004486:	f06f 0004 	mvn.w	r0, #4
 800448a:	f7ff ffcf 	bl	800442c <__NVIC_SetPriority>
#endif
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800449a:	f3ef 8305 	mrs	r3, IPSR
 800449e:	603b      	str	r3, [r7, #0]
  return(result);
 80044a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044a6:	f06f 0305 	mvn.w	r3, #5
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e00c      	b.n	80044c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <osKernelInitialize+0x44>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d105      	bne.n	80044c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <osKernelInitialize+0x44>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044bc:	2300      	movs	r3, #0
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	e002      	b.n	80044c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044c8:	687b      	ldr	r3, [r7, #4]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	2000020c 	.word	0x2000020c

080044dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e2:	f3ef 8305 	mrs	r3, IPSR
 80044e6:	603b      	str	r3, [r7, #0]
  return(result);
 80044e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80044ee:	f06f 0305 	mvn.w	r3, #5
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	e010      	b.n	8004518 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <osKernelStart+0x48>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d109      	bne.n	8004512 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044fe:	f7ff ffbf 	bl	8004480 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <osKernelStart+0x48>)
 8004504:	2202      	movs	r2, #2
 8004506:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004508:	f002 f86c 	bl	80065e4 <vTaskStartScheduler>
      stat = osOK;
 800450c:	2300      	movs	r3, #0
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	e002      	b.n	8004518 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004512:	f04f 33ff 	mov.w	r3, #4294967295
 8004516:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004518:	687b      	ldr	r3, [r7, #4]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	2000020c 	.word	0x2000020c

08004528 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	; 0x38
 800452c:	af04      	add	r7, sp, #16
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004538:	f3ef 8305 	mrs	r3, IPSR
 800453c:	617b      	str	r3, [r7, #20]
  return(result);
 800453e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004540:	2b00      	cmp	r3, #0
 8004542:	d17e      	bne.n	8004642 <osThreadNew+0x11a>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d07b      	beq.n	8004642 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800454e:	2318      	movs	r3, #24
 8004550:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d045      	beq.n	80045ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <osThreadNew+0x48>
        name = attr->name;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <osThreadNew+0x6e>
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b38      	cmp	r3, #56	; 0x38
 8004588:	d805      	bhi.n	8004596 <osThreadNew+0x6e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <osThreadNew+0x72>
        return (NULL);
 8004596:	2300      	movs	r3, #0
 8004598:	e054      	b.n	8004644 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <osThreadNew+0xa8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b5b      	cmp	r3, #91	; 0x5b
 80045b8:	d90a      	bls.n	80045d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <osThreadNew+0xa8>
        mem = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e010      	b.n	80045f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10c      	bne.n	80045f2 <osThreadNew+0xca>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <osThreadNew+0xca>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <osThreadNew+0xca>
          mem = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e001      	b.n	80045f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d110      	bne.n	800461a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004600:	9202      	str	r2, [sp, #8]
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6a3a      	ldr	r2, [r7, #32]
 800460c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f001 fe12 	bl	8006238 <xTaskCreateStatic>
 8004614:	4603      	mov	r3, r0
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	e013      	b.n	8004642 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d110      	bne.n	8004642 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	b29a      	uxth	r2, r3
 8004624:	f107 0310 	add.w	r3, r7, #16
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f001 fe5d 	bl	80062f2 <xTaskCreate>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <osThreadNew+0x11a>
            hTask = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004642:	693b      	ldr	r3, [r7, #16]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004654:	f3ef 8305 	mrs	r3, IPSR
 8004658:	60bb      	str	r3, [r7, #8]
  return(result);
 800465a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <osDelay+0x1c>
    stat = osErrorISR;
 8004660:	f06f 0305 	mvn.w	r3, #5
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e007      	b.n	8004678 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 ff82 	bl	800657c <vTaskDelay>
    }
  }

  return (stat);
 8004678:	68fb      	ldr	r3, [r7, #12]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468e:	f3ef 8305 	mrs	r3, IPSR
 8004692:	60fb      	str	r3, [r7, #12]
  return(result);
 8004694:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004696:	2b00      	cmp	r3, #0
 8004698:	d12d      	bne.n	80046f6 <osEventFlagsNew+0x74>
    mem = -1;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d015      	beq.n	80046d2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <osEventFlagsNew+0x3a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b1f      	cmp	r3, #31
 80046b4:	d902      	bls.n	80046bc <osEventFlagsNew+0x3a>
        mem = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e00c      	b.n	80046d6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d108      	bne.n	80046d6 <osEventFlagsNew+0x54>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <osEventFlagsNew+0x54>
          mem = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e001      	b.n	80046d6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fb4b 	bl	8004d7c <xEventGroupCreateStatic>
 80046e6:	6178      	str	r0, [r7, #20]
 80046e8:	e005      	b.n	80046f6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80046f0:	f000 fb7b 	bl	8004dea <xEventGroupCreate>
 80046f4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80046f6:	697b      	ldr	r3, [r7, #20]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <osEventFlagsSet+0x1e>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800471e:	f06f 0303 	mvn.w	r3, #3
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e028      	b.n	8004778 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004726:	f3ef 8305 	mrs	r3, IPSR
 800472a:	60fb      	str	r3, [r7, #12]
  return(result);
 800472c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01d      	beq.n	800476e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	461a      	mov	r2, r3
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	6938      	ldr	r0, [r7, #16]
 8004740:	f000 fcf6 	bl	8005130 <xEventGroupSetBitsFromISR>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800474a:	f06f 0302 	mvn.w	r3, #2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e012      	b.n	8004778 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <osEventFlagsSet+0x78>
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <osEventFlagsSet+0x84>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	e004      	b.n	8004778 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	6938      	ldr	r0, [r7, #16]
 8004772:	f000 fc23 	bl	8004fbc <xEventGroupSetBits>
 8004776:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004778:	697b      	ldr	r3, [r7, #20]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b08c      	sub	sp, #48	; 0x30
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <osEventFlagsWait+0x22>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80047aa:	f06f 0303 	mvn.w	r3, #3
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e04b      	b.n	800484a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b2:	f3ef 8305 	mrs	r3, IPSR
 80047b6:	617b      	str	r3, [r7, #20]
  return(result);
 80047b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80047be:	f06f 0305 	mvn.w	r3, #5
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	e041      	b.n	800484a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	e001      	b.n	80047da <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	e001      	b.n	80047ee <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	69b8      	ldr	r0, [r7, #24]
 80047fa:	f000 fb11 	bl	8004e20 <xEventGroupWaitBits>
 80047fe:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4013      	ands	r3, r2
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	429a      	cmp	r2, r3
 8004814:	d019      	beq.n	800484a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800481c:	f06f 0301 	mvn.w	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e012      	b.n	800484a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004824:	f06f 0302 	mvn.w	r3, #2
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e00e      	b.n	800484a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800483c:	f06f 0301 	mvn.w	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e002      	b.n	800484a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004844:	f06f 0302 	mvn.w	r3, #2
 8004848:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800484a:	69fb      	ldr	r3, [r7, #28]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3728      	adds	r7, #40	; 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004860:	f3ef 8305 	mrs	r3, IPSR
 8004864:	60bb      	str	r3, [r7, #8]
  return(result);
 8004866:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004868:	2b00      	cmp	r3, #0
 800486a:	d174      	bne.n	8004956 <osMutexNew+0x102>
    if (attr != NULL) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <osMutexNew+0x26>
      type = attr->attr_bits;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e001      	b.n	800487e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <osMutexNew+0x3a>
      rmtx = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e001      	b.n	8004892 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d15c      	bne.n	8004956 <osMutexNew+0x102>
      mem = -1;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <osMutexNew+0x6a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b4f      	cmp	r3, #79	; 0x4f
 80048b6:	d902      	bls.n	80048be <osMutexNew+0x6a>
          mem = 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	e00c      	b.n	80048d8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <osMutexNew+0x84>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <osMutexNew+0x84>
            mem = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e001      	b.n	80048d8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d112      	bne.n	8004904 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4619      	mov	r1, r3
 80048ea:	2004      	movs	r0, #4
 80048ec:	f000 fe57 	bl	800559e <xQueueCreateMutexStatic>
 80048f0:	61f8      	str	r0, [r7, #28]
 80048f2:	e016      	b.n	8004922 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4619      	mov	r1, r3
 80048fa:	2001      	movs	r0, #1
 80048fc:	f000 fe4f 	bl	800559e <xQueueCreateMutexStatic>
 8004900:	61f8      	str	r0, [r7, #28]
 8004902:	e00e      	b.n	8004922 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10b      	bne.n	8004922 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004910:	2004      	movs	r0, #4
 8004912:	f000 fe2c 	bl	800556e <xQueueCreateMutex>
 8004916:	61f8      	str	r0, [r7, #28]
 8004918:	e003      	b.n	8004922 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800491a:	2001      	movs	r0, #1
 800491c:	f000 fe27 	bl	800556e <xQueueCreateMutex>
 8004920:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <osMutexNew+0xee>
        if (attr != NULL) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <osMutexNew+0xe2>
          name = attr->name;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e001      	b.n	800493a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	69f8      	ldr	r0, [r7, #28]
 800493e:	f001 fc1d 	bl	800617c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d006      	beq.n	8004956 <osMutexNew+0x102>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004956:	69fb      	ldr	r3, [r7, #28]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800497e:	f3ef 8305 	mrs	r3, IPSR
 8004982:	60bb      	str	r3, [r7, #8]
  return(result);
 8004984:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800498a:	f06f 0305 	mvn.w	r3, #5
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e02c      	b.n	80049ec <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d103      	bne.n	80049a0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004998:	f06f 0303 	mvn.w	r3, #3
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e025      	b.n	80049ec <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d011      	beq.n	80049ca <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80049a6:	6839      	ldr	r1, [r7, #0]
 80049a8:	6938      	ldr	r0, [r7, #16]
 80049aa:	f000 fe47 	bl	800563c <xQueueTakeMutexRecursive>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d01b      	beq.n	80049ec <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80049ba:	f06f 0301 	mvn.w	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e014      	b.n	80049ec <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80049c2:	f06f 0302 	mvn.w	r3, #2
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e010      	b.n	80049ec <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6938      	ldr	r0, [r7, #16]
 80049ce:	f001 f8e5 	bl	8005b9c <xQueueSemaphoreTake>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d009      	beq.n	80049ec <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80049de:	f06f 0301 	mvn.w	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e002      	b.n	80049ec <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80049e6:	f06f 0302 	mvn.w	r3, #2
 80049ea:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80049ec:	697b      	ldr	r3, [r7, #20]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a12:	f3ef 8305 	mrs	r3, IPSR
 8004a16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a18:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004a1e:	f06f 0305 	mvn.w	r3, #5
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e01f      	b.n	8004a66 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004a2c:	f06f 0303 	mvn.w	r3, #3
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	e018      	b.n	8004a66 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f000 fdca 	bl	80055d4 <xQueueGiveMutexRecursive>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d00f      	beq.n	8004a66 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004a46:	f06f 0302 	mvn.w	r3, #2
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e00b      	b.n	8004a66 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2200      	movs	r2, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	6938      	ldr	r0, [r7, #16]
 8004a56:	f000 fe27 	bl	80056a8 <xQueueGenericSend>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d002      	beq.n	8004a66 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004a60:	f06f 0302 	mvn.w	r3, #2
 8004a64:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a66:	697b      	ldr	r3, [r7, #20]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a80:	f3ef 8305 	mrs	r3, IPSR
 8004a84:	613b      	str	r3, [r7, #16]
  return(result);
 8004a86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d15f      	bne.n	8004b4c <osMessageQueueNew+0xdc>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d05c      	beq.n	8004b4c <osMessageQueueNew+0xdc>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d059      	beq.n	8004b4c <osMessageQueueNew+0xdc>
    mem = -1;
 8004a98:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d029      	beq.n	8004af8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d012      	beq.n	8004ad2 <osMessageQueueNew+0x62>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b4f      	cmp	r3, #79	; 0x4f
 8004ab2:	d90e      	bls.n	8004ad2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d302      	bcc.n	8004ad2 <osMessageQueueNew+0x62>
        mem = 1;
 8004acc:	2301      	movs	r3, #1
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e014      	b.n	8004afc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d110      	bne.n	8004afc <osMessageQueueNew+0x8c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <osMessageQueueNew+0x8c>
          mem = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	e001      	b.n	8004afc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d10b      	bne.n	8004b1a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	9100      	str	r1, [sp, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fc3d 	bl	8005390 <xQueueGenericCreateStatic>
 8004b16:	61f8      	str	r0, [r7, #28]
 8004b18:	e008      	b.n	8004b2c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004b20:	2200      	movs	r2, #0
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fcab 	bl	8005480 <xQueueGenericCreate>
 8004b2a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00c      	beq.n	8004b4c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	e001      	b.n	8004b44 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b44:	6979      	ldr	r1, [r7, #20]
 8004b46:	69f8      	ldr	r0, [r7, #28]
 8004b48:	f001 fb18 	bl	800617c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b70:	f3ef 8305 	mrs	r3, IPSR
 8004b74:	617b      	str	r3, [r7, #20]
  return(result);
 8004b76:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d028      	beq.n	8004bce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <osMessageQueuePut+0x36>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <osMessageQueuePut+0x36>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004b8e:	f06f 0303 	mvn.w	r3, #3
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	e038      	b.n	8004c08 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004b9a:	f107 0210 	add.w	r2, r7, #16
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	69b8      	ldr	r0, [r7, #24]
 8004ba4:	f000 fe7e 	bl	80058a4 <xQueueGenericSendFromISR>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d003      	beq.n	8004bb6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004bae:	f06f 0302 	mvn.w	r3, #2
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e028      	b.n	8004c08 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d025      	beq.n	8004c08 <osMessageQueuePut+0xb0>
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <osMessageQueuePut+0xbc>)
 8004bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	e01c      	b.n	8004c08 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <osMessageQueuePut+0x82>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004bda:	f06f 0303 	mvn.w	r3, #3
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e012      	b.n	8004c08 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004be2:	2300      	movs	r3, #0
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	69b8      	ldr	r0, [r7, #24]
 8004bea:	f000 fd5d 	bl	80056a8 <xQueueGenericSend>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d009      	beq.n	8004c08 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004bfa:	f06f 0301 	mvn.w	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e002      	b.n	8004c08 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004c02:	f06f 0302 	mvn.w	r3, #2
 8004c06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c2e:	f3ef 8305 	mrs	r3, IPSR
 8004c32:	617b      	str	r3, [r7, #20]
  return(result);
 8004c34:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <osMessageQueueGet+0x34>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <osMessageQueueGet+0x34>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004c4c:	f06f 0303 	mvn.w	r3, #3
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e037      	b.n	8004cc4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004c58:	f107 0310 	add.w	r3, r7, #16
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	69b8      	ldr	r0, [r7, #24]
 8004c62:	f001 f8a7 	bl	8005db4 <xQueueReceiveFromISR>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d003      	beq.n	8004c74 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004c6c:	f06f 0302 	mvn.w	r3, #2
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e027      	b.n	8004cc4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d024      	beq.n	8004cc4 <osMessageQueueGet+0xac>
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <osMessageQueueGet+0xb8>)
 8004c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	e01b      	b.n	8004cc4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <osMessageQueueGet+0x80>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004c98:	f06f 0303 	mvn.w	r3, #3
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	e011      	b.n	8004cc4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	69b8      	ldr	r0, [r7, #24]
 8004ca6:	f000 fe99 	bl	80059dc <xQueueReceive>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d009      	beq.n	8004cc4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004cb6:	f06f 0301 	mvn.w	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e002      	b.n	8004cc4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004cbe:	f06f 0302 	mvn.w	r3, #2
 8004cc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004cc4:	69fb      	ldr	r3, [r7, #28]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <osMessageQueueGetCount+0x18>
    count = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e00e      	b.n	8004d0a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cec:	f3ef 8305 	mrs	r3, IPSR
 8004cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004cf8:	6938      	ldr	r0, [r7, #16]
 8004cfa:	f001 f8f9 	bl	8005ef0 <uxQueueMessagesWaitingFromISR>
 8004cfe:	6178      	str	r0, [r7, #20]
 8004d00:	e003      	b.n	8004d0a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004d02:	6938      	ldr	r0, [r7, #16]
 8004d04:	f001 f8d6 	bl	8005eb4 <uxQueueMessagesWaiting>
 8004d08:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8004d0a:	697b      	ldr	r3, [r7, #20]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4a06      	ldr	r2, [pc, #24]	; (8004d44 <vApplicationGetIdleTaskMemory+0x30>)
 8004d2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000210 	.word	0x20000210
 8004d44:	2000026c 	.word	0x2000026c

08004d48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <vApplicationGetTimerTaskMemory+0x30>)
 8004d5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d66:	601a      	str	r2, [r3, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	2000046c 	.word	0x2000046c
 8004d78:	200004c8 	.word	0x200004c8

08004d7c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004da0:	2320      	movs	r3, #32
 8004da2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d00a      	beq.n	8004dc0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	60fb      	str	r3, [r7, #12]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f9bf 	bl	8005158 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004de0:	697b      	ldr	r3, [r7, #20]
	}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004df0:	2020      	movs	r0, #32
 8004df2:	f003 f8a1 	bl	8007f38 <pvPortMalloc>
 8004df6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f9a5 	bl	8005158 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004e14:	687b      	ldr	r3, [r7, #4]
	}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b090      	sub	sp, #64	; 0x40
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xEventGroupWaitBits+0x36>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	61fb      	str	r3, [r7, #28]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <xEventGroupWaitBits+0x72>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	61bb      	str	r3, [r7, #24]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e92:	f002 f89d 	bl	8006fd0 <xTaskGetSchedulerState>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <xEventGroupWaitBits+0x82>
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <xEventGroupWaitBits+0x86>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <xEventGroupWaitBits+0x88>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	617b      	str	r3, [r7, #20]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004ec2:	f001 fbf5 	bl	80066b0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ed2:	f000 f90b 	bl	80050ec <prvTestWaitCondition>
 8004ed6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00e      	beq.n	8004efc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d028      	beq.n	8004f3e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	401a      	ands	r2, r3
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e020      	b.n	8004f3e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004f06:	2301      	movs	r3, #1
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0a:	e018      	b.n	8004f3e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	1d18      	adds	r0, r3, #4
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	4313      	orrs	r3, r2
 8004f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f34:	4619      	mov	r1, r3
 8004f36:	f001 fdb3 	bl	8006aa0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004f3e:	f001 fbc5 	bl	80066cc <xTaskResumeAll>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d031      	beq.n	8004fae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <xEventGroupWaitBits+0x198>)
 8004f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004f60:	f002 f9ac 	bl	80072bc <uxTaskResetEventItemValue>
 8004f64:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d11a      	bne.n	8004fa6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004f70:	f002 fec0 	bl	8007cf4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f80:	f000 f8b4 	bl	80050ec <prvTestWaitCondition>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	43db      	mvns	r3, r3
 8004f98:	401a      	ands	r2, r3
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004fa2:	f002 fed7 	bl	8007d54 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3740      	adds	r7, #64	; 0x40
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xEventGroupSetBits+0x32>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	613b      	str	r3, [r7, #16]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <xEventGroupSetBits+0x52>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	60fb      	str	r3, [r7, #12]
}
 800500a:	bf00      	nop
 800500c:	e7fe      	b.n	800500c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	3304      	adds	r3, #4
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	3308      	adds	r3, #8
 8005018:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800501a:	f001 fb49 	bl	80066b0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	431a      	orrs	r2, r3
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005030:	e03c      	b.n	80050ac <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800503e:	2300      	movs	r3, #0
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005048:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005050:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d108      	bne.n	800506e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	4013      	ands	r3, r2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800506c:	e008      	b.n	8005080 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	429a      	cmp	r2, r3
 800507a:	d101      	bne.n	8005080 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d010      	beq.n	80050a8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050a0:	4619      	mov	r1, r3
 80050a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050a4:	f001 fdc8 	bl	8006c38 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80050ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d1be      	bne.n	8005032 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	43db      	mvns	r3, r3
 80050bc:	401a      	ands	r2, r3
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80050c2:	f001 fb03 	bl	80066cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	681b      	ldr	r3, [r3, #0]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3738      	adds	r7, #56	; 0x38
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ff6c 	bl	8004fbc <xEventGroupSetBits>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800510c:	2301      	movs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	e007      	b.n	8005122 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d101      	bne.n	8005122 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800511e:	2301      	movs	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005122:	697b      	ldr	r3, [r7, #20]
}
 8005124:	4618      	mov	r0, r3
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	68f9      	ldr	r1, [r7, #12]
 8005142:	4804      	ldr	r0, [pc, #16]	; (8005154 <xEventGroupSetBitsFromISR+0x24>)
 8005144:	f002 fc88 	bl	8007a58 <xTimerPendFunctionCallFromISR>
 8005148:	6178      	str	r0, [r7, #20]

		return xReturn;
 800514a:	697b      	ldr	r3, [r7, #20]
	}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	080050d3 	.word	0x080050d3

08005158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f103 0208 	add.w	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f04f 32ff 	mov.w	r2, #4294967295
 8005170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f103 0208 	add.w	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 0208 	add.w	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d103      	bne.n	800521a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e00c      	b.n	8005234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3308      	adds	r3, #8
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e002      	b.n	8005228 <vListInsert+0x2e>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	429a      	cmp	r2, r3
 8005232:	d2f6      	bcs.n	8005222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6892      	ldr	r2, [r2, #8]
 8005282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6852      	ldr	r2, [r2, #4]
 800528c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d103      	bne.n	80052a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1e5a      	subs	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xQueueGenericReset+0x2a>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60bb      	str	r3, [r7, #8]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052ea:	f002 fd03 	bl	8007cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	3b01      	subs	r3, #1
 800531c:	68f9      	ldr	r1, [r7, #12]
 800531e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	441a      	add	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	22ff      	movs	r2, #255	; 0xff
 800532e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d114      	bne.n	800536a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01a      	beq.n	800537e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3310      	adds	r3, #16
 800534c:	4618      	mov	r0, r3
 800534e:	f001 fc0f 	bl	8006b70 <xTaskRemoveFromEventList>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d012      	beq.n	800537e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <xQueueGenericReset+0xcc>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	e009      	b.n	800537e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3310      	adds	r3, #16
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fef2 	bl	8005158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3324      	adds	r3, #36	; 0x24
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff feed 	bl	8005158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800537e:	f002 fce9 	bl	8007d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005382:	2301      	movs	r3, #1
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08e      	sub	sp, #56	; 0x38
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <xQueueGenericCreateStatic+0x52>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <xQueueGenericCreateStatic+0x56>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueGenericCreateStatic+0x58>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	623b      	str	r3, [r7, #32]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueGenericCreateStatic+0x7e>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueGenericCreateStatic+0x82>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericCreateStatic+0x84>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800542e:	2350      	movs	r3, #80	; 0x50
 8005430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b50      	cmp	r3, #80	; 0x50
 8005436:	d00a      	beq.n	800544e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	61bb      	str	r3, [r7, #24]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800544e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005462:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	4613      	mov	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f83f 	bl	80054f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005478:	4618      	mov	r0, r3
 800547a:	3730      	adds	r7, #48	; 0x30
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	613b      	str	r3, [r7, #16]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3350      	adds	r3, #80	; 0x50
 80054b8:	4618      	mov	r0, r3
 80054ba:	f002 fd3d 	bl	8007f38 <pvPortMalloc>
 80054be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d011      	beq.n	80054ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3350      	adds	r3, #80	; 0x50
 80054ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054d8:	79fa      	ldrb	r2, [r7, #7]
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	4613      	mov	r3, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f805 	bl	80054f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054ea:	69bb      	ldr	r3, [r7, #24]
	}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e002      	b.n	8005516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005522:	2101      	movs	r1, #1
 8005524:	69b8      	ldr	r0, [r7, #24]
 8005526:	f7ff fecb 	bl	80052c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800555a:	2300      	movs	r3, #0
 800555c:	2200      	movs	r2, #0
 800555e:	2100      	movs	r1, #0
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8a1 	bl	80056a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800556e:	b580      	push	{r7, lr}
 8005570:	b086      	sub	sp, #24
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005578:	2301      	movs	r3, #1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	461a      	mov	r2, r3
 8005584:	6939      	ldr	r1, [r7, #16]
 8005586:	6978      	ldr	r0, [r7, #20]
 8005588:	f7ff ff7a 	bl	8005480 <xQueueGenericCreate>
 800558c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff ffd3 	bl	800553a <prvInitialiseMutex>

		return xNewQueue;
 8005594:	68fb      	ldr	r3, [r7, #12]
	}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b088      	sub	sp, #32
 80055a2:	af02      	add	r7, sp, #8
 80055a4:	4603      	mov	r3, r0
 80055a6:	6039      	str	r1, [r7, #0]
 80055a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	6978      	ldr	r0, [r7, #20]
 80055be:	f7ff fee7 	bl	8005390 <xQueueGenericCreateStatic>
 80055c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ffb8 	bl	800553a <prvInitialiseMutex>

		return xNewQueue;
 80055ca:	68fb      	ldr	r3, [r7, #12]
	}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60fb      	str	r3, [r7, #12]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	689c      	ldr	r4, [r3, #8]
 8005600:	f001 fcd6 	bl	8006fb0 <xTaskGetCurrentTaskHandle>
 8005604:	4603      	mov	r3, r0
 8005606:	429c      	cmp	r4, r3
 8005608:	d111      	bne.n	800562e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	1e5a      	subs	r2, r3, #1
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800561c:	2300      	movs	r3, #0
 800561e:	2200      	movs	r2, #0
 8005620:	2100      	movs	r1, #0
 8005622:	6938      	ldr	r0, [r7, #16]
 8005624:	f000 f840 	bl	80056a8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005628:	2301      	movs	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e001      	b.n	8005632 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005632:	697b      	ldr	r3, [r7, #20]
	}
 8005634:	4618      	mov	r0, r3
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	bd90      	pop	{r4, r7, pc}

0800563c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	60fb      	str	r3, [r7, #12]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	689c      	ldr	r4, [r3, #8]
 800566a:	f001 fca1 	bl	8006fb0 <xTaskGetCurrentTaskHandle>
 800566e:	4603      	mov	r3, r0
 8005670:	429c      	cmp	r4, r3
 8005672:	d107      	bne.n	8005684 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800567e:	2301      	movs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e00c      	b.n	800569e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6938      	ldr	r0, [r7, #16]
 8005688:	f000 fa88 	bl	8005b9c <xQueueSemaphoreTake>
 800568c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800569e:	697b      	ldr	r3, [r7, #20]
	}
 80056a0:	4618      	mov	r0, r3
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd90      	pop	{r4, r7, pc}

080056a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	; 0x38
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056b6:	2300      	movs	r3, #0
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <xQueueGenericSend+0x32>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <xQueueGenericSend+0x40>
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <xQueueGenericSend+0x44>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <xQueueGenericSend+0x46>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <xQueueGenericSend+0x60>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d103      	bne.n	8005716 <xQueueGenericSend+0x6e>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <xQueueGenericSend+0x72>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <xQueueGenericSend+0x74>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <xQueueGenericSend+0x8e>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	623b      	str	r3, [r7, #32]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005736:	f001 fc4b 	bl	8006fd0 <xTaskGetSchedulerState>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <xQueueGenericSend+0x9e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <xQueueGenericSend+0xa2>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueGenericSend+0xa4>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xQueueGenericSend+0xbe>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	61fb      	str	r3, [r7, #28]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005766:	f002 fac5 	bl	8007cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <xQueueGenericSend+0xd4>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d129      	bne.n	80057d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005782:	f000 fbeb 	bl	8005f5c <prvCopyDataToQueue>
 8005786:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	3324      	adds	r3, #36	; 0x24
 8005794:	4618      	mov	r0, r3
 8005796:	f001 f9eb 	bl	8006b70 <xTaskRemoveFromEventList>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d013      	beq.n	80057c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057a0:	4b3f      	ldr	r3, [pc, #252]	; (80058a0 <xQueueGenericSend+0x1f8>)
 80057a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	e00a      	b.n	80057c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057b8:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <xQueueGenericSend+0x1f8>)
 80057ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057c8:	f002 fac4 	bl	8007d54 <vPortExitCritical>
				return pdPASS;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e063      	b.n	8005898 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057d6:	f002 fabd 	bl	8007d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	e05c      	b.n	8005898 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fa87 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057f2:	f002 faaf 	bl	8007d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057f6:	f000 ff5b 	bl	80066b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057fa:	f002 fa7b 	bl	8007cf4 <vPortEnterCritical>
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005804:	b25b      	sxtb	r3, r3
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d103      	bne.n	8005814 <xQueueGenericSend+0x16c>
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800581a:	b25b      	sxtb	r3, r3
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d103      	bne.n	800582a <xQueueGenericSend+0x182>
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800582a:	f002 fa93 	bl	8007d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800582e:	1d3a      	adds	r2, r7, #4
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fa76 	bl	8006d28 <xTaskCheckForTimeOut>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d124      	bne.n	800588c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005844:	f000 fc82 	bl	800614c <prvIsQueueFull>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	3310      	adds	r3, #16
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f001 f8fe 	bl	8006a58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800585c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585e:	f000 fc0d 	bl	800607c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005862:	f000 ff33 	bl	80066cc <xTaskResumeAll>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f47f af7c 	bne.w	8005766 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <xQueueGenericSend+0x1f8>)
 8005870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	e772      	b.n	8005766 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005882:	f000 fbfb 	bl	800607c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005886:	f000 ff21 	bl	80066cc <xTaskResumeAll>
 800588a:	e76c      	b.n	8005766 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800588c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800588e:	f000 fbf5 	bl	800607c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005892:	f000 ff1b 	bl	80066cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005896:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005898:	4618      	mov	r0, r3
 800589a:	3738      	adds	r7, #56	; 0x38
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b090      	sub	sp, #64	; 0x40
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <xQueueGenericSendFromISR+0x3c>
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <xQueueGenericSendFromISR+0x40>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <xQueueGenericSendFromISR+0x42>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d103      	bne.n	800590e <xQueueGenericSendFromISR+0x6a>
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <xQueueGenericSendFromISR+0x6e>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <xQueueGenericSendFromISR+0x70>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	623b      	str	r3, [r7, #32]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800592e:	f002 fac3 	bl	8007eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005932:	f3ef 8211 	mrs	r2, BASEPRI
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800594a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <xQueueGenericSendFromISR+0xbc>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d12f      	bne.n	80059c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005976:	f000 faf1 	bl	8005f5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800597a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d112      	bne.n	80059aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	d016      	beq.n	80059ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	3324      	adds	r3, #36	; 0x24
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f8ed 	bl	8006b70 <xTaskRemoveFromEventList>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e007      	b.n	80059ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ae:	3301      	adds	r3, #1
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	b25a      	sxtb	r2, r3
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059ba:	2301      	movs	r3, #1
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059be:	e001      	b.n	80059c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3740      	adds	r7, #64	; 0x40
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08c      	sub	sp, #48	; 0x30
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <xQueueReceive+0x30>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	623b      	str	r3, [r7, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <xQueueReceive+0x3e>
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <xQueueReceive+0x42>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueReceive+0x44>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueReceive+0x5e>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61fb      	str	r3, [r7, #28]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a3a:	f001 fac9 	bl	8006fd0 <xTaskGetSchedulerState>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <xQueueReceive+0x6e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <xQueueReceive+0x72>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <xQueueReceive+0x74>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueReceive+0x8e>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61bb      	str	r3, [r7, #24]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a6a:	f002 f943 	bl	8007cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01f      	beq.n	8005aba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7e:	f000 fad7 	bl	8006030 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1e5a      	subs	r2, r3, #1
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00f      	beq.n	8005ab2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	3310      	adds	r3, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f86a 	bl	8006b70 <xTaskRemoveFromEventList>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005aa2:	4b3d      	ldr	r3, [pc, #244]	; (8005b98 <xQueueReceive+0x1bc>)
 8005aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ab2:	f002 f94f 	bl	8007d54 <vPortExitCritical>
				return pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e069      	b.n	8005b8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ac0:	f002 f948 	bl	8007d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e062      	b.n	8005b8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ace:	f107 0310 	add.w	r3, r7, #16
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 f912 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005adc:	f002 f93a 	bl	8007d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ae0:	f000 fde6 	bl	80066b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae4:	f002 f906 	bl	8007cf4 <vPortEnterCritical>
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d103      	bne.n	8005afe <xQueueReceive+0x122>
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b04:	b25b      	sxtb	r3, r3
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d103      	bne.n	8005b14 <xQueueReceive+0x138>
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b14:	f002 f91e 	bl	8007d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b18:	1d3a      	adds	r2, r7, #4
 8005b1a:	f107 0310 	add.w	r3, r7, #16
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 f901 	bl	8006d28 <xTaskCheckForTimeOut>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d123      	bne.n	8005b74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2e:	f000 faf7 	bl	8006120 <prvIsQueueEmpty>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d017      	beq.n	8005b68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	3324      	adds	r3, #36	; 0x24
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 ff89 	bl	8006a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b48:	f000 fa98 	bl	800607c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b4c:	f000 fdbe 	bl	80066cc <xTaskResumeAll>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d189      	bne.n	8005a6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <xQueueReceive+0x1bc>)
 8005b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	e780      	b.n	8005a6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6a:	f000 fa87 	bl	800607c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b6e:	f000 fdad 	bl	80066cc <xTaskResumeAll>
 8005b72:	e77a      	b.n	8005a6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b76:	f000 fa81 	bl	800607c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b7a:	f000 fda7 	bl	80066cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b80:	f000 face 	bl	8006120 <prvIsQueueEmpty>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f43f af6f 	beq.w	8005a6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08e      	sub	sp, #56	; 0x38
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	623b      	str	r3, [r7, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	61fb      	str	r3, [r7, #28]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bec:	f001 f9f0 	bl	8006fd0 <xTaskGetSchedulerState>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <xQueueSemaphoreTake+0x60>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <xQueueSemaphoreTake+0x64>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <xQueueSemaphoreTake+0x66>
 8005c00:	2300      	movs	r3, #0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	61bb      	str	r3, [r7, #24]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c1c:	f002 f86a 	bl	8007cf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d024      	beq.n	8005c76 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c3c:	f001 fb56 	bl	80072ec <pvTaskIncrementMutexHeldCount>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00f      	beq.n	8005c6e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	3310      	adds	r3, #16
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 ff8c 	bl	8006b70 <xTaskRemoveFromEventList>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c5e:	4b54      	ldr	r3, [pc, #336]	; (8005db0 <xQueueSemaphoreTake+0x214>)
 8005c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c6e:	f002 f871 	bl	8007d54 <vPortExitCritical>
				return pdPASS;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e097      	b.n	8005da6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d111      	bne.n	8005ca0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	617b      	str	r3, [r7, #20]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c98:	f002 f85c 	bl	8007d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e082      	b.n	8005da6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f826 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cb4:	f002 f84e 	bl	8007d54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cb8:	f000 fcfa 	bl	80066b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cbc:	f002 f81a 	bl	8007cf4 <vPortEnterCritical>
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc6:	b25b      	sxtb	r3, r3
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d103      	bne.n	8005cd6 <xQueueSemaphoreTake+0x13a>
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d103      	bne.n	8005cec <xQueueSemaphoreTake+0x150>
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cec:	f002 f832 	bl	8007d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cf0:	463a      	mov	r2, r7
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 f815 	bl	8006d28 <xTaskCheckForTimeOut>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d132      	bne.n	8005d6a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d06:	f000 fa0b 	bl	8006120 <prvIsQueueEmpty>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d026      	beq.n	8005d5e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005d18:	f001 ffec 	bl	8007cf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f973 	bl	800700c <xTaskPriorityInherit>
 8005d26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005d28:	f002 f814 	bl	8007d54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	3324      	adds	r3, #36	; 0x24
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	4611      	mov	r1, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fe8f 	bl	8006a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3c:	f000 f99e 	bl	800607c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d40:	f000 fcc4 	bl	80066cc <xTaskResumeAll>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f47f af68 	bne.w	8005c1c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005d4c:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <xQueueSemaphoreTake+0x214>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	e75e      	b.n	8005c1c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d60:	f000 f98c 	bl	800607c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d64:	f000 fcb2 	bl	80066cc <xTaskResumeAll>
 8005d68:	e758      	b.n	8005c1c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d6c:	f000 f986 	bl	800607c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d70:	f000 fcac 	bl	80066cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d76:	f000 f9d3 	bl	8006120 <prvIsQueueEmpty>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f43f af4d 	beq.w	8005c1c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d88:	f001 ffb4 	bl	8007cf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d8e:	f000 f8cd 	bl	8005f2c <prvGetDisinheritPriorityAfterTimeout>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fa0c 	bl	80071b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005da0:	f001 ffd8 	bl	8007d54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005da4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3738      	adds	r7, #56	; 0x38
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08e      	sub	sp, #56	; 0x38
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	623b      	str	r3, [r7, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <xQueueReceiveFromISR+0x3a>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <xQueueReceiveFromISR+0x3e>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <xQueueReceiveFromISR+0x40>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	61fb      	str	r3, [r7, #28]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e0e:	f002 f853 	bl	8007eb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005e12:	f3ef 8211 	mrs	r2, BASEPRI
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	61ba      	str	r2, [r7, #24]
 8005e28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02f      	beq.n	8005e9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e48:	f000 f8f2 	bl	8006030 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	1e5a      	subs	r2, r3, #1
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d112      	bne.n	8005e84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	3310      	adds	r3, #16
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fe80 	bl	8006b70 <xTaskRemoveFromEventList>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e007      	b.n	8005e94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e88:	3301      	adds	r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	b25a      	sxtb	r2, r3
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e94:	2301      	movs	r3, #1
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
 8005e98:	e001      	b.n	8005e9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f383 8811 	msr	BASEPRI, r3
}
 8005ea8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3738      	adds	r7, #56	; 0x38
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005ed8:	f001 ff0c 	bl	8007cf4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005ee2:	f001 ff37 	bl	8007d54 <vPortExitCritical>

	return uxReturn;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	60fb      	str	r3, [r7, #12]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005f1e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d006      	beq.n	8005f4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e001      	b.n	8005f4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d14d      	bne.n	800601e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 f8a8 	bl	80070dc <xTaskPriorityDisinherit>
 8005f8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	e043      	b.n	800601e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d119      	bne.n	8005fd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6858      	ldr	r0, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	f002 f9da 	bl	8008360 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d32b      	bcc.n	800601e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	e026      	b.n	800601e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68d8      	ldr	r0, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	f002 f9c0 	bl	8008360 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	425b      	negs	r3, r3
 8005fea:	441a      	add	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d207      	bcs.n	800600c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	425b      	negs	r3, r3
 8006006:	441a      	add	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d105      	bne.n	800601e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	3b01      	subs	r3, #1
 800601c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006026:	697b      	ldr	r3, [r7, #20]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d018      	beq.n	8006074 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	441a      	add	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	429a      	cmp	r2, r3
 800605a:	d303      	bcc.n	8006064 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68d9      	ldr	r1, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	461a      	mov	r2, r3
 800606e:	6838      	ldr	r0, [r7, #0]
 8006070:	f002 f976 	bl	8008360 <memcpy>
	}
}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006084:	f001 fe36 	bl	8007cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006090:	e011      	b.n	80060b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d012      	beq.n	80060c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3324      	adds	r3, #36	; 0x24
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fd66 	bl	8006b70 <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060aa:	f000 fe9f 	bl	8006dec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dce9      	bgt.n	8006092 <prvUnlockQueue+0x16>
 80060be:	e000      	b.n	80060c2 <prvUnlockQueue+0x46>
					break;
 80060c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060ca:	f001 fe43 	bl	8007d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060ce:	f001 fe11 	bl	8007cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060da:	e011      	b.n	8006100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d012      	beq.n	800610a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3310      	adds	r3, #16
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fd41 	bl	8006b70 <xTaskRemoveFromEventList>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060f4:	f000 fe7a 	bl	8006dec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006104:	2b00      	cmp	r3, #0
 8006106:	dce9      	bgt.n	80060dc <prvUnlockQueue+0x60>
 8006108:	e000      	b.n	800610c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800610a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006114:	f001 fe1e 	bl	8007d54 <vPortExitCritical>
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006128:	f001 fde4 	bl	8007cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d102      	bne.n	800613a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e001      	b.n	800613e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800613e:	f001 fe09 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 8006142:	68fb      	ldr	r3, [r7, #12]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006154:	f001 fdce 	bl	8007cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	429a      	cmp	r2, r3
 8006162:	d102      	bne.n	800616a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006164:	2301      	movs	r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e001      	b.n	800616e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800616e:	f001 fdf1 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e014      	b.n	80061b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800618c:	4a0f      	ldr	r2, [pc, #60]	; (80061cc <vQueueAddToRegistry+0x50>)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006198:	490c      	ldr	r1, [pc, #48]	; (80061cc <vQueueAddToRegistry+0x50>)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061a2:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <vQueueAddToRegistry+0x50>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4413      	add	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061ae:	e006      	b.n	80061be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b07      	cmp	r3, #7
 80061ba:	d9e7      	bls.n	800618c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20004bd4 	.word	0x20004bd4

080061d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061e0:	f001 fd88 	bl	8007cf4 <vPortEnterCritical>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d103      	bne.n	80061fa <vQueueWaitForMessageRestricted+0x2a>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006200:	b25b      	sxtb	r3, r3
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006206:	d103      	bne.n	8006210 <vQueueWaitForMessageRestricted+0x40>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006210:	f001 fda0 	bl	8007d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fc77 	bl	8006b18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800622a:	6978      	ldr	r0, [r7, #20]
 800622c:	f7ff ff26 	bl	800607c <prvUnlockQueue>
	}
 8006230:	bf00      	nop
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08e      	sub	sp, #56	; 0x38
 800623c:	af04      	add	r7, sp, #16
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xTaskCreateStatic+0x46>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61fb      	str	r3, [r7, #28]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800627e:	235c      	movs	r3, #92	; 0x5c
 8006280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b5c      	cmp	r3, #92	; 0x5c
 8006286:	d00a      	beq.n	800629e <xTaskCreateStatic+0x66>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	61bb      	str	r3, [r7, #24]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800629e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01e      	beq.n	80062e4 <xTaskCreateStatic+0xac>
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01b      	beq.n	80062e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	2202      	movs	r2, #2
 80062ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062be:	2300      	movs	r3, #0
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	f107 0314 	add.w	r3, r7, #20
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f850 	bl	800637c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062de:	f000 f8dd 	bl	800649c <prvAddNewTaskToReadyList>
 80062e2:	e001      	b.n	80062e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062e8:	697b      	ldr	r3, [r7, #20]
	}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3728      	adds	r7, #40	; 0x28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b08c      	sub	sp, #48	; 0x30
 80062f6:	af04      	add	r7, sp, #16
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fe16 	bl	8007f38 <pvPortMalloc>
 800630c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00e      	beq.n	8006332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006314:	205c      	movs	r0, #92	; 0x5c
 8006316:	f001 fe0f 	bl	8007f38 <pvPortMalloc>
 800631a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
 8006328:	e005      	b.n	8006336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f001 fed0 	bl	80080d0 <vPortFree>
 8006330:	e001      	b.n	8006336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d017      	beq.n	800636c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006344:	88fa      	ldrh	r2, [r7, #6]
 8006346:	2300      	movs	r3, #0
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	9302      	str	r3, [sp, #8]
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f80e 	bl	800637c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006360:	69f8      	ldr	r0, [r7, #28]
 8006362:	f000 f89b 	bl	800649c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006366:	2301      	movs	r3, #1
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e002      	b.n	8006372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800636c:	f04f 33ff 	mov.w	r3, #4294967295
 8006370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006372:	69bb      	ldr	r3, [r7, #24]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	461a      	mov	r2, r3
 8006394:	21a5      	movs	r1, #165	; 0xa5
 8006396:	f001 fff1 	bl	800837c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063a4:	3b01      	subs	r3, #1
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	617b      	str	r3, [r7, #20]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01f      	beq.n	800641a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	e012      	b.n	8006406 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	7819      	ldrb	r1, [r3, #0]
 80063e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	3334      	adds	r3, #52	; 0x34
 80063f0:	460a      	mov	r2, r1
 80063f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	3301      	adds	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2b0f      	cmp	r3, #15
 800640a:	d9e9      	bls.n	80063e0 <prvInitialiseNewTask+0x64>
 800640c:	e000      	b.n	8006410 <prvInitialiseNewTask+0x94>
			{
				break;
 800640e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006418:	e003      	b.n	8006422 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	2b37      	cmp	r3, #55	; 0x37
 8006426:	d901      	bls.n	800642c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006428:	2337      	movs	r3, #55	; 0x37
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006436:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	2200      	movs	r2, #0
 800643c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	3304      	adds	r3, #4
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fea8 	bl	8005198 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	3318      	adds	r3, #24
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fea3 	bl	8005198 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2200      	movs	r2, #0
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	68f9      	ldr	r1, [r7, #12]
 800647a:	69b8      	ldr	r0, [r7, #24]
 800647c:	f001 fb0c 	bl	8007a98 <pxPortInitialiseStack>
 8006480:	4602      	mov	r2, r0
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006492:	bf00      	nop
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064a4:	f001 fc26 	bl	8007cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064a8:	4b2d      	ldr	r3, [pc, #180]	; (8006560 <prvAddNewTaskToReadyList+0xc4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <prvAddNewTaskToReadyList+0xc4>)
 80064b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064b2:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ba:	4a2a      	ldr	r2, [pc, #168]	; (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c0:	4b27      	ldr	r3, [pc, #156]	; (8006560 <prvAddNewTaskToReadyList+0xc4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d110      	bne.n	80064ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064c8:	f000 fcb4 	bl	8006e34 <prvInitialiseTaskLists>
 80064cc:	e00d      	b.n	80064ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064ce:	4b26      	ldr	r3, [pc, #152]	; (8006568 <prvAddNewTaskToReadyList+0xcc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064d6:	4b23      	ldr	r3, [pc, #140]	; (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d802      	bhi.n	80064ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064e4:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ea:	4b20      	ldr	r3, [pc, #128]	; (800656c <prvAddNewTaskToReadyList+0xd0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3301      	adds	r3, #1
 80064f0:	4a1e      	ldr	r2, [pc, #120]	; (800656c <prvAddNewTaskToReadyList+0xd0>)
 80064f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064f4:	4b1d      	ldr	r3, [pc, #116]	; (800656c <prvAddNewTaskToReadyList+0xd0>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <prvAddNewTaskToReadyList+0xd4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d903      	bls.n	8006510 <prvAddNewTaskToReadyList+0x74>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	4a18      	ldr	r2, [pc, #96]	; (8006570 <prvAddNewTaskToReadyList+0xd4>)
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4a15      	ldr	r2, [pc, #84]	; (8006574 <prvAddNewTaskToReadyList+0xd8>)
 800651e:	441a      	add	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fe fe43 	bl	80051b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800652c:	f001 fc12 	bl	8007d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006530:	4b0d      	ldr	r3, [pc, #52]	; (8006568 <prvAddNewTaskToReadyList+0xcc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00e      	beq.n	8006556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <prvAddNewTaskToReadyList+0xc8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	429a      	cmp	r2, r3
 8006544:	d207      	bcs.n	8006556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006546:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <prvAddNewTaskToReadyList+0xdc>)
 8006548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000d9c 	.word	0x20000d9c
 8006564:	200008c8 	.word	0x200008c8
 8006568:	20000da8 	.word	0x20000da8
 800656c:	20000db8 	.word	0x20000db8
 8006570:	20000da4 	.word	0x20000da4
 8006574:	200008cc 	.word	0x200008cc
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d017      	beq.n	80065be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <vTaskDelay+0x60>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <vTaskDelay+0x30>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60bb      	str	r3, [r7, #8]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065ac:	f000 f880 	bl	80066b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065b0:	2100      	movs	r1, #0
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 feae 	bl	8007314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065b8:	f000 f888 	bl	80066cc <xTaskResumeAll>
 80065bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <vTaskDelay+0x64>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000dc4 	.word	0x20000dc4
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065f2:	463a      	mov	r2, r7
 80065f4:	1d39      	adds	r1, r7, #4
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fb8a 	bl	8004d14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	2300      	movs	r3, #0
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	460a      	mov	r2, r1
 8006612:	4921      	ldr	r1, [pc, #132]	; (8006698 <vTaskStartScheduler+0xb4>)
 8006614:	4821      	ldr	r0, [pc, #132]	; (800669c <vTaskStartScheduler+0xb8>)
 8006616:	f7ff fe0f 	bl	8006238 <xTaskCreateStatic>
 800661a:	4603      	mov	r3, r0
 800661c:	4a20      	ldr	r2, [pc, #128]	; (80066a0 <vTaskStartScheduler+0xbc>)
 800661e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006620:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <vTaskStartScheduler+0xbc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006628:	2301      	movs	r3, #1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e001      	b.n	8006632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006638:	f000 fec0 	bl	80073bc <xTimerCreateTimerTask>
 800663c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d116      	bne.n	8006672 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vTaskStartScheduler+0xc0>)
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <vTaskStartScheduler+0xc4>)
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006666:	4b11      	ldr	r3, [pc, #68]	; (80066ac <vTaskStartScheduler+0xc8>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800666c:	f001 faa0 	bl	8007bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006670:	e00e      	b.n	8006690 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d10a      	bne.n	8006690 <vTaskStartScheduler+0xac>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	60fb      	str	r3, [r7, #12]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <vTaskStartScheduler+0xaa>
}
 8006690:	bf00      	nop
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	0800b77c 	.word	0x0800b77c
 800669c:	08006e05 	.word	0x08006e05
 80066a0:	20000dc0 	.word	0x20000dc0
 80066a4:	20000dbc 	.word	0x20000dbc
 80066a8:	20000da8 	.word	0x20000da8
 80066ac:	20000da0 	.word	0x20000da0

080066b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066b4:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <vTaskSuspendAll+0x18>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a03      	ldr	r2, [pc, #12]	; (80066c8 <vTaskSuspendAll+0x18>)
 80066bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066be:	bf00      	nop
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000dc4 	.word	0x20000dc4

080066cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066da:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <xTaskResumeAll+0x118>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	603b      	str	r3, [r7, #0]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066f8:	f001 fafc 	bl	8007cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066fc:	4b39      	ldr	r3, [pc, #228]	; (80067e4 <xTaskResumeAll+0x118>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	4a38      	ldr	r2, [pc, #224]	; (80067e4 <xTaskResumeAll+0x118>)
 8006704:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006706:	4b37      	ldr	r3, [pc, #220]	; (80067e4 <xTaskResumeAll+0x118>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d162      	bne.n	80067d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800670e:	4b36      	ldr	r3, [pc, #216]	; (80067e8 <xTaskResumeAll+0x11c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d05e      	beq.n	80067d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006716:	e02f      	b.n	8006778 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006718:	4b34      	ldr	r3, [pc, #208]	; (80067ec <xTaskResumeAll+0x120>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3318      	adds	r3, #24
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fda1 	bl	800526c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fd9c 	bl	800526c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	4b2d      	ldr	r3, [pc, #180]	; (80067f0 <xTaskResumeAll+0x124>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d903      	bls.n	8006748 <xTaskResumeAll+0x7c>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <xTaskResumeAll+0x124>)
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <xTaskResumeAll+0x128>)
 8006756:	441a      	add	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f7fe fd27 	bl	80051b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4b23      	ldr	r3, [pc, #140]	; (80067f8 <xTaskResumeAll+0x12c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	429a      	cmp	r2, r3
 8006770:	d302      	bcc.n	8006778 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006772:	4b22      	ldr	r3, [pc, #136]	; (80067fc <xTaskResumeAll+0x130>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <xTaskResumeAll+0x120>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1cb      	bne.n	8006718 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006786:	f000 fbf3 	bl	8006f70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <xTaskResumeAll+0x134>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d010      	beq.n	80067b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006796:	f000 f847 	bl	8006828 <xTaskIncrementTick>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <xTaskResumeAll+0x130>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f1      	bne.n	8006796 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067b2:	4b13      	ldr	r3, [pc, #76]	; (8006800 <xTaskResumeAll+0x134>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067b8:	4b10      	ldr	r3, [pc, #64]	; (80067fc <xTaskResumeAll+0x130>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <xTaskResumeAll+0x138>)
 80067c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067d4:	f001 fabe 	bl	8007d54 <vPortExitCritical>

	return xAlreadyYielded;
 80067d8:	68bb      	ldr	r3, [r7, #8]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000dc4 	.word	0x20000dc4
 80067e8:	20000d9c 	.word	0x20000d9c
 80067ec:	20000d5c 	.word	0x20000d5c
 80067f0:	20000da4 	.word	0x20000da4
 80067f4:	200008cc 	.word	0x200008cc
 80067f8:	200008c8 	.word	0x200008c8
 80067fc:	20000db0 	.word	0x20000db0
 8006800:	20000dac 	.word	0x20000dac
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <xTaskGetTickCount+0x1c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006814:	687b      	ldr	r3, [r7, #4]
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000da0 	.word	0x20000da0

08006828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006832:	4b4f      	ldr	r3, [pc, #316]	; (8006970 <xTaskIncrementTick+0x148>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 808f 	bne.w	800695a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800683c:	4b4d      	ldr	r3, [pc, #308]	; (8006974 <xTaskIncrementTick+0x14c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006844:	4a4b      	ldr	r2, [pc, #300]	; (8006974 <xTaskIncrementTick+0x14c>)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d120      	bne.n	8006892 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006850:	4b49      	ldr	r3, [pc, #292]	; (8006978 <xTaskIncrementTick+0x150>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <xTaskIncrementTick+0x48>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	603b      	str	r3, [r7, #0]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <xTaskIncrementTick+0x46>
 8006870:	4b41      	ldr	r3, [pc, #260]	; (8006978 <xTaskIncrementTick+0x150>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	4b41      	ldr	r3, [pc, #260]	; (800697c <xTaskIncrementTick+0x154>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3f      	ldr	r2, [pc, #252]	; (8006978 <xTaskIncrementTick+0x150>)
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	4a3f      	ldr	r2, [pc, #252]	; (800697c <xTaskIncrementTick+0x154>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <xTaskIncrementTick+0x158>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	4a3d      	ldr	r2, [pc, #244]	; (8006980 <xTaskIncrementTick+0x158>)
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	f000 fb6f 	bl	8006f70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006892:	4b3c      	ldr	r3, [pc, #240]	; (8006984 <xTaskIncrementTick+0x15c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	429a      	cmp	r2, r3
 800689a:	d349      	bcc.n	8006930 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <xTaskIncrementTick+0x150>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a6:	4b37      	ldr	r3, [pc, #220]	; (8006984 <xTaskIncrementTick+0x15c>)
 80068a8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ac:	601a      	str	r2, [r3, #0]
					break;
 80068ae:	e03f      	b.n	8006930 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b0:	4b31      	ldr	r3, [pc, #196]	; (8006978 <xTaskIncrementTick+0x150>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d203      	bcs.n	80068d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068c8:	4a2e      	ldr	r2, [pc, #184]	; (8006984 <xTaskIncrementTick+0x15c>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068ce:	e02f      	b.n	8006930 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe fcc9 	bl	800526c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	3318      	adds	r3, #24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fcc0 	bl	800526c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	4b25      	ldr	r3, [pc, #148]	; (8006988 <xTaskIncrementTick+0x160>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d903      	bls.n	8006900 <xTaskIncrementTick+0xd8>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <xTaskIncrementTick+0x160>)
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4a1f      	ldr	r2, [pc, #124]	; (800698c <xTaskIncrementTick+0x164>)
 800690e:	441a      	add	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3304      	adds	r3, #4
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f7fe fc4b 	bl	80051b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <xTaskIncrementTick+0x168>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	429a      	cmp	r2, r3
 8006928:	d3b8      	bcc.n	800689c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800692e:	e7b5      	b.n	800689c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <xTaskIncrementTick+0x168>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006936:	4915      	ldr	r1, [pc, #84]	; (800698c <xTaskIncrementTick+0x164>)
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d901      	bls.n	800694c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <xTaskIncrementTick+0x16c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e004      	b.n	8006964 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <xTaskIncrementTick+0x170>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	4a0d      	ldr	r2, [pc, #52]	; (8006998 <xTaskIncrementTick+0x170>)
 8006962:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006964:	697b      	ldr	r3, [r7, #20]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000dc4 	.word	0x20000dc4
 8006974:	20000da0 	.word	0x20000da0
 8006978:	20000d54 	.word	0x20000d54
 800697c:	20000d58 	.word	0x20000d58
 8006980:	20000db4 	.word	0x20000db4
 8006984:	20000dbc 	.word	0x20000dbc
 8006988:	20000da4 	.word	0x20000da4
 800698c:	200008cc 	.word	0x200008cc
 8006990:	200008c8 	.word	0x200008c8
 8006994:	20000db0 	.word	0x20000db0
 8006998:	20000dac 	.word	0x20000dac

0800699c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069a2:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <vTaskSwitchContext+0xa8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069aa:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <vTaskSwitchContext+0xac>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069b0:	e041      	b.n	8006a36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80069b2:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <vTaskSwitchContext+0xac>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b8:	4b24      	ldr	r3, [pc, #144]	; (8006a4c <vTaskSwitchContext+0xb0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e010      	b.n	80069e2 <vTaskSwitchContext+0x46>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <vTaskSwitchContext+0x40>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	607b      	str	r3, [r7, #4]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vTaskSwitchContext+0x3e>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3b01      	subs	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	491b      	ldr	r1, [pc, #108]	; (8006a50 <vTaskSwitchContext+0xb4>)
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0e4      	beq.n	80069c0 <vTaskSwitchContext+0x24>
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <vTaskSwitchContext+0xb4>)
 8006a02:	4413      	add	r3, r2
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	605a      	str	r2, [r3, #4]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	3308      	adds	r3, #8
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d104      	bne.n	8006a26 <vTaskSwitchContext+0x8a>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <vTaskSwitchContext+0xb8>)
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	4a06      	ldr	r2, [pc, #24]	; (8006a4c <vTaskSwitchContext+0xb0>)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6013      	str	r3, [r2, #0]
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000dc4 	.word	0x20000dc4
 8006a48:	20000db0 	.word	0x20000db0
 8006a4c:	20000da4 	.word	0x20000da4
 8006a50:	200008cc 	.word	0x200008cc
 8006a54:	200008c8 	.word	0x200008c8

08006a58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	60fb      	str	r3, [r7, #12]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a7e:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <vTaskPlaceOnEventList+0x44>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3318      	adds	r3, #24
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fe fbb7 	bl	80051fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	6838      	ldr	r0, [r7, #0]
 8006a90:	f000 fc40 	bl	8007314 <prvAddCurrentTaskToDelayedList>
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200008c8 	.word	0x200008c8

08006aa0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	617b      	str	r3, [r7, #20]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	613b      	str	r3, [r7, #16]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006af0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3318      	adds	r3, #24
 8006af8:	4619      	mov	r1, r3
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7fe fb59 	bl	80051b2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b00:	2101      	movs	r1, #1
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fc06 	bl	8007314 <prvAddCurrentTaskToDelayedList>
}
 8006b08:	bf00      	nop
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20000dc4 	.word	0x20000dc4
 8006b14:	200008c8 	.word	0x200008c8

08006b18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	617b      	str	r3, [r7, #20]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b40:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <vTaskPlaceOnEventListRestricted+0x54>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3318      	adds	r3, #24
 8006b46:	4619      	mov	r1, r3
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7fe fb32 	bl	80051b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b54:	f04f 33ff 	mov.w	r3, #4294967295
 8006b58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	68b8      	ldr	r0, [r7, #8]
 8006b5e:	f000 fbd9 	bl	8007314 <prvAddCurrentTaskToDelayedList>
	}
 8006b62:	bf00      	nop
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200008c8 	.word	0x200008c8

08006b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60fb      	str	r3, [r7, #12]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	3318      	adds	r3, #24
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fe fb63 	bl	800526c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <xTaskRemoveFromEventList+0xb0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11d      	bne.n	8006bea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe fb5a 	bl	800526c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <xTaskRemoveFromEventList+0xb4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d903      	bls.n	8006bcc <xTaskRemoveFromEventList+0x5c>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <xTaskRemoveFromEventList+0xb4>)
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <xTaskRemoveFromEventList+0xb8>)
 8006bda:	441a      	add	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4619      	mov	r1, r3
 8006be2:	4610      	mov	r0, r2
 8006be4:	f7fe fae5 	bl	80051b2 <vListInsertEnd>
 8006be8:	e005      	b.n	8006bf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	3318      	adds	r3, #24
 8006bee:	4619      	mov	r1, r3
 8006bf0:	480e      	ldr	r0, [pc, #56]	; (8006c2c <xTaskRemoveFromEventList+0xbc>)
 8006bf2:	f7fe fade 	bl	80051b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <xTaskRemoveFromEventList+0xc0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d905      	bls.n	8006c10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c04:	2301      	movs	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <xTaskRemoveFromEventList+0xc4>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	e001      	b.n	8006c14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c14:	697b      	ldr	r3, [r7, #20]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000dc4 	.word	0x20000dc4
 8006c24:	20000da4 	.word	0x20000da4
 8006c28:	200008cc 	.word	0x200008cc
 8006c2c:	20000d5c 	.word	0x20000d5c
 8006c30:	200008c8 	.word	0x200008c8
 8006c34:	20000db0 	.word	0x20000db0

08006c38 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006c42:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	613b      	str	r3, [r7, #16]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	60fb      	str	r3, [r7, #12]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fe faed 	bl	800526c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fae8 	bl	800526c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	4b12      	ldr	r3, [pc, #72]	; (8006cec <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d903      	bls.n	8006cb0 <vTaskRemoveFromUnorderedEventList+0x78>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	4a0f      	ldr	r2, [pc, #60]	; (8006cec <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4a0c      	ldr	r2, [pc, #48]	; (8006cf0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006cbe:	441a      	add	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f7fe fa73 	bl	80051b2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d902      	bls.n	8006ce0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000dc4 	.word	0x20000dc4
 8006cec:	20000da4 	.word	0x20000da4
 8006cf0:	200008cc 	.word	0x200008cc
 8006cf4:	200008c8 	.word	0x200008c8
 8006cf8:	20000db0 	.word	0x20000db0

08006cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d04:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <vTaskInternalSetTimeOutState+0x24>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <vTaskInternalSetTimeOutState+0x28>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	605a      	str	r2, [r3, #4]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20000db4 	.word	0x20000db4
 8006d24:	20000da0 	.word	0x20000da0

08006d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	613b      	str	r3, [r7, #16]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	60fb      	str	r3, [r7, #12]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d6a:	f000 ffc3 	bl	8007cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d6e:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <xTaskCheckForTimeOut+0xbc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d102      	bne.n	8006d8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	e023      	b.n	8006dd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <xTaskCheckForTimeOut+0xc0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d007      	beq.n	8006daa <xTaskCheckForTimeOut+0x82>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d302      	bcc.n	8006daa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e015      	b.n	8006dd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d20b      	bcs.n	8006dcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ff9b 	bl	8006cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	e004      	b.n	8006dd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dd6:	f000 ffbd 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 8006dda:	69fb      	ldr	r3, [r7, #28]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000da0 	.word	0x20000da0
 8006de8:	20000db4 	.word	0x20000db4

08006dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006df0:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <vTaskMissedYield+0x14>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000db0 	.word	0x20000db0

08006e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e0c:	f000 f852 	bl	8006eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <prvIdleTask+0x28>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d9f9      	bls.n	8006e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <prvIdleTask+0x2c>)
 8006e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e28:	e7f0      	b.n	8006e0c <prvIdleTask+0x8>
 8006e2a:	bf00      	nop
 8006e2c:	200008cc 	.word	0x200008cc
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	e00c      	b.n	8006e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a12      	ldr	r2, [pc, #72]	; (8006e94 <prvInitialiseTaskLists+0x60>)
 8006e4c:	4413      	add	r3, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe f982 	bl	8005158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3301      	adds	r3, #1
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b37      	cmp	r3, #55	; 0x37
 8006e5e:	d9ef      	bls.n	8006e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e60:	480d      	ldr	r0, [pc, #52]	; (8006e98 <prvInitialiseTaskLists+0x64>)
 8006e62:	f7fe f979 	bl	8005158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e66:	480d      	ldr	r0, [pc, #52]	; (8006e9c <prvInitialiseTaskLists+0x68>)
 8006e68:	f7fe f976 	bl	8005158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e6c:	480c      	ldr	r0, [pc, #48]	; (8006ea0 <prvInitialiseTaskLists+0x6c>)
 8006e6e:	f7fe f973 	bl	8005158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e72:	480c      	ldr	r0, [pc, #48]	; (8006ea4 <prvInitialiseTaskLists+0x70>)
 8006e74:	f7fe f970 	bl	8005158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e78:	480b      	ldr	r0, [pc, #44]	; (8006ea8 <prvInitialiseTaskLists+0x74>)
 8006e7a:	f7fe f96d 	bl	8005158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <prvInitialiseTaskLists+0x78>)
 8006e80:	4a05      	ldr	r2, [pc, #20]	; (8006e98 <prvInitialiseTaskLists+0x64>)
 8006e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <prvInitialiseTaskLists+0x7c>)
 8006e86:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <prvInitialiseTaskLists+0x68>)
 8006e88:	601a      	str	r2, [r3, #0]
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200008cc 	.word	0x200008cc
 8006e98:	20000d2c 	.word	0x20000d2c
 8006e9c:	20000d40 	.word	0x20000d40
 8006ea0:	20000d5c 	.word	0x20000d5c
 8006ea4:	20000d70 	.word	0x20000d70
 8006ea8:	20000d88 	.word	0x20000d88
 8006eac:	20000d54 	.word	0x20000d54
 8006eb0:	20000d58 	.word	0x20000d58

08006eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eba:	e019      	b.n	8006ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ebc:	f000 ff1a 	bl	8007cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec0:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <prvCheckTasksWaitingTermination+0x50>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe f9cd 	bl	800526c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <prvCheckTasksWaitingTermination+0x54>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	4a0b      	ldr	r2, [pc, #44]	; (8006f08 <prvCheckTasksWaitingTermination+0x54>)
 8006eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <prvCheckTasksWaitingTermination+0x58>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <prvCheckTasksWaitingTermination+0x58>)
 8006ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ee6:	f000 ff35 	bl	8007d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f810 	bl	8006f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvCheckTasksWaitingTermination+0x58>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e1      	bne.n	8006ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000d70 	.word	0x20000d70
 8006f08:	20000d9c 	.word	0x20000d9c
 8006f0c:	20000d84 	.word	0x20000d84

08006f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d108      	bne.n	8006f34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 f8d2 	bl	80080d0 <vPortFree>
				vPortFree( pxTCB );
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 f8cf 	bl	80080d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f32:	e018      	b.n	8006f66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d103      	bne.n	8006f46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 f8c6 	bl	80080d0 <vPortFree>
	}
 8006f44:	e00f      	b.n	8006f66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d00a      	beq.n	8006f66 <prvDeleteTCB+0x56>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <prvDeleteTCB+0x54>
	}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvResetNextTaskUnblockTime+0x38>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <prvResetNextTaskUnblockTime+0x3c>)
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f88:	e008      	b.n	8006f9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <prvResetNextTaskUnblockTime+0x38>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <prvResetNextTaskUnblockTime+0x3c>)
 8006f9a:	6013      	str	r3, [r2, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000d54 	.word	0x20000d54
 8006fac:	20000dbc 	.word	0x20000dbc

08006fb0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <xTaskGetCurrentTaskHandle+0x1c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006fbc:	687b      	ldr	r3, [r7, #4]
	}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	200008c8 	.word	0x200008c8

08006fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <xTaskGetSchedulerState+0x34>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d102      	bne.n	8006fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	e008      	b.n	8006ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe4:	4b08      	ldr	r3, [pc, #32]	; (8007008 <xTaskGetSchedulerState+0x38>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fec:	2302      	movs	r3, #2
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	e001      	b.n	8006ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ff6:	687b      	ldr	r3, [r7, #4]
	}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	20000da8 	.word	0x20000da8
 8007008:	20000dc4 	.word	0x20000dc4

0800700c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d051      	beq.n	80070c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007026:	4b2a      	ldr	r3, [pc, #168]	; (80070d0 <xTaskPriorityInherit+0xc4>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	429a      	cmp	r2, r3
 800702e:	d241      	bcs.n	80070b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	db06      	blt.n	8007046 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <xTaskPriorityInherit+0xc4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6959      	ldr	r1, [r3, #20]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <xTaskPriorityInherit+0xc8>)
 8007058:	4413      	add	r3, r2
 800705a:	4299      	cmp	r1, r3
 800705c:	d122      	bne.n	80070a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	3304      	adds	r3, #4
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe f902 	bl	800526c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007068:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <xTaskPriorityInherit+0xc4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <xTaskPriorityInherit+0xcc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <xTaskPriorityInherit+0x7a>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <xTaskPriorityInherit+0xcc>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <xTaskPriorityInherit+0xc8>)
 8007094:	441a      	add	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7fe f888 	bl	80051b2 <vListInsertEnd>
 80070a2:	e004      	b.n	80070ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <xTaskPriorityInherit+0xc4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e008      	b.n	80070c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <xTaskPriorityInherit+0xc4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d201      	bcs.n	80070c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070c6:	68fb      	ldr	r3, [r7, #12]
	}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	200008c8 	.word	0x200008c8
 80070d4:	200008cc 	.word	0x200008cc
 80070d8:	20000da4 	.word	0x20000da4

080070dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d056      	beq.n	80071a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070f2:	4b2e      	ldr	r3, [pc, #184]	; (80071ac <xTaskPriorityDisinherit+0xd0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d00a      	beq.n	8007112 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	60bb      	str	r3, [r7, #8]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	1e5a      	subs	r2, r3, #1
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007142:	429a      	cmp	r2, r3
 8007144:	d02c      	beq.n	80071a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714a:	2b00      	cmp	r3, #0
 800714c:	d128      	bne.n	80071a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	3304      	adds	r3, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe f88a 	bl	800526c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <xTaskPriorityDisinherit+0xd4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d903      	bls.n	8007180 <xTaskPriorityDisinherit+0xa4>
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	4a0c      	ldr	r2, [pc, #48]	; (80071b0 <xTaskPriorityDisinherit+0xd4>)
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <xTaskPriorityDisinherit+0xd8>)
 800718e:	441a      	add	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	3304      	adds	r3, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f7fe f80b 	bl	80051b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071a0:	697b      	ldr	r3, [r7, #20]
	}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200008c8 	.word	0x200008c8
 80071b0:	20000da4 	.word	0x20000da4
 80071b4:	200008cc 	.word	0x200008cc

080071b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071c6:	2301      	movs	r3, #1
 80071c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d06a      	beq.n	80072a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d902      	bls.n	80071fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	e002      	b.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007202:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	429a      	cmp	r2, r3
 800720c:	d04b      	beq.n	80072a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	429a      	cmp	r2, r3
 8007216:	d146      	bne.n	80072a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	429a      	cmp	r2, r3
 8007220:	d10a      	bne.n	8007238 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	60bb      	str	r3, [r7, #8]
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	db04      	blt.n	8007256 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	6959      	ldr	r1, [r3, #20]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007266:	4413      	add	r3, r2
 8007268:	4299      	cmp	r1, r3
 800726a:	d11c      	bne.n	80072a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7fd fffb 	bl	800526c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727a:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d903      	bls.n	800728a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	4a0c      	ldr	r2, [pc, #48]	; (80072b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a07      	ldr	r2, [pc, #28]	; (80072b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007298:	441a      	add	r2, r3
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fd ff86 	bl	80051b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072a6:	bf00      	nop
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	200008c8 	.word	0x200008c8
 80072b4:	200008cc 	.word	0x200008cc
 80072b8:	20000da4 	.word	0x20000da4

080072bc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <uxTaskResetEventItemValue+0x2c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <uxTaskResetEventItemValue+0x2c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <uxTaskResetEventItemValue+0x2c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80072d8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80072da:	687b      	ldr	r3, [r7, #4]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	200008c8 	.word	0x200008c8

080072ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <pvTaskIncrementMutexHeldCount+0x24>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <pvTaskIncrementMutexHeldCount+0x24>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072fe:	3201      	adds	r2, #1
 8007300:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007302:	4b03      	ldr	r3, [pc, #12]	; (8007310 <pvTaskIncrementMutexHeldCount+0x24>)
 8007304:	681b      	ldr	r3, [r3, #0]
	}
 8007306:	4618      	mov	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	200008c8 	.word	0x200008c8

08007314 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800731e:	4b21      	ldr	r3, [pc, #132]	; (80073a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007324:	4b20      	ldr	r3, [pc, #128]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3304      	adds	r3, #4
 800732a:	4618      	mov	r0, r3
 800732c:	f7fd ff9e 	bl	800526c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d10a      	bne.n	800734e <prvAddCurrentTaskToDelayedList+0x3a>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800733e:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3304      	adds	r3, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4819      	ldr	r0, [pc, #100]	; (80073ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007348:	f7fd ff33 	bl	80051b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800734c:	e026      	b.n	800739c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4413      	add	r3, r2
 8007354:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	429a      	cmp	r2, r3
 8007364:	d209      	bcs.n	800737a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007366:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7fd ff41 	bl	80051fa <vListInsert>
}
 8007378:	e010      	b.n	800739c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737a:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3304      	adds	r3, #4
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7fd ff37 	bl	80051fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	d202      	bcs.n	800739c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007396:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000da0 	.word	0x20000da0
 80073a8:	200008c8 	.word	0x200008c8
 80073ac:	20000d88 	.word	0x20000d88
 80073b0:	20000d58 	.word	0x20000d58
 80073b4:	20000d54 	.word	0x20000d54
 80073b8:	20000dbc 	.word	0x20000dbc

080073bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073c6:	f000 fb07 	bl	80079d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073ca:	4b1c      	ldr	r3, [pc, #112]	; (800743c <xTimerCreateTimerTask+0x80>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d021      	beq.n	8007416 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073da:	1d3a      	adds	r2, r7, #4
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	f107 030c 	add.w	r3, r7, #12
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fd fcaf 	bl	8004d48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	9202      	str	r2, [sp, #8]
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	2302      	movs	r3, #2
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	460a      	mov	r2, r1
 80073fc:	4910      	ldr	r1, [pc, #64]	; (8007440 <xTimerCreateTimerTask+0x84>)
 80073fe:	4811      	ldr	r0, [pc, #68]	; (8007444 <xTimerCreateTimerTask+0x88>)
 8007400:	f7fe ff1a 	bl	8006238 <xTaskCreateStatic>
 8007404:	4603      	mov	r3, r0
 8007406:	4a10      	ldr	r2, [pc, #64]	; (8007448 <xTimerCreateTimerTask+0x8c>)
 8007408:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <xTimerCreateTimerTask+0x8c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007412:	2301      	movs	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	613b      	str	r3, [r7, #16]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007432:	697b      	ldr	r3, [r7, #20]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000df8 	.word	0x20000df8
 8007440:	0800b784 	.word	0x0800b784
 8007444:	08007581 	.word	0x08007581
 8007448:	20000dfc 	.word	0x20000dfc

0800744c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	623b      	str	r3, [r7, #32]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800747a:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <xTimerGenericCommand+0x98>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d02a      	beq.n	80074d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b05      	cmp	r3, #5
 8007492:	dc18      	bgt.n	80074c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007494:	f7ff fd9c 	bl	8006fd0 <xTaskGetSchedulerState>
 8007498:	4603      	mov	r3, r0
 800749a:	2b02      	cmp	r3, #2
 800749c:	d109      	bne.n	80074b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800749e:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <xTimerGenericCommand+0x98>)
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	f107 0110 	add.w	r1, r7, #16
 80074a6:	2300      	movs	r3, #0
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	f7fe f8fd 	bl	80056a8 <xQueueGenericSend>
 80074ae:	6278      	str	r0, [r7, #36]	; 0x24
 80074b0:	e012      	b.n	80074d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <xTimerGenericCommand+0x98>)
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f107 0110 	add.w	r1, r7, #16
 80074ba:	2300      	movs	r3, #0
 80074bc:	2200      	movs	r2, #0
 80074be:	f7fe f8f3 	bl	80056a8 <xQueueGenericSend>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
 80074c4:	e008      	b.n	80074d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <xTimerGenericCommand+0x98>)
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f107 0110 	add.w	r1, r7, #16
 80074ce:	2300      	movs	r3, #0
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	f7fe f9e7 	bl	80058a4 <xQueueGenericSendFromISR>
 80074d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3728      	adds	r7, #40	; 0x28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000df8 	.word	0x20000df8

080074e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f2:	4b22      	ldr	r3, [pc, #136]	; (800757c <prvProcessExpiredTimer+0x94>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd feb3 	bl	800526c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d022      	beq.n	800755a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	18d1      	adds	r1, r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f000 f8d1 	bl	80076c8 <prvInsertTimerInActiveList>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01f      	beq.n	800756c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800752c:	2300      	movs	r3, #0
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2300      	movs	r3, #0
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	2100      	movs	r1, #0
 8007536:	6978      	ldr	r0, [r7, #20]
 8007538:	f7ff ff88 	bl	800744c <xTimerGenericCommand>
 800753c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d113      	bne.n	800756c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	6978      	ldr	r0, [r7, #20]
 8007572:	4798      	blx	r3
}
 8007574:	bf00      	nop
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000df0 	.word	0x20000df0

08007580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f857 	bl	8007640 <prvGetNextExpireTime>
 8007592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4619      	mov	r1, r3
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 f803 	bl	80075a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800759e:	f000 f8d5 	bl	800774c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a2:	e7f1      	b.n	8007588 <prvTimerTask+0x8>

080075a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075ae:	f7ff f87f 	bl	80066b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075b2:	f107 0308 	add.w	r3, r7, #8
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f866 	bl	8007688 <prvSampleTimeNow>
 80075bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d130      	bne.n	8007626 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <prvProcessTimerOrBlockTask+0x3c>
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d806      	bhi.n	80075e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075d2:	f7ff f87b 	bl	80066cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075d6:	68f9      	ldr	r1, [r7, #12]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ff85 	bl	80074e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075de:	e024      	b.n	800762a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <prvProcessTimerOrBlockTask+0x90>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <prvProcessTimerOrBlockTask+0x50>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <prvProcessTimerOrBlockTask+0x52>
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <prvProcessTimerOrBlockTask+0x94>)
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4619      	mov	r1, r3
 8007606:	f7fe fde3 	bl	80061d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800760a:	f7ff f85f 	bl	80066cc <xTaskResumeAll>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <prvProcessTimerOrBlockTask+0x98>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
}
 8007624:	e001      	b.n	800762a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007626:	f7ff f851 	bl	80066cc <xTaskResumeAll>
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000df4 	.word	0x20000df4
 8007638:	20000df8 	.word	0x20000df8
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <prvGetNextExpireTime+0x44>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <prvGetNextExpireTime+0x16>
 8007652:	2201      	movs	r2, #1
 8007654:	e000      	b.n	8007658 <prvGetNextExpireTime+0x18>
 8007656:	2200      	movs	r2, #0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <prvGetNextExpireTime+0x44>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	e001      	b.n	8007674 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000df0 	.word	0x20000df0

08007688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007690:	f7ff f8ba 	bl	8006808 <xTaskGetTickCount>
 8007694:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <prvSampleTimeNow+0x3c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	429a      	cmp	r2, r3
 800769e:	d205      	bcs.n	80076ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076a0:	f000 f936 	bl	8007910 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e002      	b.n	80076b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076b2:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <prvSampleTimeNow+0x3c>)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000e00 	.word	0x20000e00

080076c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d812      	bhi.n	8007714 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d302      	bcc.n	8007702 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e01b      	b.n	800773a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <prvInsertTimerInActiveList+0x7c>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3304      	adds	r3, #4
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f7fd fd74 	bl	80051fa <vListInsert>
 8007712:	e012      	b.n	800773a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d206      	bcs.n	800772a <prvInsertTimerInActiveList+0x62>
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d302      	bcc.n	800772a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e007      	b.n	800773a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800772a:	4b07      	ldr	r3, [pc, #28]	; (8007748 <prvInsertTimerInActiveList+0x80>)
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3304      	adds	r3, #4
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f7fd fd60 	bl	80051fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800773a:	697b      	ldr	r3, [r7, #20]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000df4 	.word	0x20000df4
 8007748:	20000df0 	.word	0x20000df0

0800774c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08e      	sub	sp, #56	; 0x38
 8007750:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007752:	e0ca      	b.n	80078ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	da18      	bge.n	800778c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	3304      	adds	r3, #4
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	61fb      	str	r3, [r7, #28]
}
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007782:	6850      	ldr	r0, [r2, #4]
 8007784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007786:	6892      	ldr	r2, [r2, #8]
 8007788:	4611      	mov	r1, r2
 800778a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f2c0 80aa 	blt.w	80078e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d004      	beq.n	80077aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	3304      	adds	r3, #4
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fd fd61 	bl	800526c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077aa:	463b      	mov	r3, r7
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff ff6b 	bl	8007688 <prvSampleTimeNow>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	f200 8097 	bhi.w	80078ea <prvProcessReceivedCommands+0x19e>
 80077bc:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <prvProcessReceivedCommands+0x78>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077ed 	.word	0x080077ed
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077ed 	.word	0x080077ed
 80077d0:	08007861 	.word	0x08007861
 80077d4:	08007875 	.word	0x08007875
 80077d8:	080078bf 	.word	0x080078bf
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077ed 	.word	0x080077ed
 80077e4:	08007861 	.word	0x08007861
 80077e8:	08007875 	.word	0x08007875
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	18d1      	adds	r1, r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780c:	f7ff ff5c 	bl	80076c8 <prvInsertTimerInActiveList>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d069      	beq.n	80078ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d05e      	beq.n	80078ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	441a      	add	r2, r3
 8007834:	2300      	movs	r3, #0
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	2100      	movs	r1, #0
 800783c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783e:	f7ff fe05 	bl	800744c <xTimerGenericCommand>
 8007842:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d14f      	bne.n	80078ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	61bb      	str	r3, [r7, #24]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007872:	e03a      	b.n	80078ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	617b      	str	r3, [r7, #20]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	18d1      	adds	r1, r2, r3
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b8:	f7ff ff06 	bl	80076c8 <prvInsertTimerInActiveList>
					break;
 80078bc:	e015      	b.n	80078ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80078cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ce:	f000 fbff 	bl	80080d0 <vPortFree>
 80078d2:	e00a      	b.n	80078ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078da:	f023 0301 	bic.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078e6:	e000      	b.n	80078ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <prvProcessReceivedCommands+0x1c0>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	1d39      	adds	r1, r7, #4
 80078f0:	2200      	movs	r2, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe f872 	bl	80059dc <xQueueReceive>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f47f af2a 	bne.w	8007754 <prvProcessReceivedCommands+0x8>
	}
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	3730      	adds	r7, #48	; 0x30
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000df8 	.word	0x20000df8

08007910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007916:	e048      	b.n	80079aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007918:	4b2d      	ldr	r3, [pc, #180]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007922:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3304      	adds	r3, #4
 8007930:	4618      	mov	r0, r3
 8007932:	f7fd fc9b 	bl	800526c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d02e      	beq.n	80079aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4413      	add	r3, r2
 8007954:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	429a      	cmp	r2, r3
 800795c:	d90e      	bls.n	800797c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800796a:	4b19      	ldr	r3, [pc, #100]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3304      	adds	r3, #4
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f7fd fc40 	bl	80051fa <vListInsert>
 800797a:	e016      	b.n	80079aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800797c:	2300      	movs	r3, #0
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	2100      	movs	r1, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff fd60 	bl	800744c <xTimerGenericCommand>
 800798c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	603b      	str	r3, [r7, #0]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1b1      	bne.n	8007918 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079ba:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <prvSwitchTimerLists+0xc4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a04      	ldr	r2, [pc, #16]	; (80079d0 <prvSwitchTimerLists+0xc0>)
 80079c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079c2:	4a04      	ldr	r2, [pc, #16]	; (80079d4 <prvSwitchTimerLists+0xc4>)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	6013      	str	r3, [r2, #0]
}
 80079c8:	bf00      	nop
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000df0 	.word	0x20000df0
 80079d4:	20000df4 	.word	0x20000df4

080079d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079de:	f000 f989 	bl	8007cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d120      	bne.n	8007a2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079ea:	4814      	ldr	r0, [pc, #80]	; (8007a3c <prvCheckForValidListAndQueue+0x64>)
 80079ec:	f7fd fbb4 	bl	8005158 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079f0:	4813      	ldr	r0, [pc, #76]	; (8007a40 <prvCheckForValidListAndQueue+0x68>)
 80079f2:	f7fd fbb1 	bl	8005158 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <prvCheckForValidListAndQueue+0x6c>)
 80079f8:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <prvCheckForValidListAndQueue+0x64>)
 80079fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079fc:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvCheckForValidListAndQueue+0x70>)
 80079fe:	4a10      	ldr	r2, [pc, #64]	; (8007a40 <prvCheckForValidListAndQueue+0x68>)
 8007a00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a02:	2300      	movs	r3, #0
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <prvCheckForValidListAndQueue+0x74>)
 8007a08:	4a11      	ldr	r2, [pc, #68]	; (8007a50 <prvCheckForValidListAndQueue+0x78>)
 8007a0a:	2110      	movs	r1, #16
 8007a0c:	200a      	movs	r0, #10
 8007a0e:	f7fd fcbf 	bl	8005390 <xQueueGenericCreateStatic>
 8007a12:	4603      	mov	r3, r0
 8007a14:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 8007a16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a20:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <prvCheckForValidListAndQueue+0x60>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	490b      	ldr	r1, [pc, #44]	; (8007a54 <prvCheckForValidListAndQueue+0x7c>)
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fba8 	bl	800617c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a2c:	f000 f992 	bl	8007d54 <vPortExitCritical>
}
 8007a30:	bf00      	nop
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000df8 	.word	0x20000df8
 8007a3c:	20000dc8 	.word	0x20000dc8
 8007a40:	20000ddc 	.word	0x20000ddc
 8007a44:	20000df0 	.word	0x20000df0
 8007a48:	20000df4 	.word	0x20000df4
 8007a4c:	20000ea4 	.word	0x20000ea4
 8007a50:	20000e04 	.word	0x20000e04
 8007a54:	0800b78c 	.word	0x0800b78c

08007a58 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	; 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007a66:	f06f 0301 	mvn.w	r3, #1
 8007a6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <xTimerPendFunctionCallFromISR+0x3c>)
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	f107 0114 	add.w	r1, r7, #20
 8007a80:	2300      	movs	r3, #0
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	f7fd ff0e 	bl	80058a4 <xQueueGenericSendFromISR>
 8007a88:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3728      	adds	r7, #40	; 0x28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000df8 	.word	0x20000df8

08007a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3b04      	subs	r3, #4
 8007aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ac8:	4a0c      	ldr	r2, [pc, #48]	; (8007afc <pxPortInitialiseStack+0x64>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3b14      	subs	r3, #20
 8007ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f06f 0202 	mvn.w	r2, #2
 8007ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3b20      	subs	r3, #32
 8007aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aee:	68fb      	ldr	r3, [r7, #12]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	08007b01 	.word	0x08007b01

08007b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <prvTaskExitError+0x54>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d00a      	beq.n	8007b2a <prvTaskExitError+0x2a>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	60fb      	str	r3, [r7, #12]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <prvTaskExitError+0x28>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	60bb      	str	r3, [r7, #8]
}
 8007b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b3e:	bf00      	nop
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0fc      	beq.n	8007b40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	2000000c 	.word	0x2000000c
	...

08007b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <pxCurrentTCBConst2>)
 8007b62:	6819      	ldr	r1, [r3, #0]
 8007b64:	6808      	ldr	r0, [r1, #0]
 8007b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	f380 8809 	msr	PSP, r0
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8811 	msr	BASEPRI, r0
 8007b7a:	4770      	bx	lr
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst2>:
 8007b80:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b88:	4808      	ldr	r0, [pc, #32]	; (8007bac <prvPortStartFirstTask+0x24>)
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f380 8808 	msr	MSP, r0
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8814 	msr	CONTROL, r0
 8007b9a:	b662      	cpsie	i
 8007b9c:	b661      	cpsie	f
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	df00      	svc	0
 8007ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007baa:	bf00      	nop
 8007bac:	e000ed08 	.word	0xe000ed08

08007bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bb6:	4b46      	ldr	r3, [pc, #280]	; (8007cd0 <xPortStartScheduler+0x120>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a46      	ldr	r2, [pc, #280]	; (8007cd4 <xPortStartScheduler+0x124>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d10a      	bne.n	8007bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	613b      	str	r3, [r7, #16]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bd6:	4b3e      	ldr	r3, [pc, #248]	; (8007cd0 <xPortStartScheduler+0x120>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a3f      	ldr	r2, [pc, #252]	; (8007cd8 <xPortStartScheduler+0x128>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10a      	bne.n	8007bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	60fb      	str	r3, [r7, #12]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <xPortStartScheduler+0x12c>)
 8007bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	22ff      	movs	r2, #255	; 0xff
 8007c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	4b31      	ldr	r3, [pc, #196]	; (8007ce0 <xPortStartScheduler+0x130>)
 8007c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c1e:	4b31      	ldr	r3, [pc, #196]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c20:	2207      	movs	r2, #7
 8007c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c24:	e009      	b.n	8007c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c26:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b80      	cmp	r3, #128	; 0x80
 8007c44:	d0ef      	beq.n	8007c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c46:	4b27      	ldr	r3, [pc, #156]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f1c3 0307 	rsb	r3, r3, #7
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d00a      	beq.n	8007c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	60bb      	str	r3, [r7, #8]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c68:	4b1e      	ldr	r3, [pc, #120]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c72:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c92:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a14      	ldr	r2, [pc, #80]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c9e:	f000 f8dd 	bl	8007e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ca2:	4b12      	ldr	r3, [pc, #72]	; (8007cec <xPortStartScheduler+0x13c>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ca8:	f000 f8fc 	bl	8007ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cac:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <xPortStartScheduler+0x140>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0f      	ldr	r2, [pc, #60]	; (8007cf0 <xPortStartScheduler+0x140>)
 8007cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cb8:	f7ff ff66 	bl	8007b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cbc:	f7fe fe6e 	bl	800699c <vTaskSwitchContext>
	prvTaskExitError();
 8007cc0:	f7ff ff1e 	bl	8007b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	e000ed00 	.word	0xe000ed00
 8007cd4:	410fc271 	.word	0x410fc271
 8007cd8:	410fc270 	.word	0x410fc270
 8007cdc:	e000e400 	.word	0xe000e400
 8007ce0:	20000ef4 	.word	0x20000ef4
 8007ce4:	20000ef8 	.word	0x20000ef8
 8007ce8:	e000ed20 	.word	0xe000ed20
 8007cec:	2000000c 	.word	0x2000000c
 8007cf0:	e000ef34 	.word	0xe000ef34

08007cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	607b      	str	r3, [r7, #4]
}
 8007d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <vPortEnterCritical+0x58>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <vPortEnterCritical+0x58>)
 8007d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <vPortEnterCritical+0x58>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d10f      	bne.n	8007d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d20:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <vPortEnterCritical+0x5c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	603b      	str	r3, [r7, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <vPortEnterCritical+0x4a>
	}
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	2000000c 	.word	0x2000000c
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d5a:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <vPortExitCritical+0x50>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <vPortExitCritical+0x24>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	607b      	str	r3, [r7, #4]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <vPortExitCritical+0x50>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <vPortExitCritical+0x50>)
 8007d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d82:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <vPortExitCritical+0x50>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d105      	bne.n	8007d96 <vPortExitCritical+0x42>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	f383 8811 	msr	BASEPRI, r3
}
 8007d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	2000000c 	.word	0x2000000c
	...

08007db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007db0:	f3ef 8009 	mrs	r0, PSP
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <pxCurrentTCBConst>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	f01e 0f10 	tst.w	lr, #16
 8007dc0:	bf08      	it	eq
 8007dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dca:	6010      	str	r0, [r2, #0]
 8007dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007dd4:	f380 8811 	msr	BASEPRI, r0
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f7fe fddc 	bl	800699c <vTaskSwitchContext>
 8007de4:	f04f 0000 	mov.w	r0, #0
 8007de8:	f380 8811 	msr	BASEPRI, r0
 8007dec:	bc09      	pop	{r0, r3}
 8007dee:	6819      	ldr	r1, [r3, #0]
 8007df0:	6808      	ldr	r0, [r1, #0]
 8007df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df6:	f01e 0f10 	tst.w	lr, #16
 8007dfa:	bf08      	it	eq
 8007dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e00:	f380 8809 	msr	PSP, r0
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst>:
 8007e10:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	607b      	str	r3, [r7, #4]
}
 8007e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e32:	f7fe fcf9 	bl	8006828 <xTaskIncrementTick>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <xPortSysTickHandler+0x40>)
 8007e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	f383 8811 	msr	BASEPRI, r3
}
 8007e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <vPortSetupTimerInterrupt+0x34>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <vPortSetupTimerInterrupt+0x38>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <vPortSetupTimerInterrupt+0x3c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <vPortSetupTimerInterrupt+0x40>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	099b      	lsrs	r3, r3, #6
 8007e78:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <vPortSetupTimerInterrupt+0x44>)
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e7e:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <vPortSetupTimerInterrupt+0x34>)
 8007e80:	2207      	movs	r2, #7
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	e000e010 	.word	0xe000e010
 8007e94:	e000e018 	.word	0xe000e018
 8007e98:	20000000 	.word	0x20000000
 8007e9c:	10624dd3 	.word	0x10624dd3
 8007ea0:	e000e014 	.word	0xe000e014

08007ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007eb4 <vPortEnableVFP+0x10>
 8007ea8:	6801      	ldr	r1, [r0, #0]
 8007eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eae:	6001      	str	r1, [r0, #0]
 8007eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007eb2:	bf00      	nop
 8007eb4:	e000ed88 	.word	0xe000ed88

08007eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ebe:	f3ef 8305 	mrs	r3, IPSR
 8007ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d914      	bls.n	8007ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eca:	4a17      	ldr	r2, [pc, #92]	; (8007f28 <vPortValidateInterruptPriority+0x70>)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ed4:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <vPortValidateInterruptPriority+0x74>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	7afa      	ldrb	r2, [r7, #11]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d20a      	bcs.n	8007ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	607b      	str	r3, [r7, #4]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ef4:	4b0e      	ldr	r3, [pc, #56]	; (8007f30 <vPortValidateInterruptPriority+0x78>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007efc:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <vPortValidateInterruptPriority+0x7c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d90a      	bls.n	8007f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	603b      	str	r3, [r7, #0]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <vPortValidateInterruptPriority+0x60>
	}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	e000e3f0 	.word	0xe000e3f0
 8007f2c:	20000ef4 	.word	0x20000ef4
 8007f30:	e000ed0c 	.word	0xe000ed0c
 8007f34:	20000ef8 	.word	0x20000ef8

08007f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	; 0x28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f44:	f7fe fbb4 	bl	80066b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f48:	4b5b      	ldr	r3, [pc, #364]	; (80080b8 <pvPortMalloc+0x180>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f50:	f000 f920 	bl	8008194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f54:	4b59      	ldr	r3, [pc, #356]	; (80080bc <pvPortMalloc+0x184>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f040 8093 	bne.w	8008088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01d      	beq.n	8007fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f68:	2208      	movs	r2, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d014      	beq.n	8007fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f023 0307 	bic.w	r3, r3, #7
 8007f80:	3308      	adds	r3, #8
 8007f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	617b      	str	r3, [r7, #20]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d06e      	beq.n	8008088 <pvPortMalloc+0x150>
 8007faa:	4b45      	ldr	r3, [pc, #276]	; (80080c0 <pvPortMalloc+0x188>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d869      	bhi.n	8008088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fb4:	4b43      	ldr	r3, [pc, #268]	; (80080c4 <pvPortMalloc+0x18c>)
 8007fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fb8:	4b42      	ldr	r3, [pc, #264]	; (80080c4 <pvPortMalloc+0x18c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fbe:	e004      	b.n	8007fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d903      	bls.n	8007fdc <pvPortMalloc+0xa4>
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f1      	bne.n	8007fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fdc:	4b36      	ldr	r3, [pc, #216]	; (80080b8 <pvPortMalloc+0x180>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d050      	beq.n	8008088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2208      	movs	r2, #8
 8007fec:	4413      	add	r3, r2
 8007fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	1ad2      	subs	r2, r2, r3
 8008000:	2308      	movs	r3, #8
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	429a      	cmp	r2, r3
 8008006:	d91f      	bls.n	8008048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <pvPortMalloc+0xf8>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	613b      	str	r3, [r7, #16]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	1ad2      	subs	r2, r2, r3
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008042:	69b8      	ldr	r0, [r7, #24]
 8008044:	f000 f908 	bl	8008258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008048:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <pvPortMalloc+0x188>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <pvPortMalloc+0x188>)
 8008054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008056:	4b1a      	ldr	r3, [pc, #104]	; (80080c0 <pvPortMalloc+0x188>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b1b      	ldr	r3, [pc, #108]	; (80080c8 <pvPortMalloc+0x190>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d203      	bcs.n	800806a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008062:	4b17      	ldr	r3, [pc, #92]	; (80080c0 <pvPortMalloc+0x188>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a18      	ldr	r2, [pc, #96]	; (80080c8 <pvPortMalloc+0x190>)
 8008068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	4b13      	ldr	r3, [pc, #76]	; (80080bc <pvPortMalloc+0x184>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	431a      	orrs	r2, r3
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <pvPortMalloc+0x194>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	4a11      	ldr	r2, [pc, #68]	; (80080cc <pvPortMalloc+0x194>)
 8008086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008088:	f7fe fb20 	bl	80066cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <pvPortMalloc+0x174>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60fb      	str	r3, [r7, #12]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <pvPortMalloc+0x172>
	return pvReturn;
 80080ac:	69fb      	ldr	r3, [r7, #28]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20004b04 	.word	0x20004b04
 80080bc:	20004b18 	.word	0x20004b18
 80080c0:	20004b08 	.word	0x20004b08
 80080c4:	20004afc 	.word	0x20004afc
 80080c8:	20004b0c 	.word	0x20004b0c
 80080cc:	20004b10 	.word	0x20004b10

080080d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d04d      	beq.n	800817e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080e2:	2308      	movs	r3, #8
 80080e4:	425b      	negs	r3, r3
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4413      	add	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	4b24      	ldr	r3, [pc, #144]	; (8008188 <vPortFree+0xb8>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <vPortFree+0x44>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60fb      	str	r3, [r7, #12]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <vPortFree+0x62>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60bb      	str	r3, [r7, #8]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <vPortFree+0xb8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4013      	ands	r3, r2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01e      	beq.n	800817e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d11a      	bne.n	800817e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	4b0e      	ldr	r3, [pc, #56]	; (8008188 <vPortFree+0xb8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	43db      	mvns	r3, r3
 8008152:	401a      	ands	r2, r3
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008158:	f7fe faaa 	bl	80066b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b0a      	ldr	r3, [pc, #40]	; (800818c <vPortFree+0xbc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4413      	add	r3, r2
 8008166:	4a09      	ldr	r2, [pc, #36]	; (800818c <vPortFree+0xbc>)
 8008168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800816a:	6938      	ldr	r0, [r7, #16]
 800816c:	f000 f874 	bl	8008258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <vPortFree+0xc0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	4a06      	ldr	r2, [pc, #24]	; (8008190 <vPortFree+0xc0>)
 8008178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800817a:	f7fe faa7 	bl	80066cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800817e:	bf00      	nop
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20004b18 	.word	0x20004b18
 800818c:	20004b08 	.word	0x20004b08
 8008190:	20004b14 	.word	0x20004b14

08008194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800819a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800819e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081a0:	4b27      	ldr	r3, [pc, #156]	; (8008240 <prvHeapInit+0xac>)
 80081a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00c      	beq.n	80081c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3307      	adds	r3, #7
 80081b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0307 	bic.w	r3, r3, #7
 80081ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	4a1f      	ldr	r2, [pc, #124]	; (8008240 <prvHeapInit+0xac>)
 80081c4:	4413      	add	r3, r2
 80081c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081cc:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <prvHeapInit+0xb0>)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081d2:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <prvHeapInit+0xb0>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	4413      	add	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081e0:	2208      	movs	r2, #8
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0307 	bic.w	r3, r3, #7
 80081ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4a15      	ldr	r2, [pc, #84]	; (8008248 <prvHeapInit+0xb4>)
 80081f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <prvHeapInit+0xb4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081fe:	4b12      	ldr	r3, [pc, #72]	; (8008248 <prvHeapInit+0xb4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008214:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <prvHeapInit+0xb4>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4a0a      	ldr	r2, [pc, #40]	; (800824c <prvHeapInit+0xb8>)
 8008222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4a09      	ldr	r2, [pc, #36]	; (8008250 <prvHeapInit+0xbc>)
 800822a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800822c:	4b09      	ldr	r3, [pc, #36]	; (8008254 <prvHeapInit+0xc0>)
 800822e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	20000efc 	.word	0x20000efc
 8008244:	20004afc 	.word	0x20004afc
 8008248:	20004b04 	.word	0x20004b04
 800824c:	20004b0c 	.word	0x20004b0c
 8008250:	20004b08 	.word	0x20004b08
 8008254:	20004b18 	.word	0x20004b18

08008258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008260:	4b28      	ldr	r3, [pc, #160]	; (8008304 <prvInsertBlockIntoFreeList+0xac>)
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e002      	b.n	800826c <prvInsertBlockIntoFreeList+0x14>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d8f7      	bhi.n	8008266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	4413      	add	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	429a      	cmp	r2, r3
 8008286:	d108      	bne.n	800829a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	441a      	add	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d118      	bne.n	80082e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b15      	ldr	r3, [pc, #84]	; (8008308 <prvInsertBlockIntoFreeList+0xb0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d00d      	beq.n	80082d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	441a      	add	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e008      	b.n	80082e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082d6:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <prvInsertBlockIntoFreeList+0xb0>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	e003      	b.n	80082e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d002      	beq.n	80082f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20004afc 	.word	0x20004afc
 8008308:	20004b04 	.word	0x20004b04

0800830c <__errno>:
 800830c:	4b01      	ldr	r3, [pc, #4]	; (8008314 <__errno+0x8>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20000010 	.word	0x20000010

08008318 <__libc_init_array>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	4d0d      	ldr	r5, [pc, #52]	; (8008350 <__libc_init_array+0x38>)
 800831c:	4c0d      	ldr	r4, [pc, #52]	; (8008354 <__libc_init_array+0x3c>)
 800831e:	1b64      	subs	r4, r4, r5
 8008320:	10a4      	asrs	r4, r4, #2
 8008322:	2600      	movs	r6, #0
 8008324:	42a6      	cmp	r6, r4
 8008326:	d109      	bne.n	800833c <__libc_init_array+0x24>
 8008328:	4d0b      	ldr	r5, [pc, #44]	; (8008358 <__libc_init_array+0x40>)
 800832a:	4c0c      	ldr	r4, [pc, #48]	; (800835c <__libc_init_array+0x44>)
 800832c:	f003 f9cc 	bl	800b6c8 <_init>
 8008330:	1b64      	subs	r4, r4, r5
 8008332:	10a4      	asrs	r4, r4, #2
 8008334:	2600      	movs	r6, #0
 8008336:	42a6      	cmp	r6, r4
 8008338:	d105      	bne.n	8008346 <__libc_init_array+0x2e>
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008340:	4798      	blx	r3
 8008342:	3601      	adds	r6, #1
 8008344:	e7ee      	b.n	8008324 <__libc_init_array+0xc>
 8008346:	f855 3b04 	ldr.w	r3, [r5], #4
 800834a:	4798      	blx	r3
 800834c:	3601      	adds	r6, #1
 800834e:	e7f2      	b.n	8008336 <__libc_init_array+0x1e>
 8008350:	0800bc84 	.word	0x0800bc84
 8008354:	0800bc84 	.word	0x0800bc84
 8008358:	0800bc84 	.word	0x0800bc84
 800835c:	0800bc88 	.word	0x0800bc88

08008360 <memcpy>:
 8008360:	440a      	add	r2, r1
 8008362:	4291      	cmp	r1, r2
 8008364:	f100 33ff 	add.w	r3, r0, #4294967295
 8008368:	d100      	bne.n	800836c <memcpy+0xc>
 800836a:	4770      	bx	lr
 800836c:	b510      	push	{r4, lr}
 800836e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008376:	4291      	cmp	r1, r2
 8008378:	d1f9      	bne.n	800836e <memcpy+0xe>
 800837a:	bd10      	pop	{r4, pc}

0800837c <memset>:
 800837c:	4402      	add	r2, r0
 800837e:	4603      	mov	r3, r0
 8008380:	4293      	cmp	r3, r2
 8008382:	d100      	bne.n	8008386 <memset+0xa>
 8008384:	4770      	bx	lr
 8008386:	f803 1b01 	strb.w	r1, [r3], #1
 800838a:	e7f9      	b.n	8008380 <memset+0x4>

0800838c <__cvt>:
 800838c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	ec55 4b10 	vmov	r4, r5, d0
 8008394:	2d00      	cmp	r5, #0
 8008396:	460e      	mov	r6, r1
 8008398:	4619      	mov	r1, r3
 800839a:	462b      	mov	r3, r5
 800839c:	bfbb      	ittet	lt
 800839e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083a2:	461d      	movlt	r5, r3
 80083a4:	2300      	movge	r3, #0
 80083a6:	232d      	movlt	r3, #45	; 0x2d
 80083a8:	700b      	strb	r3, [r1, #0]
 80083aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083b0:	4691      	mov	r9, r2
 80083b2:	f023 0820 	bic.w	r8, r3, #32
 80083b6:	bfbc      	itt	lt
 80083b8:	4622      	movlt	r2, r4
 80083ba:	4614      	movlt	r4, r2
 80083bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083c0:	d005      	beq.n	80083ce <__cvt+0x42>
 80083c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083c6:	d100      	bne.n	80083ca <__cvt+0x3e>
 80083c8:	3601      	adds	r6, #1
 80083ca:	2102      	movs	r1, #2
 80083cc:	e000      	b.n	80083d0 <__cvt+0x44>
 80083ce:	2103      	movs	r1, #3
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	ab02      	add	r3, sp, #8
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	ec45 4b10 	vmov	d0, r4, r5
 80083dc:	4653      	mov	r3, sl
 80083de:	4632      	mov	r2, r6
 80083e0:	f000 fcea 	bl	8008db8 <_dtoa_r>
 80083e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083e8:	4607      	mov	r7, r0
 80083ea:	d102      	bne.n	80083f2 <__cvt+0x66>
 80083ec:	f019 0f01 	tst.w	r9, #1
 80083f0:	d022      	beq.n	8008438 <__cvt+0xac>
 80083f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083f6:	eb07 0906 	add.w	r9, r7, r6
 80083fa:	d110      	bne.n	800841e <__cvt+0x92>
 80083fc:	783b      	ldrb	r3, [r7, #0]
 80083fe:	2b30      	cmp	r3, #48	; 0x30
 8008400:	d10a      	bne.n	8008418 <__cvt+0x8c>
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 fb65 	bl	8000ad8 <__aeabi_dcmpeq>
 800840e:	b918      	cbnz	r0, 8008418 <__cvt+0x8c>
 8008410:	f1c6 0601 	rsb	r6, r6, #1
 8008414:	f8ca 6000 	str.w	r6, [sl]
 8008418:	f8da 3000 	ldr.w	r3, [sl]
 800841c:	4499      	add	r9, r3
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	4620      	mov	r0, r4
 8008424:	4629      	mov	r1, r5
 8008426:	f7f8 fb57 	bl	8000ad8 <__aeabi_dcmpeq>
 800842a:	b108      	cbz	r0, 8008430 <__cvt+0xa4>
 800842c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008430:	2230      	movs	r2, #48	; 0x30
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	454b      	cmp	r3, r9
 8008436:	d307      	bcc.n	8008448 <__cvt+0xbc>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800843c:	1bdb      	subs	r3, r3, r7
 800843e:	4638      	mov	r0, r7
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	b004      	add	sp, #16
 8008444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008448:	1c59      	adds	r1, r3, #1
 800844a:	9103      	str	r1, [sp, #12]
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e7f0      	b.n	8008432 <__cvt+0xa6>

08008450 <__exponent>:
 8008450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008452:	4603      	mov	r3, r0
 8008454:	2900      	cmp	r1, #0
 8008456:	bfb8      	it	lt
 8008458:	4249      	neglt	r1, r1
 800845a:	f803 2b02 	strb.w	r2, [r3], #2
 800845e:	bfb4      	ite	lt
 8008460:	222d      	movlt	r2, #45	; 0x2d
 8008462:	222b      	movge	r2, #43	; 0x2b
 8008464:	2909      	cmp	r1, #9
 8008466:	7042      	strb	r2, [r0, #1]
 8008468:	dd2a      	ble.n	80084c0 <__exponent+0x70>
 800846a:	f10d 0407 	add.w	r4, sp, #7
 800846e:	46a4      	mov	ip, r4
 8008470:	270a      	movs	r7, #10
 8008472:	46a6      	mov	lr, r4
 8008474:	460a      	mov	r2, r1
 8008476:	fb91 f6f7 	sdiv	r6, r1, r7
 800847a:	fb07 1516 	mls	r5, r7, r6, r1
 800847e:	3530      	adds	r5, #48	; 0x30
 8008480:	2a63      	cmp	r2, #99	; 0x63
 8008482:	f104 34ff 	add.w	r4, r4, #4294967295
 8008486:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800848a:	4631      	mov	r1, r6
 800848c:	dcf1      	bgt.n	8008472 <__exponent+0x22>
 800848e:	3130      	adds	r1, #48	; 0x30
 8008490:	f1ae 0502 	sub.w	r5, lr, #2
 8008494:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008498:	1c44      	adds	r4, r0, #1
 800849a:	4629      	mov	r1, r5
 800849c:	4561      	cmp	r1, ip
 800849e:	d30a      	bcc.n	80084b6 <__exponent+0x66>
 80084a0:	f10d 0209 	add.w	r2, sp, #9
 80084a4:	eba2 020e 	sub.w	r2, r2, lr
 80084a8:	4565      	cmp	r5, ip
 80084aa:	bf88      	it	hi
 80084ac:	2200      	movhi	r2, #0
 80084ae:	4413      	add	r3, r2
 80084b0:	1a18      	subs	r0, r3, r0
 80084b2:	b003      	add	sp, #12
 80084b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084be:	e7ed      	b.n	800849c <__exponent+0x4c>
 80084c0:	2330      	movs	r3, #48	; 0x30
 80084c2:	3130      	adds	r1, #48	; 0x30
 80084c4:	7083      	strb	r3, [r0, #2]
 80084c6:	70c1      	strb	r1, [r0, #3]
 80084c8:	1d03      	adds	r3, r0, #4
 80084ca:	e7f1      	b.n	80084b0 <__exponent+0x60>

080084cc <_printf_float>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	ed2d 8b02 	vpush	{d8}
 80084d4:	b08d      	sub	sp, #52	; 0x34
 80084d6:	460c      	mov	r4, r1
 80084d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084dc:	4616      	mov	r6, r2
 80084de:	461f      	mov	r7, r3
 80084e0:	4605      	mov	r5, r0
 80084e2:	f001 fa55 	bl	8009990 <_localeconv_r>
 80084e6:	f8d0 a000 	ldr.w	sl, [r0]
 80084ea:	4650      	mov	r0, sl
 80084ec:	f7f7 fe78 	bl	80001e0 <strlen>
 80084f0:	2300      	movs	r3, #0
 80084f2:	930a      	str	r3, [sp, #40]	; 0x28
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	f8d8 3000 	ldr.w	r3, [r8]
 80084fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008500:	3307      	adds	r3, #7
 8008502:	f023 0307 	bic.w	r3, r3, #7
 8008506:	f103 0208 	add.w	r2, r3, #8
 800850a:	f8c8 2000 	str.w	r2, [r8]
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008516:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800851a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800851e:	9307      	str	r3, [sp, #28]
 8008520:	f8cd 8018 	str.w	r8, [sp, #24]
 8008524:	ee08 0a10 	vmov	s16, r0
 8008528:	4b9f      	ldr	r3, [pc, #636]	; (80087a8 <_printf_float+0x2dc>)
 800852a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800852e:	f04f 32ff 	mov.w	r2, #4294967295
 8008532:	f7f8 fb03 	bl	8000b3c <__aeabi_dcmpun>
 8008536:	bb88      	cbnz	r0, 800859c <_printf_float+0xd0>
 8008538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800853c:	4b9a      	ldr	r3, [pc, #616]	; (80087a8 <_printf_float+0x2dc>)
 800853e:	f04f 32ff 	mov.w	r2, #4294967295
 8008542:	f7f8 fadd 	bl	8000b00 <__aeabi_dcmple>
 8008546:	bb48      	cbnz	r0, 800859c <_printf_float+0xd0>
 8008548:	2200      	movs	r2, #0
 800854a:	2300      	movs	r3, #0
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f8 facc 	bl	8000aec <__aeabi_dcmplt>
 8008554:	b110      	cbz	r0, 800855c <_printf_float+0x90>
 8008556:	232d      	movs	r3, #45	; 0x2d
 8008558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800855c:	4b93      	ldr	r3, [pc, #588]	; (80087ac <_printf_float+0x2e0>)
 800855e:	4894      	ldr	r0, [pc, #592]	; (80087b0 <_printf_float+0x2e4>)
 8008560:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008564:	bf94      	ite	ls
 8008566:	4698      	movls	r8, r3
 8008568:	4680      	movhi	r8, r0
 800856a:	2303      	movs	r3, #3
 800856c:	6123      	str	r3, [r4, #16]
 800856e:	9b05      	ldr	r3, [sp, #20]
 8008570:	f023 0204 	bic.w	r2, r3, #4
 8008574:	6022      	str	r2, [r4, #0]
 8008576:	f04f 0900 	mov.w	r9, #0
 800857a:	9700      	str	r7, [sp, #0]
 800857c:	4633      	mov	r3, r6
 800857e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f000 f9d8 	bl	8008938 <_printf_common>
 8008588:	3001      	adds	r0, #1
 800858a:	f040 8090 	bne.w	80086ae <_printf_float+0x1e2>
 800858e:	f04f 30ff 	mov.w	r0, #4294967295
 8008592:	b00d      	add	sp, #52	; 0x34
 8008594:	ecbd 8b02 	vpop	{d8}
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	4642      	mov	r2, r8
 800859e:	464b      	mov	r3, r9
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f8 faca 	bl	8000b3c <__aeabi_dcmpun>
 80085a8:	b140      	cbz	r0, 80085bc <_printf_float+0xf0>
 80085aa:	464b      	mov	r3, r9
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfbc      	itt	lt
 80085b0:	232d      	movlt	r3, #45	; 0x2d
 80085b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085b6:	487f      	ldr	r0, [pc, #508]	; (80087b4 <_printf_float+0x2e8>)
 80085b8:	4b7f      	ldr	r3, [pc, #508]	; (80087b8 <_printf_float+0x2ec>)
 80085ba:	e7d1      	b.n	8008560 <_printf_float+0x94>
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085c2:	9206      	str	r2, [sp, #24]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	d13f      	bne.n	8008648 <_printf_float+0x17c>
 80085c8:	2306      	movs	r3, #6
 80085ca:	6063      	str	r3, [r4, #4]
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	6861      	ldr	r1, [r4, #4]
 80085d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085d4:	2300      	movs	r3, #0
 80085d6:	9303      	str	r3, [sp, #12]
 80085d8:	ab0a      	add	r3, sp, #40	; 0x28
 80085da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085de:	ab09      	add	r3, sp, #36	; 0x24
 80085e0:	ec49 8b10 	vmov	d0, r8, r9
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	6022      	str	r2, [r4, #0]
 80085e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085ec:	4628      	mov	r0, r5
 80085ee:	f7ff fecd 	bl	800838c <__cvt>
 80085f2:	9b06      	ldr	r3, [sp, #24]
 80085f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085f6:	2b47      	cmp	r3, #71	; 0x47
 80085f8:	4680      	mov	r8, r0
 80085fa:	d108      	bne.n	800860e <_printf_float+0x142>
 80085fc:	1cc8      	adds	r0, r1, #3
 80085fe:	db02      	blt.n	8008606 <_printf_float+0x13a>
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	4299      	cmp	r1, r3
 8008604:	dd41      	ble.n	800868a <_printf_float+0x1be>
 8008606:	f1ab 0b02 	sub.w	fp, fp, #2
 800860a:	fa5f fb8b 	uxtb.w	fp, fp
 800860e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008612:	d820      	bhi.n	8008656 <_printf_float+0x18a>
 8008614:	3901      	subs	r1, #1
 8008616:	465a      	mov	r2, fp
 8008618:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800861c:	9109      	str	r1, [sp, #36]	; 0x24
 800861e:	f7ff ff17 	bl	8008450 <__exponent>
 8008622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008624:	1813      	adds	r3, r2, r0
 8008626:	2a01      	cmp	r2, #1
 8008628:	4681      	mov	r9, r0
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	dc02      	bgt.n	8008634 <_printf_float+0x168>
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	07d2      	lsls	r2, r2, #31
 8008632:	d501      	bpl.n	8008638 <_printf_float+0x16c>
 8008634:	3301      	adds	r3, #1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800863c:	2b00      	cmp	r3, #0
 800863e:	d09c      	beq.n	800857a <_printf_float+0xae>
 8008640:	232d      	movs	r3, #45	; 0x2d
 8008642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008646:	e798      	b.n	800857a <_printf_float+0xae>
 8008648:	9a06      	ldr	r2, [sp, #24]
 800864a:	2a47      	cmp	r2, #71	; 0x47
 800864c:	d1be      	bne.n	80085cc <_printf_float+0x100>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1bc      	bne.n	80085cc <_printf_float+0x100>
 8008652:	2301      	movs	r3, #1
 8008654:	e7b9      	b.n	80085ca <_printf_float+0xfe>
 8008656:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800865a:	d118      	bne.n	800868e <_printf_float+0x1c2>
 800865c:	2900      	cmp	r1, #0
 800865e:	6863      	ldr	r3, [r4, #4]
 8008660:	dd0b      	ble.n	800867a <_printf_float+0x1ae>
 8008662:	6121      	str	r1, [r4, #16]
 8008664:	b913      	cbnz	r3, 800866c <_printf_float+0x1a0>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	07d0      	lsls	r0, r2, #31
 800866a:	d502      	bpl.n	8008672 <_printf_float+0x1a6>
 800866c:	3301      	adds	r3, #1
 800866e:	440b      	add	r3, r1
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	65a1      	str	r1, [r4, #88]	; 0x58
 8008674:	f04f 0900 	mov.w	r9, #0
 8008678:	e7de      	b.n	8008638 <_printf_float+0x16c>
 800867a:	b913      	cbnz	r3, 8008682 <_printf_float+0x1b6>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	07d2      	lsls	r2, r2, #31
 8008680:	d501      	bpl.n	8008686 <_printf_float+0x1ba>
 8008682:	3302      	adds	r3, #2
 8008684:	e7f4      	b.n	8008670 <_printf_float+0x1a4>
 8008686:	2301      	movs	r3, #1
 8008688:	e7f2      	b.n	8008670 <_printf_float+0x1a4>
 800868a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800868e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008690:	4299      	cmp	r1, r3
 8008692:	db05      	blt.n	80086a0 <_printf_float+0x1d4>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	6121      	str	r1, [r4, #16]
 8008698:	07d8      	lsls	r0, r3, #31
 800869a:	d5ea      	bpl.n	8008672 <_printf_float+0x1a6>
 800869c:	1c4b      	adds	r3, r1, #1
 800869e:	e7e7      	b.n	8008670 <_printf_float+0x1a4>
 80086a0:	2900      	cmp	r1, #0
 80086a2:	bfd4      	ite	le
 80086a4:	f1c1 0202 	rsble	r2, r1, #2
 80086a8:	2201      	movgt	r2, #1
 80086aa:	4413      	add	r3, r2
 80086ac:	e7e0      	b.n	8008670 <_printf_float+0x1a4>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	055a      	lsls	r2, r3, #21
 80086b2:	d407      	bmi.n	80086c4 <_printf_float+0x1f8>
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	4642      	mov	r2, r8
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	d12c      	bne.n	800871c <_printf_float+0x250>
 80086c2:	e764      	b.n	800858e <_printf_float+0xc2>
 80086c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086c8:	f240 80e0 	bls.w	800888c <_printf_float+0x3c0>
 80086cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086d0:	2200      	movs	r2, #0
 80086d2:	2300      	movs	r3, #0
 80086d4:	f7f8 fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d034      	beq.n	8008746 <_printf_float+0x27a>
 80086dc:	4a37      	ldr	r2, [pc, #220]	; (80087bc <_printf_float+0x2f0>)
 80086de:	2301      	movs	r3, #1
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f af51 	beq.w	800858e <_printf_float+0xc2>
 80086ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086f0:	429a      	cmp	r2, r3
 80086f2:	db02      	blt.n	80086fa <_printf_float+0x22e>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	07d8      	lsls	r0, r3, #31
 80086f8:	d510      	bpl.n	800871c <_printf_float+0x250>
 80086fa:	ee18 3a10 	vmov	r3, s16
 80086fe:	4652      	mov	r2, sl
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f af41 	beq.w	800858e <_printf_float+0xc2>
 800870c:	f04f 0800 	mov.w	r8, #0
 8008710:	f104 091a 	add.w	r9, r4, #26
 8008714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008716:	3b01      	subs	r3, #1
 8008718:	4543      	cmp	r3, r8
 800871a:	dc09      	bgt.n	8008730 <_printf_float+0x264>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	079b      	lsls	r3, r3, #30
 8008720:	f100 8105 	bmi.w	800892e <_printf_float+0x462>
 8008724:	68e0      	ldr	r0, [r4, #12]
 8008726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008728:	4298      	cmp	r0, r3
 800872a:	bfb8      	it	lt
 800872c:	4618      	movlt	r0, r3
 800872e:	e730      	b.n	8008592 <_printf_float+0xc6>
 8008730:	2301      	movs	r3, #1
 8008732:	464a      	mov	r2, r9
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f af27 	beq.w	800858e <_printf_float+0xc2>
 8008740:	f108 0801 	add.w	r8, r8, #1
 8008744:	e7e6      	b.n	8008714 <_printf_float+0x248>
 8008746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	dc39      	bgt.n	80087c0 <_printf_float+0x2f4>
 800874c:	4a1b      	ldr	r2, [pc, #108]	; (80087bc <_printf_float+0x2f0>)
 800874e:	2301      	movs	r3, #1
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af19 	beq.w	800858e <_printf_float+0xc2>
 800875c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008760:	4313      	orrs	r3, r2
 8008762:	d102      	bne.n	800876a <_printf_float+0x29e>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	07d9      	lsls	r1, r3, #31
 8008768:	d5d8      	bpl.n	800871c <_printf_float+0x250>
 800876a:	ee18 3a10 	vmov	r3, s16
 800876e:	4652      	mov	r2, sl
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f af09 	beq.w	800858e <_printf_float+0xc2>
 800877c:	f04f 0900 	mov.w	r9, #0
 8008780:	f104 0a1a 	add.w	sl, r4, #26
 8008784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008786:	425b      	negs	r3, r3
 8008788:	454b      	cmp	r3, r9
 800878a:	dc01      	bgt.n	8008790 <_printf_float+0x2c4>
 800878c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800878e:	e792      	b.n	80086b6 <_printf_float+0x1ea>
 8008790:	2301      	movs	r3, #1
 8008792:	4652      	mov	r2, sl
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f aef7 	beq.w	800858e <_printf_float+0xc2>
 80087a0:	f109 0901 	add.w	r9, r9, #1
 80087a4:	e7ee      	b.n	8008784 <_printf_float+0x2b8>
 80087a6:	bf00      	nop
 80087a8:	7fefffff 	.word	0x7fefffff
 80087ac:	0800b89c 	.word	0x0800b89c
 80087b0:	0800b8a0 	.word	0x0800b8a0
 80087b4:	0800b8a8 	.word	0x0800b8a8
 80087b8:	0800b8a4 	.word	0x0800b8a4
 80087bc:	0800b8ac 	.word	0x0800b8ac
 80087c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087c4:	429a      	cmp	r2, r3
 80087c6:	bfa8      	it	ge
 80087c8:	461a      	movge	r2, r3
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	4691      	mov	r9, r2
 80087ce:	dc37      	bgt.n	8008840 <_printf_float+0x374>
 80087d0:	f04f 0b00 	mov.w	fp, #0
 80087d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087d8:	f104 021a 	add.w	r2, r4, #26
 80087dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087de:	9305      	str	r3, [sp, #20]
 80087e0:	eba3 0309 	sub.w	r3, r3, r9
 80087e4:	455b      	cmp	r3, fp
 80087e6:	dc33      	bgt.n	8008850 <_printf_float+0x384>
 80087e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ec:	429a      	cmp	r2, r3
 80087ee:	db3b      	blt.n	8008868 <_printf_float+0x39c>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	07da      	lsls	r2, r3, #31
 80087f4:	d438      	bmi.n	8008868 <_printf_float+0x39c>
 80087f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f8:	9b05      	ldr	r3, [sp, #20]
 80087fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	eba2 0901 	sub.w	r9, r2, r1
 8008802:	4599      	cmp	r9, r3
 8008804:	bfa8      	it	ge
 8008806:	4699      	movge	r9, r3
 8008808:	f1b9 0f00 	cmp.w	r9, #0
 800880c:	dc35      	bgt.n	800887a <_printf_float+0x3ae>
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008816:	f104 0a1a 	add.w	sl, r4, #26
 800881a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	eba3 0309 	sub.w	r3, r3, r9
 8008824:	4543      	cmp	r3, r8
 8008826:	f77f af79 	ble.w	800871c <_printf_float+0x250>
 800882a:	2301      	movs	r3, #1
 800882c:	4652      	mov	r2, sl
 800882e:	4631      	mov	r1, r6
 8008830:	4628      	mov	r0, r5
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	f43f aeaa 	beq.w	800858e <_printf_float+0xc2>
 800883a:	f108 0801 	add.w	r8, r8, #1
 800883e:	e7ec      	b.n	800881a <_printf_float+0x34e>
 8008840:	4613      	mov	r3, r2
 8008842:	4631      	mov	r1, r6
 8008844:	4642      	mov	r2, r8
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	d1c0      	bne.n	80087d0 <_printf_float+0x304>
 800884e:	e69e      	b.n	800858e <_printf_float+0xc2>
 8008850:	2301      	movs	r3, #1
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	9205      	str	r2, [sp, #20]
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f ae97 	beq.w	800858e <_printf_float+0xc2>
 8008860:	9a05      	ldr	r2, [sp, #20]
 8008862:	f10b 0b01 	add.w	fp, fp, #1
 8008866:	e7b9      	b.n	80087dc <_printf_float+0x310>
 8008868:	ee18 3a10 	vmov	r3, s16
 800886c:	4652      	mov	r2, sl
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	d1be      	bne.n	80087f6 <_printf_float+0x32a>
 8008878:	e689      	b.n	800858e <_printf_float+0xc2>
 800887a:	9a05      	ldr	r2, [sp, #20]
 800887c:	464b      	mov	r3, r9
 800887e:	4442      	add	r2, r8
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	d1c1      	bne.n	800880e <_printf_float+0x342>
 800888a:	e680      	b.n	800858e <_printf_float+0xc2>
 800888c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800888e:	2a01      	cmp	r2, #1
 8008890:	dc01      	bgt.n	8008896 <_printf_float+0x3ca>
 8008892:	07db      	lsls	r3, r3, #31
 8008894:	d538      	bpl.n	8008908 <_printf_float+0x43c>
 8008896:	2301      	movs	r3, #1
 8008898:	4642      	mov	r2, r8
 800889a:	4631      	mov	r1, r6
 800889c:	4628      	mov	r0, r5
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f ae74 	beq.w	800858e <_printf_float+0xc2>
 80088a6:	ee18 3a10 	vmov	r3, s16
 80088aa:	4652      	mov	r2, sl
 80088ac:	4631      	mov	r1, r6
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	f43f ae6b 	beq.w	800858e <_printf_float+0xc2>
 80088b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088bc:	2200      	movs	r2, #0
 80088be:	2300      	movs	r3, #0
 80088c0:	f7f8 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 80088c4:	b9d8      	cbnz	r0, 80088fe <_printf_float+0x432>
 80088c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c8:	f108 0201 	add.w	r2, r8, #1
 80088cc:	3b01      	subs	r3, #1
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d10e      	bne.n	80088f6 <_printf_float+0x42a>
 80088d8:	e659      	b.n	800858e <_printf_float+0xc2>
 80088da:	2301      	movs	r3, #1
 80088dc:	4652      	mov	r2, sl
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f ae52 	beq.w	800858e <_printf_float+0xc2>
 80088ea:	f108 0801 	add.w	r8, r8, #1
 80088ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f0:	3b01      	subs	r3, #1
 80088f2:	4543      	cmp	r3, r8
 80088f4:	dcf1      	bgt.n	80088da <_printf_float+0x40e>
 80088f6:	464b      	mov	r3, r9
 80088f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088fc:	e6dc      	b.n	80086b8 <_printf_float+0x1ec>
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	f104 0a1a 	add.w	sl, r4, #26
 8008906:	e7f2      	b.n	80088ee <_printf_float+0x422>
 8008908:	2301      	movs	r3, #1
 800890a:	4642      	mov	r2, r8
 800890c:	e7df      	b.n	80088ce <_printf_float+0x402>
 800890e:	2301      	movs	r3, #1
 8008910:	464a      	mov	r2, r9
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	f43f ae38 	beq.w	800858e <_printf_float+0xc2>
 800891e:	f108 0801 	add.w	r8, r8, #1
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008926:	1a5b      	subs	r3, r3, r1
 8008928:	4543      	cmp	r3, r8
 800892a:	dcf0      	bgt.n	800890e <_printf_float+0x442>
 800892c:	e6fa      	b.n	8008724 <_printf_float+0x258>
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	f104 0919 	add.w	r9, r4, #25
 8008936:	e7f4      	b.n	8008922 <_printf_float+0x456>

08008938 <_printf_common>:
 8008938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	4616      	mov	r6, r2
 800893e:	4699      	mov	r9, r3
 8008940:	688a      	ldr	r2, [r1, #8]
 8008942:	690b      	ldr	r3, [r1, #16]
 8008944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008948:	4293      	cmp	r3, r2
 800894a:	bfb8      	it	lt
 800894c:	4613      	movlt	r3, r2
 800894e:	6033      	str	r3, [r6, #0]
 8008950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008954:	4607      	mov	r7, r0
 8008956:	460c      	mov	r4, r1
 8008958:	b10a      	cbz	r2, 800895e <_printf_common+0x26>
 800895a:	3301      	adds	r3, #1
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	0699      	lsls	r1, r3, #26
 8008962:	bf42      	ittt	mi
 8008964:	6833      	ldrmi	r3, [r6, #0]
 8008966:	3302      	addmi	r3, #2
 8008968:	6033      	strmi	r3, [r6, #0]
 800896a:	6825      	ldr	r5, [r4, #0]
 800896c:	f015 0506 	ands.w	r5, r5, #6
 8008970:	d106      	bne.n	8008980 <_printf_common+0x48>
 8008972:	f104 0a19 	add.w	sl, r4, #25
 8008976:	68e3      	ldr	r3, [r4, #12]
 8008978:	6832      	ldr	r2, [r6, #0]
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	42ab      	cmp	r3, r5
 800897e:	dc26      	bgt.n	80089ce <_printf_common+0x96>
 8008980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008984:	1e13      	subs	r3, r2, #0
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	bf18      	it	ne
 800898a:	2301      	movne	r3, #1
 800898c:	0692      	lsls	r2, r2, #26
 800898e:	d42b      	bmi.n	80089e8 <_printf_common+0xb0>
 8008990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008994:	4649      	mov	r1, r9
 8008996:	4638      	mov	r0, r7
 8008998:	47c0      	blx	r8
 800899a:	3001      	adds	r0, #1
 800899c:	d01e      	beq.n	80089dc <_printf_common+0xa4>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	68e5      	ldr	r5, [r4, #12]
 80089a2:	6832      	ldr	r2, [r6, #0]
 80089a4:	f003 0306 	and.w	r3, r3, #6
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	bf08      	it	eq
 80089ac:	1aad      	subeq	r5, r5, r2
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	6922      	ldr	r2, [r4, #16]
 80089b2:	bf0c      	ite	eq
 80089b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b8:	2500      	movne	r5, #0
 80089ba:	4293      	cmp	r3, r2
 80089bc:	bfc4      	itt	gt
 80089be:	1a9b      	subgt	r3, r3, r2
 80089c0:	18ed      	addgt	r5, r5, r3
 80089c2:	2600      	movs	r6, #0
 80089c4:	341a      	adds	r4, #26
 80089c6:	42b5      	cmp	r5, r6
 80089c8:	d11a      	bne.n	8008a00 <_printf_common+0xc8>
 80089ca:	2000      	movs	r0, #0
 80089cc:	e008      	b.n	80089e0 <_printf_common+0xa8>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4652      	mov	r2, sl
 80089d2:	4649      	mov	r1, r9
 80089d4:	4638      	mov	r0, r7
 80089d6:	47c0      	blx	r8
 80089d8:	3001      	adds	r0, #1
 80089da:	d103      	bne.n	80089e4 <_printf_common+0xac>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e4:	3501      	adds	r5, #1
 80089e6:	e7c6      	b.n	8008976 <_printf_common+0x3e>
 80089e8:	18e1      	adds	r1, r4, r3
 80089ea:	1c5a      	adds	r2, r3, #1
 80089ec:	2030      	movs	r0, #48	; 0x30
 80089ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089f2:	4422      	add	r2, r4
 80089f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089fc:	3302      	adds	r3, #2
 80089fe:	e7c7      	b.n	8008990 <_printf_common+0x58>
 8008a00:	2301      	movs	r3, #1
 8008a02:	4622      	mov	r2, r4
 8008a04:	4649      	mov	r1, r9
 8008a06:	4638      	mov	r0, r7
 8008a08:	47c0      	blx	r8
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d0e6      	beq.n	80089dc <_printf_common+0xa4>
 8008a0e:	3601      	adds	r6, #1
 8008a10:	e7d9      	b.n	80089c6 <_printf_common+0x8e>
	...

08008a14 <_printf_i>:
 8008a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4691      	mov	r9, r2
 8008a1c:	7e27      	ldrb	r7, [r4, #24]
 8008a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a20:	2f78      	cmp	r7, #120	; 0x78
 8008a22:	4680      	mov	r8, r0
 8008a24:	469a      	mov	sl, r3
 8008a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a2a:	d807      	bhi.n	8008a3c <_printf_i+0x28>
 8008a2c:	2f62      	cmp	r7, #98	; 0x62
 8008a2e:	d80a      	bhi.n	8008a46 <_printf_i+0x32>
 8008a30:	2f00      	cmp	r7, #0
 8008a32:	f000 80d8 	beq.w	8008be6 <_printf_i+0x1d2>
 8008a36:	2f58      	cmp	r7, #88	; 0x58
 8008a38:	f000 80a3 	beq.w	8008b82 <_printf_i+0x16e>
 8008a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a44:	e03a      	b.n	8008abc <_printf_i+0xa8>
 8008a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a4a:	2b15      	cmp	r3, #21
 8008a4c:	d8f6      	bhi.n	8008a3c <_printf_i+0x28>
 8008a4e:	a001      	add	r0, pc, #4	; (adr r0, 8008a54 <_printf_i+0x40>)
 8008a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008ac1 	.word	0x08008ac1
 8008a5c:	08008a3d 	.word	0x08008a3d
 8008a60:	08008a3d 	.word	0x08008a3d
 8008a64:	08008a3d 	.word	0x08008a3d
 8008a68:	08008a3d 	.word	0x08008a3d
 8008a6c:	08008ac1 	.word	0x08008ac1
 8008a70:	08008a3d 	.word	0x08008a3d
 8008a74:	08008a3d 	.word	0x08008a3d
 8008a78:	08008a3d 	.word	0x08008a3d
 8008a7c:	08008a3d 	.word	0x08008a3d
 8008a80:	08008bcd 	.word	0x08008bcd
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008baf 	.word	0x08008baf
 8008a8c:	08008a3d 	.word	0x08008a3d
 8008a90:	08008a3d 	.word	0x08008a3d
 8008a94:	08008bef 	.word	0x08008bef
 8008a98:	08008a3d 	.word	0x08008a3d
 8008a9c:	08008af1 	.word	0x08008af1
 8008aa0:	08008a3d 	.word	0x08008a3d
 8008aa4:	08008a3d 	.word	0x08008a3d
 8008aa8:	08008bb7 	.word	0x08008bb7
 8008aac:	680b      	ldr	r3, [r1, #0]
 8008aae:	1d1a      	adds	r2, r3, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	600a      	str	r2, [r1, #0]
 8008ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0a3      	b.n	8008c08 <_printf_i+0x1f4>
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	6808      	ldr	r0, [r1, #0]
 8008ac4:	062e      	lsls	r6, r5, #24
 8008ac6:	f100 0304 	add.w	r3, r0, #4
 8008aca:	d50a      	bpl.n	8008ae2 <_printf_i+0xce>
 8008acc:	6805      	ldr	r5, [r0, #0]
 8008ace:	600b      	str	r3, [r1, #0]
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	da03      	bge.n	8008adc <_printf_i+0xc8>
 8008ad4:	232d      	movs	r3, #45	; 0x2d
 8008ad6:	426d      	negs	r5, r5
 8008ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008adc:	485e      	ldr	r0, [pc, #376]	; (8008c58 <_printf_i+0x244>)
 8008ade:	230a      	movs	r3, #10
 8008ae0:	e019      	b.n	8008b16 <_printf_i+0x102>
 8008ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ae6:	6805      	ldr	r5, [r0, #0]
 8008ae8:	600b      	str	r3, [r1, #0]
 8008aea:	bf18      	it	ne
 8008aec:	b22d      	sxthne	r5, r5
 8008aee:	e7ef      	b.n	8008ad0 <_printf_i+0xbc>
 8008af0:	680b      	ldr	r3, [r1, #0]
 8008af2:	6825      	ldr	r5, [r4, #0]
 8008af4:	1d18      	adds	r0, r3, #4
 8008af6:	6008      	str	r0, [r1, #0]
 8008af8:	0628      	lsls	r0, r5, #24
 8008afa:	d501      	bpl.n	8008b00 <_printf_i+0xec>
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	e002      	b.n	8008b06 <_printf_i+0xf2>
 8008b00:	0669      	lsls	r1, r5, #25
 8008b02:	d5fb      	bpl.n	8008afc <_printf_i+0xe8>
 8008b04:	881d      	ldrh	r5, [r3, #0]
 8008b06:	4854      	ldr	r0, [pc, #336]	; (8008c58 <_printf_i+0x244>)
 8008b08:	2f6f      	cmp	r7, #111	; 0x6f
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2308      	moveq	r3, #8
 8008b0e:	230a      	movne	r3, #10
 8008b10:	2100      	movs	r1, #0
 8008b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b16:	6866      	ldr	r6, [r4, #4]
 8008b18:	60a6      	str	r6, [r4, #8]
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	bfa2      	ittt	ge
 8008b1e:	6821      	ldrge	r1, [r4, #0]
 8008b20:	f021 0104 	bicge.w	r1, r1, #4
 8008b24:	6021      	strge	r1, [r4, #0]
 8008b26:	b90d      	cbnz	r5, 8008b2c <_printf_i+0x118>
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	d04d      	beq.n	8008bc8 <_printf_i+0x1b4>
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b32:	fb03 5711 	mls	r7, r3, r1, r5
 8008b36:	5dc7      	ldrb	r7, [r0, r7]
 8008b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b3c:	462f      	mov	r7, r5
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	460d      	mov	r5, r1
 8008b42:	d9f4      	bls.n	8008b2e <_printf_i+0x11a>
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d10b      	bne.n	8008b60 <_printf_i+0x14c>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	07df      	lsls	r7, r3, #31
 8008b4c:	d508      	bpl.n	8008b60 <_printf_i+0x14c>
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	6861      	ldr	r1, [r4, #4]
 8008b52:	4299      	cmp	r1, r3
 8008b54:	bfde      	ittt	le
 8008b56:	2330      	movle	r3, #48	; 0x30
 8008b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b60:	1b92      	subs	r2, r2, r6
 8008b62:	6122      	str	r2, [r4, #16]
 8008b64:	f8cd a000 	str.w	sl, [sp]
 8008b68:	464b      	mov	r3, r9
 8008b6a:	aa03      	add	r2, sp, #12
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f7ff fee2 	bl	8008938 <_printf_common>
 8008b74:	3001      	adds	r0, #1
 8008b76:	d14c      	bne.n	8008c12 <_printf_i+0x1fe>
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	b004      	add	sp, #16
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	4835      	ldr	r0, [pc, #212]	; (8008c58 <_printf_i+0x244>)
 8008b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	680e      	ldr	r6, [r1, #0]
 8008b8c:	061f      	lsls	r7, r3, #24
 8008b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b92:	600e      	str	r6, [r1, #0]
 8008b94:	d514      	bpl.n	8008bc0 <_printf_i+0x1ac>
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	bf44      	itt	mi
 8008b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b9e:	6023      	strmi	r3, [r4, #0]
 8008ba0:	b91d      	cbnz	r5, 8008baa <_printf_i+0x196>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f023 0320 	bic.w	r3, r3, #32
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	2310      	movs	r3, #16
 8008bac:	e7b0      	b.n	8008b10 <_printf_i+0xfc>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	f043 0320 	orr.w	r3, r3, #32
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	2378      	movs	r3, #120	; 0x78
 8008bb8:	4828      	ldr	r0, [pc, #160]	; (8008c5c <_printf_i+0x248>)
 8008bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bbe:	e7e3      	b.n	8008b88 <_printf_i+0x174>
 8008bc0:	065e      	lsls	r6, r3, #25
 8008bc2:	bf48      	it	mi
 8008bc4:	b2ad      	uxthmi	r5, r5
 8008bc6:	e7e6      	b.n	8008b96 <_printf_i+0x182>
 8008bc8:	4616      	mov	r6, r2
 8008bca:	e7bb      	b.n	8008b44 <_printf_i+0x130>
 8008bcc:	680b      	ldr	r3, [r1, #0]
 8008bce:	6826      	ldr	r6, [r4, #0]
 8008bd0:	6960      	ldr	r0, [r4, #20]
 8008bd2:	1d1d      	adds	r5, r3, #4
 8008bd4:	600d      	str	r5, [r1, #0]
 8008bd6:	0635      	lsls	r5, r6, #24
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	d501      	bpl.n	8008be0 <_printf_i+0x1cc>
 8008bdc:	6018      	str	r0, [r3, #0]
 8008bde:	e002      	b.n	8008be6 <_printf_i+0x1d2>
 8008be0:	0671      	lsls	r1, r6, #25
 8008be2:	d5fb      	bpl.n	8008bdc <_printf_i+0x1c8>
 8008be4:	8018      	strh	r0, [r3, #0]
 8008be6:	2300      	movs	r3, #0
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	4616      	mov	r6, r2
 8008bec:	e7ba      	b.n	8008b64 <_printf_i+0x150>
 8008bee:	680b      	ldr	r3, [r1, #0]
 8008bf0:	1d1a      	adds	r2, r3, #4
 8008bf2:	600a      	str	r2, [r1, #0]
 8008bf4:	681e      	ldr	r6, [r3, #0]
 8008bf6:	6862      	ldr	r2, [r4, #4]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7f7 faf8 	bl	80001f0 <memchr>
 8008c00:	b108      	cbz	r0, 8008c06 <_printf_i+0x1f2>
 8008c02:	1b80      	subs	r0, r0, r6
 8008c04:	6060      	str	r0, [r4, #4]
 8008c06:	6863      	ldr	r3, [r4, #4]
 8008c08:	6123      	str	r3, [r4, #16]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c10:	e7a8      	b.n	8008b64 <_printf_i+0x150>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	4632      	mov	r2, r6
 8008c16:	4649      	mov	r1, r9
 8008c18:	4640      	mov	r0, r8
 8008c1a:	47d0      	blx	sl
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d0ab      	beq.n	8008b78 <_printf_i+0x164>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	079b      	lsls	r3, r3, #30
 8008c24:	d413      	bmi.n	8008c4e <_printf_i+0x23a>
 8008c26:	68e0      	ldr	r0, [r4, #12]
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	4298      	cmp	r0, r3
 8008c2c:	bfb8      	it	lt
 8008c2e:	4618      	movlt	r0, r3
 8008c30:	e7a4      	b.n	8008b7c <_printf_i+0x168>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4632      	mov	r2, r6
 8008c36:	4649      	mov	r1, r9
 8008c38:	4640      	mov	r0, r8
 8008c3a:	47d0      	blx	sl
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d09b      	beq.n	8008b78 <_printf_i+0x164>
 8008c40:	3501      	adds	r5, #1
 8008c42:	68e3      	ldr	r3, [r4, #12]
 8008c44:	9903      	ldr	r1, [sp, #12]
 8008c46:	1a5b      	subs	r3, r3, r1
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	dcf2      	bgt.n	8008c32 <_printf_i+0x21e>
 8008c4c:	e7eb      	b.n	8008c26 <_printf_i+0x212>
 8008c4e:	2500      	movs	r5, #0
 8008c50:	f104 0619 	add.w	r6, r4, #25
 8008c54:	e7f5      	b.n	8008c42 <_printf_i+0x22e>
 8008c56:	bf00      	nop
 8008c58:	0800b8ae 	.word	0x0800b8ae
 8008c5c:	0800b8bf 	.word	0x0800b8bf

08008c60 <siprintf>:
 8008c60:	b40e      	push	{r1, r2, r3}
 8008c62:	b500      	push	{lr}
 8008c64:	b09c      	sub	sp, #112	; 0x70
 8008c66:	ab1d      	add	r3, sp, #116	; 0x74
 8008c68:	9002      	str	r0, [sp, #8]
 8008c6a:	9006      	str	r0, [sp, #24]
 8008c6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c70:	4809      	ldr	r0, [pc, #36]	; (8008c98 <siprintf+0x38>)
 8008c72:	9107      	str	r1, [sp, #28]
 8008c74:	9104      	str	r1, [sp, #16]
 8008c76:	4909      	ldr	r1, [pc, #36]	; (8008c9c <siprintf+0x3c>)
 8008c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7c:	9105      	str	r1, [sp, #20]
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	a902      	add	r1, sp, #8
 8008c84:	f001 fb24 	bl	800a2d0 <_svfiprintf_r>
 8008c88:	9b02      	ldr	r3, [sp, #8]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	b01c      	add	sp, #112	; 0x70
 8008c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c94:	b003      	add	sp, #12
 8008c96:	4770      	bx	lr
 8008c98:	20000010 	.word	0x20000010
 8008c9c:	ffff0208 	.word	0xffff0208

08008ca0 <quorem>:
 8008ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	6903      	ldr	r3, [r0, #16]
 8008ca6:	690c      	ldr	r4, [r1, #16]
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	4607      	mov	r7, r0
 8008cac:	f2c0 8081 	blt.w	8008db2 <quorem+0x112>
 8008cb0:	3c01      	subs	r4, #1
 8008cb2:	f101 0814 	add.w	r8, r1, #20
 8008cb6:	f100 0514 	add.w	r5, r0, #20
 8008cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cd8:	d331      	bcc.n	8008d3e <quorem+0x9e>
 8008cda:	f04f 0e00 	mov.w	lr, #0
 8008cde:	4640      	mov	r0, r8
 8008ce0:	46ac      	mov	ip, r5
 8008ce2:	46f2      	mov	sl, lr
 8008ce4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ce8:	b293      	uxth	r3, r2
 8008cea:	fb06 e303 	mla	r3, r6, r3, lr
 8008cee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	ebaa 0303 	sub.w	r3, sl, r3
 8008cf8:	0c12      	lsrs	r2, r2, #16
 8008cfa:	f8dc a000 	ldr.w	sl, [ip]
 8008cfe:	fb06 e202 	mla	r2, r6, r2, lr
 8008d02:	fa13 f38a 	uxtah	r3, r3, sl
 8008d06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d0a:	fa1f fa82 	uxth.w	sl, r2
 8008d0e:	f8dc 2000 	ldr.w	r2, [ip]
 8008d12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008d16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d20:	4581      	cmp	r9, r0
 8008d22:	f84c 3b04 	str.w	r3, [ip], #4
 8008d26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d2a:	d2db      	bcs.n	8008ce4 <quorem+0x44>
 8008d2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d30:	b92b      	cbnz	r3, 8008d3e <quorem+0x9e>
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	429d      	cmp	r5, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	d32e      	bcc.n	8008d9a <quorem+0xfa>
 8008d3c:	613c      	str	r4, [r7, #16]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f001 f8b0 	bl	8009ea4 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	db24      	blt.n	8008d92 <quorem+0xf2>
 8008d48:	3601      	adds	r6, #1
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f04f 0c00 	mov.w	ip, #0
 8008d50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d54:	f8d0 e000 	ldr.w	lr, [r0]
 8008d58:	b293      	uxth	r3, r2
 8008d5a:	ebac 0303 	sub.w	r3, ip, r3
 8008d5e:	0c12      	lsrs	r2, r2, #16
 8008d60:	fa13 f38e 	uxtah	r3, r3, lr
 8008d64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d72:	45c1      	cmp	r9, r8
 8008d74:	f840 3b04 	str.w	r3, [r0], #4
 8008d78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d7c:	d2e8      	bcs.n	8008d50 <quorem+0xb0>
 8008d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d86:	b922      	cbnz	r2, 8008d92 <quorem+0xf2>
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	d30a      	bcc.n	8008da6 <quorem+0x106>
 8008d90:	613c      	str	r4, [r7, #16]
 8008d92:	4630      	mov	r0, r6
 8008d94:	b003      	add	sp, #12
 8008d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	d1cc      	bne.n	8008d3c <quorem+0x9c>
 8008da2:	3c01      	subs	r4, #1
 8008da4:	e7c7      	b.n	8008d36 <quorem+0x96>
 8008da6:	6812      	ldr	r2, [r2, #0]
 8008da8:	3b04      	subs	r3, #4
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	d1f0      	bne.n	8008d90 <quorem+0xf0>
 8008dae:	3c01      	subs	r4, #1
 8008db0:	e7eb      	b.n	8008d8a <quorem+0xea>
 8008db2:	2000      	movs	r0, #0
 8008db4:	e7ee      	b.n	8008d94 <quorem+0xf4>
	...

08008db8 <_dtoa_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	ed2d 8b02 	vpush	{d8}
 8008dc0:	ec57 6b10 	vmov	r6, r7, d0
 8008dc4:	b095      	sub	sp, #84	; 0x54
 8008dc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dd8:	b975      	cbnz	r5, 8008df8 <_dtoa_r+0x40>
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f000 fddc 	bl	8009998 <malloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	6260      	str	r0, [r4, #36]	; 0x24
 8008de4:	b920      	cbnz	r0, 8008df0 <_dtoa_r+0x38>
 8008de6:	4bb2      	ldr	r3, [pc, #712]	; (80090b0 <_dtoa_r+0x2f8>)
 8008de8:	21ea      	movs	r1, #234	; 0xea
 8008dea:	48b2      	ldr	r0, [pc, #712]	; (80090b4 <_dtoa_r+0x2fc>)
 8008dec:	f001 fb80 	bl	800a4f0 <__assert_func>
 8008df0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008df4:	6005      	str	r5, [r0, #0]
 8008df6:	60c5      	str	r5, [r0, #12]
 8008df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfa:	6819      	ldr	r1, [r3, #0]
 8008dfc:	b151      	cbz	r1, 8008e14 <_dtoa_r+0x5c>
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	604a      	str	r2, [r1, #4]
 8008e02:	2301      	movs	r3, #1
 8008e04:	4093      	lsls	r3, r2
 8008e06:	608b      	str	r3, [r1, #8]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fe0d 	bl	8009a28 <_Bfree>
 8008e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	1e3b      	subs	r3, r7, #0
 8008e16:	bfb9      	ittee	lt
 8008e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e1c:	9303      	strlt	r3, [sp, #12]
 8008e1e:	2300      	movge	r3, #0
 8008e20:	f8c8 3000 	strge.w	r3, [r8]
 8008e24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008e28:	4ba3      	ldr	r3, [pc, #652]	; (80090b8 <_dtoa_r+0x300>)
 8008e2a:	bfbc      	itt	lt
 8008e2c:	2201      	movlt	r2, #1
 8008e2e:	f8c8 2000 	strlt.w	r2, [r8]
 8008e32:	ea33 0309 	bics.w	r3, r3, r9
 8008e36:	d11b      	bne.n	8008e70 <_dtoa_r+0xb8>
 8008e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e44:	4333      	orrs	r3, r6
 8008e46:	f000 857a 	beq.w	800993e <_dtoa_r+0xb86>
 8008e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e4c:	b963      	cbnz	r3, 8008e68 <_dtoa_r+0xb0>
 8008e4e:	4b9b      	ldr	r3, [pc, #620]	; (80090bc <_dtoa_r+0x304>)
 8008e50:	e024      	b.n	8008e9c <_dtoa_r+0xe4>
 8008e52:	4b9b      	ldr	r3, [pc, #620]	; (80090c0 <_dtoa_r+0x308>)
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	b015      	add	sp, #84	; 0x54
 8008e60:	ecbd 8b02 	vpop	{d8}
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	4b94      	ldr	r3, [pc, #592]	; (80090bc <_dtoa_r+0x304>)
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	3303      	adds	r3, #3
 8008e6e:	e7f3      	b.n	8008e58 <_dtoa_r+0xa0>
 8008e70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e74:	2200      	movs	r2, #0
 8008e76:	ec51 0b17 	vmov	r0, r1, d7
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008e80:	f7f7 fe2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e84:	4680      	mov	r8, r0
 8008e86:	b158      	cbz	r0, 8008ea0 <_dtoa_r+0xe8>
 8008e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 8551 	beq.w	8009938 <_dtoa_r+0xb80>
 8008e96:	488b      	ldr	r0, [pc, #556]	; (80090c4 <_dtoa_r+0x30c>)
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	1e43      	subs	r3, r0, #1
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	e7dd      	b.n	8008e5c <_dtoa_r+0xa4>
 8008ea0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008ea4:	aa12      	add	r2, sp, #72	; 0x48
 8008ea6:	a913      	add	r1, sp, #76	; 0x4c
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 f89f 	bl	8009fec <__d2b>
 8008eae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008eb2:	4683      	mov	fp, r0
 8008eb4:	2d00      	cmp	r5, #0
 8008eb6:	d07c      	beq.n	8008fb2 <_dtoa_r+0x1fa>
 8008eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008ec6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008eca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ed2:	4b7d      	ldr	r3, [pc, #500]	; (80090c8 <_dtoa_r+0x310>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	f7f7 f9dd 	bl	8000298 <__aeabi_dsub>
 8008ede:	a36e      	add	r3, pc, #440	; (adr r3, 8009098 <_dtoa_r+0x2e0>)
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	a36d      	add	r3, pc, #436	; (adr r3, 80090a0 <_dtoa_r+0x2e8>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 f9d5 	bl	800029c <__adddf3>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	f7f7 fb1c 	bl	8000534 <__aeabi_i2d>
 8008efc:	a36a      	add	r3, pc, #424	; (adr r3, 80090a8 <_dtoa_r+0x2f0>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 fb81 	bl	8000608 <__aeabi_dmul>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	f7f7 f9c5 	bl	800029c <__adddf3>
 8008f12:	4606      	mov	r6, r0
 8008f14:	460f      	mov	r7, r1
 8008f16:	f7f7 fe27 	bl	8000b68 <__aeabi_d2iz>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 fde2 	bl	8000aec <__aeabi_dcmplt>
 8008f28:	b148      	cbz	r0, 8008f3e <_dtoa_r+0x186>
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	f7f7 fb02 	bl	8000534 <__aeabi_i2d>
 8008f30:	4632      	mov	r2, r6
 8008f32:	463b      	mov	r3, r7
 8008f34:	f7f7 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f38:	b908      	cbnz	r0, 8008f3e <_dtoa_r+0x186>
 8008f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f3e:	f1ba 0f16 	cmp.w	sl, #22
 8008f42:	d854      	bhi.n	8008fee <_dtoa_r+0x236>
 8008f44:	4b61      	ldr	r3, [pc, #388]	; (80090cc <_dtoa_r+0x314>)
 8008f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f52:	f7f7 fdcb 	bl	8000aec <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d04b      	beq.n	8008ff2 <_dtoa_r+0x23a>
 8008f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f5e:	2300      	movs	r3, #0
 8008f60:	930e      	str	r3, [sp, #56]	; 0x38
 8008f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f64:	1b5d      	subs	r5, r3, r5
 8008f66:	1e6b      	subs	r3, r5, #1
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	bf43      	ittte	mi
 8008f6c:	2300      	movmi	r3, #0
 8008f6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008f72:	9304      	strmi	r3, [sp, #16]
 8008f74:	f04f 0800 	movpl.w	r8, #0
 8008f78:	f1ba 0f00 	cmp.w	sl, #0
 8008f7c:	db3b      	blt.n	8008ff6 <_dtoa_r+0x23e>
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008f84:	4453      	add	r3, sl
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9306      	str	r3, [sp, #24]
 8008f8c:	9b05      	ldr	r3, [sp, #20]
 8008f8e:	2b09      	cmp	r3, #9
 8008f90:	d869      	bhi.n	8009066 <_dtoa_r+0x2ae>
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	bfc4      	itt	gt
 8008f96:	3b04      	subgt	r3, #4
 8008f98:	9305      	strgt	r3, [sp, #20]
 8008f9a:	9b05      	ldr	r3, [sp, #20]
 8008f9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008fa0:	bfcc      	ite	gt
 8008fa2:	2500      	movgt	r5, #0
 8008fa4:	2501      	movle	r5, #1
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d869      	bhi.n	800907e <_dtoa_r+0x2c6>
 8008faa:	e8df f003 	tbb	[pc, r3]
 8008fae:	4e2c      	.short	0x4e2c
 8008fb0:	5a4c      	.short	0x5a4c
 8008fb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008fb6:	441d      	add	r5, r3
 8008fb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	bfc1      	itttt	gt
 8008fc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008fcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008fd0:	bfda      	itte	le
 8008fd2:	f1c3 0320 	rsble	r3, r3, #32
 8008fd6:	fa06 f003 	lslle.w	r0, r6, r3
 8008fda:	4318      	orrgt	r0, r3
 8008fdc:	f7f7 fa9a 	bl	8000514 <__aeabi_ui2d>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008fe8:	3d01      	subs	r5, #1
 8008fea:	9310      	str	r3, [sp, #64]	; 0x40
 8008fec:	e771      	b.n	8008ed2 <_dtoa_r+0x11a>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e7b6      	b.n	8008f60 <_dtoa_r+0x1a8>
 8008ff2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ff4:	e7b5      	b.n	8008f62 <_dtoa_r+0x1aa>
 8008ff6:	f1ca 0300 	rsb	r3, sl, #0
 8008ffa:	9306      	str	r3, [sp, #24]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	eba8 080a 	sub.w	r8, r8, sl
 8009002:	930d      	str	r3, [sp, #52]	; 0x34
 8009004:	e7c2      	b.n	8008f8c <_dtoa_r+0x1d4>
 8009006:	2300      	movs	r3, #0
 8009008:	9308      	str	r3, [sp, #32]
 800900a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc39      	bgt.n	8009084 <_dtoa_r+0x2cc>
 8009010:	f04f 0901 	mov.w	r9, #1
 8009014:	f8cd 9004 	str.w	r9, [sp, #4]
 8009018:	464b      	mov	r3, r9
 800901a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800901e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009020:	2200      	movs	r2, #0
 8009022:	6042      	str	r2, [r0, #4]
 8009024:	2204      	movs	r2, #4
 8009026:	f102 0614 	add.w	r6, r2, #20
 800902a:	429e      	cmp	r6, r3
 800902c:	6841      	ldr	r1, [r0, #4]
 800902e:	d92f      	bls.n	8009090 <_dtoa_r+0x2d8>
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fcb9 	bl	80099a8 <_Balloc>
 8009036:	9000      	str	r0, [sp, #0]
 8009038:	2800      	cmp	r0, #0
 800903a:	d14b      	bne.n	80090d4 <_dtoa_r+0x31c>
 800903c:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <_dtoa_r+0x318>)
 800903e:	4602      	mov	r2, r0
 8009040:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009044:	e6d1      	b.n	8008dea <_dtoa_r+0x32>
 8009046:	2301      	movs	r3, #1
 8009048:	e7de      	b.n	8009008 <_dtoa_r+0x250>
 800904a:	2300      	movs	r3, #0
 800904c:	9308      	str	r3, [sp, #32]
 800904e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009050:	eb0a 0903 	add.w	r9, sl, r3
 8009054:	f109 0301 	add.w	r3, r9, #1
 8009058:	2b01      	cmp	r3, #1
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	bfb8      	it	lt
 800905e:	2301      	movlt	r3, #1
 8009060:	e7dd      	b.n	800901e <_dtoa_r+0x266>
 8009062:	2301      	movs	r3, #1
 8009064:	e7f2      	b.n	800904c <_dtoa_r+0x294>
 8009066:	2501      	movs	r5, #1
 8009068:	2300      	movs	r3, #0
 800906a:	9305      	str	r3, [sp, #20]
 800906c:	9508      	str	r5, [sp, #32]
 800906e:	f04f 39ff 	mov.w	r9, #4294967295
 8009072:	2200      	movs	r2, #0
 8009074:	f8cd 9004 	str.w	r9, [sp, #4]
 8009078:	2312      	movs	r3, #18
 800907a:	9209      	str	r2, [sp, #36]	; 0x24
 800907c:	e7cf      	b.n	800901e <_dtoa_r+0x266>
 800907e:	2301      	movs	r3, #1
 8009080:	9308      	str	r3, [sp, #32]
 8009082:	e7f4      	b.n	800906e <_dtoa_r+0x2b6>
 8009084:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009088:	f8cd 9004 	str.w	r9, [sp, #4]
 800908c:	464b      	mov	r3, r9
 800908e:	e7c6      	b.n	800901e <_dtoa_r+0x266>
 8009090:	3101      	adds	r1, #1
 8009092:	6041      	str	r1, [r0, #4]
 8009094:	0052      	lsls	r2, r2, #1
 8009096:	e7c6      	b.n	8009026 <_dtoa_r+0x26e>
 8009098:	636f4361 	.word	0x636f4361
 800909c:	3fd287a7 	.word	0x3fd287a7
 80090a0:	8b60c8b3 	.word	0x8b60c8b3
 80090a4:	3fc68a28 	.word	0x3fc68a28
 80090a8:	509f79fb 	.word	0x509f79fb
 80090ac:	3fd34413 	.word	0x3fd34413
 80090b0:	0800b8dd 	.word	0x0800b8dd
 80090b4:	0800b8f4 	.word	0x0800b8f4
 80090b8:	7ff00000 	.word	0x7ff00000
 80090bc:	0800b8d9 	.word	0x0800b8d9
 80090c0:	0800b8d0 	.word	0x0800b8d0
 80090c4:	0800b8ad 	.word	0x0800b8ad
 80090c8:	3ff80000 	.word	0x3ff80000
 80090cc:	0800b9f0 	.word	0x0800b9f0
 80090d0:	0800b953 	.word	0x0800b953
 80090d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d6:	9a00      	ldr	r2, [sp, #0]
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	2b0e      	cmp	r3, #14
 80090de:	f200 80ad 	bhi.w	800923c <_dtoa_r+0x484>
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	f000 80aa 	beq.w	800923c <_dtoa_r+0x484>
 80090e8:	f1ba 0f00 	cmp.w	sl, #0
 80090ec:	dd36      	ble.n	800915c <_dtoa_r+0x3a4>
 80090ee:	4ac3      	ldr	r2, [pc, #780]	; (80093fc <_dtoa_r+0x644>)
 80090f0:	f00a 030f 	and.w	r3, sl, #15
 80090f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090f8:	ed93 7b00 	vldr	d7, [r3]
 80090fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009100:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009104:	eeb0 8a47 	vmov.f32	s16, s14
 8009108:	eef0 8a67 	vmov.f32	s17, s15
 800910c:	d016      	beq.n	800913c <_dtoa_r+0x384>
 800910e:	4bbc      	ldr	r3, [pc, #752]	; (8009400 <_dtoa_r+0x648>)
 8009110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009118:	f7f7 fba0 	bl	800085c <__aeabi_ddiv>
 800911c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009120:	f007 070f 	and.w	r7, r7, #15
 8009124:	2503      	movs	r5, #3
 8009126:	4eb6      	ldr	r6, [pc, #728]	; (8009400 <_dtoa_r+0x648>)
 8009128:	b957      	cbnz	r7, 8009140 <_dtoa_r+0x388>
 800912a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912e:	ec53 2b18 	vmov	r2, r3, d8
 8009132:	f7f7 fb93 	bl	800085c <__aeabi_ddiv>
 8009136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800913a:	e029      	b.n	8009190 <_dtoa_r+0x3d8>
 800913c:	2502      	movs	r5, #2
 800913e:	e7f2      	b.n	8009126 <_dtoa_r+0x36e>
 8009140:	07f9      	lsls	r1, r7, #31
 8009142:	d508      	bpl.n	8009156 <_dtoa_r+0x39e>
 8009144:	ec51 0b18 	vmov	r0, r1, d8
 8009148:	e9d6 2300 	ldrd	r2, r3, [r6]
 800914c:	f7f7 fa5c 	bl	8000608 <__aeabi_dmul>
 8009150:	ec41 0b18 	vmov	d8, r0, r1
 8009154:	3501      	adds	r5, #1
 8009156:	107f      	asrs	r7, r7, #1
 8009158:	3608      	adds	r6, #8
 800915a:	e7e5      	b.n	8009128 <_dtoa_r+0x370>
 800915c:	f000 80a6 	beq.w	80092ac <_dtoa_r+0x4f4>
 8009160:	f1ca 0600 	rsb	r6, sl, #0
 8009164:	4ba5      	ldr	r3, [pc, #660]	; (80093fc <_dtoa_r+0x644>)
 8009166:	4fa6      	ldr	r7, [pc, #664]	; (8009400 <_dtoa_r+0x648>)
 8009168:	f006 020f 	and.w	r2, r6, #15
 800916c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009178:	f7f7 fa46 	bl	8000608 <__aeabi_dmul>
 800917c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009180:	1136      	asrs	r6, r6, #4
 8009182:	2300      	movs	r3, #0
 8009184:	2502      	movs	r5, #2
 8009186:	2e00      	cmp	r6, #0
 8009188:	f040 8085 	bne.w	8009296 <_dtoa_r+0x4de>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1d2      	bne.n	8009136 <_dtoa_r+0x37e>
 8009190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 808c 	beq.w	80092b0 <_dtoa_r+0x4f8>
 8009198:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800919c:	4b99      	ldr	r3, [pc, #612]	; (8009404 <_dtoa_r+0x64c>)
 800919e:	2200      	movs	r2, #0
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 fca2 	bl	8000aec <__aeabi_dcmplt>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f000 8081 	beq.w	80092b0 <_dtoa_r+0x4f8>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d07d      	beq.n	80092b0 <_dtoa_r+0x4f8>
 80091b4:	f1b9 0f00 	cmp.w	r9, #0
 80091b8:	dd3c      	ble.n	8009234 <_dtoa_r+0x47c>
 80091ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091be:	9307      	str	r3, [sp, #28]
 80091c0:	2200      	movs	r2, #0
 80091c2:	4b91      	ldr	r3, [pc, #580]	; (8009408 <_dtoa_r+0x650>)
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f7f7 fa1e 	bl	8000608 <__aeabi_dmul>
 80091cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d0:	3501      	adds	r5, #1
 80091d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80091d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091da:	4628      	mov	r0, r5
 80091dc:	f7f7 f9aa 	bl	8000534 <__aeabi_i2d>
 80091e0:	4632      	mov	r2, r6
 80091e2:	463b      	mov	r3, r7
 80091e4:	f7f7 fa10 	bl	8000608 <__aeabi_dmul>
 80091e8:	4b88      	ldr	r3, [pc, #544]	; (800940c <_dtoa_r+0x654>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 f856 	bl	800029c <__adddf3>
 80091f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80091f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d15c      	bne.n	80092ba <_dtoa_r+0x502>
 8009200:	4b83      	ldr	r3, [pc, #524]	; (8009410 <_dtoa_r+0x658>)
 8009202:	2200      	movs	r2, #0
 8009204:	4630      	mov	r0, r6
 8009206:	4639      	mov	r1, r7
 8009208:	f7f7 f846 	bl	8000298 <__aeabi_dsub>
 800920c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009210:	4606      	mov	r6, r0
 8009212:	460f      	mov	r7, r1
 8009214:	f7f7 fc88 	bl	8000b28 <__aeabi_dcmpgt>
 8009218:	2800      	cmp	r0, #0
 800921a:	f040 8296 	bne.w	800974a <_dtoa_r+0x992>
 800921e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009222:	4630      	mov	r0, r6
 8009224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009228:	4639      	mov	r1, r7
 800922a:	f7f7 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	f040 8288 	bne.w	8009744 <_dtoa_r+0x98c>
 8009234:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009238:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800923c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800923e:	2b00      	cmp	r3, #0
 8009240:	f2c0 8158 	blt.w	80094f4 <_dtoa_r+0x73c>
 8009244:	f1ba 0f0e 	cmp.w	sl, #14
 8009248:	f300 8154 	bgt.w	80094f4 <_dtoa_r+0x73c>
 800924c:	4b6b      	ldr	r3, [pc, #428]	; (80093fc <_dtoa_r+0x644>)
 800924e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009252:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	f280 80e3 	bge.w	8009424 <_dtoa_r+0x66c>
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f300 80df 	bgt.w	8009424 <_dtoa_r+0x66c>
 8009266:	f040 826d 	bne.w	8009744 <_dtoa_r+0x98c>
 800926a:	4b69      	ldr	r3, [pc, #420]	; (8009410 <_dtoa_r+0x658>)
 800926c:	2200      	movs	r2, #0
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f7 f9c9 	bl	8000608 <__aeabi_dmul>
 8009276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800927a:	f7f7 fc4b 	bl	8000b14 <__aeabi_dcmpge>
 800927e:	9e01      	ldr	r6, [sp, #4]
 8009280:	4637      	mov	r7, r6
 8009282:	2800      	cmp	r0, #0
 8009284:	f040 8243 	bne.w	800970e <_dtoa_r+0x956>
 8009288:	9d00      	ldr	r5, [sp, #0]
 800928a:	2331      	movs	r3, #49	; 0x31
 800928c:	f805 3b01 	strb.w	r3, [r5], #1
 8009290:	f10a 0a01 	add.w	sl, sl, #1
 8009294:	e23f      	b.n	8009716 <_dtoa_r+0x95e>
 8009296:	07f2      	lsls	r2, r6, #31
 8009298:	d505      	bpl.n	80092a6 <_dtoa_r+0x4ee>
 800929a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929e:	f7f7 f9b3 	bl	8000608 <__aeabi_dmul>
 80092a2:	3501      	adds	r5, #1
 80092a4:	2301      	movs	r3, #1
 80092a6:	1076      	asrs	r6, r6, #1
 80092a8:	3708      	adds	r7, #8
 80092aa:	e76c      	b.n	8009186 <_dtoa_r+0x3ce>
 80092ac:	2502      	movs	r5, #2
 80092ae:	e76f      	b.n	8009190 <_dtoa_r+0x3d8>
 80092b0:	9b01      	ldr	r3, [sp, #4]
 80092b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80092b6:	930c      	str	r3, [sp, #48]	; 0x30
 80092b8:	e78d      	b.n	80091d6 <_dtoa_r+0x41e>
 80092ba:	9900      	ldr	r1, [sp, #0]
 80092bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092c0:	4b4e      	ldr	r3, [pc, #312]	; (80093fc <_dtoa_r+0x644>)
 80092c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092c6:	4401      	add	r1, r0
 80092c8:	9102      	str	r1, [sp, #8]
 80092ca:	9908      	ldr	r1, [sp, #32]
 80092cc:	eeb0 8a47 	vmov.f32	s16, s14
 80092d0:	eef0 8a67 	vmov.f32	s17, s15
 80092d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092dc:	2900      	cmp	r1, #0
 80092de:	d045      	beq.n	800936c <_dtoa_r+0x5b4>
 80092e0:	494c      	ldr	r1, [pc, #304]	; (8009414 <_dtoa_r+0x65c>)
 80092e2:	2000      	movs	r0, #0
 80092e4:	f7f7 faba 	bl	800085c <__aeabi_ddiv>
 80092e8:	ec53 2b18 	vmov	r2, r3, d8
 80092ec:	f7f6 ffd4 	bl	8000298 <__aeabi_dsub>
 80092f0:	9d00      	ldr	r5, [sp, #0]
 80092f2:	ec41 0b18 	vmov	d8, r0, r1
 80092f6:	4639      	mov	r1, r7
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7f7 fc35 	bl	8000b68 <__aeabi_d2iz>
 80092fe:	900c      	str	r0, [sp, #48]	; 0x30
 8009300:	f7f7 f918 	bl	8000534 <__aeabi_i2d>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ffc4 	bl	8000298 <__aeabi_dsub>
 8009310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009312:	3330      	adds	r3, #48	; 0x30
 8009314:	f805 3b01 	strb.w	r3, [r5], #1
 8009318:	ec53 2b18 	vmov	r2, r3, d8
 800931c:	4606      	mov	r6, r0
 800931e:	460f      	mov	r7, r1
 8009320:	f7f7 fbe4 	bl	8000aec <__aeabi_dcmplt>
 8009324:	2800      	cmp	r0, #0
 8009326:	d165      	bne.n	80093f4 <_dtoa_r+0x63c>
 8009328:	4632      	mov	r2, r6
 800932a:	463b      	mov	r3, r7
 800932c:	4935      	ldr	r1, [pc, #212]	; (8009404 <_dtoa_r+0x64c>)
 800932e:	2000      	movs	r0, #0
 8009330:	f7f6 ffb2 	bl	8000298 <__aeabi_dsub>
 8009334:	ec53 2b18 	vmov	r2, r3, d8
 8009338:	f7f7 fbd8 	bl	8000aec <__aeabi_dcmplt>
 800933c:	2800      	cmp	r0, #0
 800933e:	f040 80b9 	bne.w	80094b4 <_dtoa_r+0x6fc>
 8009342:	9b02      	ldr	r3, [sp, #8]
 8009344:	429d      	cmp	r5, r3
 8009346:	f43f af75 	beq.w	8009234 <_dtoa_r+0x47c>
 800934a:	4b2f      	ldr	r3, [pc, #188]	; (8009408 <_dtoa_r+0x650>)
 800934c:	ec51 0b18 	vmov	r0, r1, d8
 8009350:	2200      	movs	r2, #0
 8009352:	f7f7 f959 	bl	8000608 <__aeabi_dmul>
 8009356:	4b2c      	ldr	r3, [pc, #176]	; (8009408 <_dtoa_r+0x650>)
 8009358:	ec41 0b18 	vmov	d8, r0, r1
 800935c:	2200      	movs	r2, #0
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f7 f951 	bl	8000608 <__aeabi_dmul>
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	e7c4      	b.n	80092f6 <_dtoa_r+0x53e>
 800936c:	ec51 0b17 	vmov	r0, r1, d7
 8009370:	f7f7 f94a 	bl	8000608 <__aeabi_dmul>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	9d00      	ldr	r5, [sp, #0]
 8009378:	930c      	str	r3, [sp, #48]	; 0x30
 800937a:	ec41 0b18 	vmov	d8, r0, r1
 800937e:	4639      	mov	r1, r7
 8009380:	4630      	mov	r0, r6
 8009382:	f7f7 fbf1 	bl	8000b68 <__aeabi_d2iz>
 8009386:	9011      	str	r0, [sp, #68]	; 0x44
 8009388:	f7f7 f8d4 	bl	8000534 <__aeabi_i2d>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4630      	mov	r0, r6
 8009392:	4639      	mov	r1, r7
 8009394:	f7f6 ff80 	bl	8000298 <__aeabi_dsub>
 8009398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800939a:	3330      	adds	r3, #48	; 0x30
 800939c:	f805 3b01 	strb.w	r3, [r5], #1
 80093a0:	9b02      	ldr	r3, [sp, #8]
 80093a2:	429d      	cmp	r5, r3
 80093a4:	4606      	mov	r6, r0
 80093a6:	460f      	mov	r7, r1
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	d134      	bne.n	8009418 <_dtoa_r+0x660>
 80093ae:	4b19      	ldr	r3, [pc, #100]	; (8009414 <_dtoa_r+0x65c>)
 80093b0:	ec51 0b18 	vmov	r0, r1, d8
 80093b4:	f7f6 ff72 	bl	800029c <__adddf3>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fbb2 	bl	8000b28 <__aeabi_dcmpgt>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d175      	bne.n	80094b4 <_dtoa_r+0x6fc>
 80093c8:	ec53 2b18 	vmov	r2, r3, d8
 80093cc:	4911      	ldr	r1, [pc, #68]	; (8009414 <_dtoa_r+0x65c>)
 80093ce:	2000      	movs	r0, #0
 80093d0:	f7f6 ff62 	bl	8000298 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 fb86 	bl	8000aec <__aeabi_dcmplt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	f43f af27 	beq.w	8009234 <_dtoa_r+0x47c>
 80093e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093e8:	1e6b      	subs	r3, r5, #1
 80093ea:	930c      	str	r3, [sp, #48]	; 0x30
 80093ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093f0:	2b30      	cmp	r3, #48	; 0x30
 80093f2:	d0f8      	beq.n	80093e6 <_dtoa_r+0x62e>
 80093f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80093f8:	e04a      	b.n	8009490 <_dtoa_r+0x6d8>
 80093fa:	bf00      	nop
 80093fc:	0800b9f0 	.word	0x0800b9f0
 8009400:	0800b9c8 	.word	0x0800b9c8
 8009404:	3ff00000 	.word	0x3ff00000
 8009408:	40240000 	.word	0x40240000
 800940c:	401c0000 	.word	0x401c0000
 8009410:	40140000 	.word	0x40140000
 8009414:	3fe00000 	.word	0x3fe00000
 8009418:	4baf      	ldr	r3, [pc, #700]	; (80096d8 <_dtoa_r+0x920>)
 800941a:	f7f7 f8f5 	bl	8000608 <__aeabi_dmul>
 800941e:	4606      	mov	r6, r0
 8009420:	460f      	mov	r7, r1
 8009422:	e7ac      	b.n	800937e <_dtoa_r+0x5c6>
 8009424:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009428:	9d00      	ldr	r5, [sp, #0]
 800942a:	4642      	mov	r2, r8
 800942c:	464b      	mov	r3, r9
 800942e:	4630      	mov	r0, r6
 8009430:	4639      	mov	r1, r7
 8009432:	f7f7 fa13 	bl	800085c <__aeabi_ddiv>
 8009436:	f7f7 fb97 	bl	8000b68 <__aeabi_d2iz>
 800943a:	9002      	str	r0, [sp, #8]
 800943c:	f7f7 f87a 	bl	8000534 <__aeabi_i2d>
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	f7f7 f8e0 	bl	8000608 <__aeabi_dmul>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4630      	mov	r0, r6
 800944e:	4639      	mov	r1, r7
 8009450:	f7f6 ff22 	bl	8000298 <__aeabi_dsub>
 8009454:	9e02      	ldr	r6, [sp, #8]
 8009456:	9f01      	ldr	r7, [sp, #4]
 8009458:	3630      	adds	r6, #48	; 0x30
 800945a:	f805 6b01 	strb.w	r6, [r5], #1
 800945e:	9e00      	ldr	r6, [sp, #0]
 8009460:	1bae      	subs	r6, r5, r6
 8009462:	42b7      	cmp	r7, r6
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	d137      	bne.n	80094da <_dtoa_r+0x722>
 800946a:	f7f6 ff17 	bl	800029c <__adddf3>
 800946e:	4642      	mov	r2, r8
 8009470:	464b      	mov	r3, r9
 8009472:	4606      	mov	r6, r0
 8009474:	460f      	mov	r7, r1
 8009476:	f7f7 fb57 	bl	8000b28 <__aeabi_dcmpgt>
 800947a:	b9c8      	cbnz	r0, 80094b0 <_dtoa_r+0x6f8>
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	4630      	mov	r0, r6
 8009482:	4639      	mov	r1, r7
 8009484:	f7f7 fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 8009488:	b110      	cbz	r0, 8009490 <_dtoa_r+0x6d8>
 800948a:	9b02      	ldr	r3, [sp, #8]
 800948c:	07d9      	lsls	r1, r3, #31
 800948e:	d40f      	bmi.n	80094b0 <_dtoa_r+0x6f8>
 8009490:	4620      	mov	r0, r4
 8009492:	4659      	mov	r1, fp
 8009494:	f000 fac8 	bl	8009a28 <_Bfree>
 8009498:	2300      	movs	r3, #0
 800949a:	702b      	strb	r3, [r5, #0]
 800949c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800949e:	f10a 0001 	add.w	r0, sl, #1
 80094a2:	6018      	str	r0, [r3, #0]
 80094a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f43f acd8 	beq.w	8008e5c <_dtoa_r+0xa4>
 80094ac:	601d      	str	r5, [r3, #0]
 80094ae:	e4d5      	b.n	8008e5c <_dtoa_r+0xa4>
 80094b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80094b4:	462b      	mov	r3, r5
 80094b6:	461d      	mov	r5, r3
 80094b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094bc:	2a39      	cmp	r2, #57	; 0x39
 80094be:	d108      	bne.n	80094d2 <_dtoa_r+0x71a>
 80094c0:	9a00      	ldr	r2, [sp, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d1f7      	bne.n	80094b6 <_dtoa_r+0x6fe>
 80094c6:	9a07      	ldr	r2, [sp, #28]
 80094c8:	9900      	ldr	r1, [sp, #0]
 80094ca:	3201      	adds	r2, #1
 80094cc:	9207      	str	r2, [sp, #28]
 80094ce:	2230      	movs	r2, #48	; 0x30
 80094d0:	700a      	strb	r2, [r1, #0]
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	3201      	adds	r2, #1
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	e78c      	b.n	80093f4 <_dtoa_r+0x63c>
 80094da:	4b7f      	ldr	r3, [pc, #508]	; (80096d8 <_dtoa_r+0x920>)
 80094dc:	2200      	movs	r2, #0
 80094de:	f7f7 f893 	bl	8000608 <__aeabi_dmul>
 80094e2:	2200      	movs	r2, #0
 80094e4:	2300      	movs	r3, #0
 80094e6:	4606      	mov	r6, r0
 80094e8:	460f      	mov	r7, r1
 80094ea:	f7f7 faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d09b      	beq.n	800942a <_dtoa_r+0x672>
 80094f2:	e7cd      	b.n	8009490 <_dtoa_r+0x6d8>
 80094f4:	9a08      	ldr	r2, [sp, #32]
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	f000 80c4 	beq.w	8009684 <_dtoa_r+0x8cc>
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	2a01      	cmp	r2, #1
 8009500:	f300 80a8 	bgt.w	8009654 <_dtoa_r+0x89c>
 8009504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009506:	2a00      	cmp	r2, #0
 8009508:	f000 80a0 	beq.w	800964c <_dtoa_r+0x894>
 800950c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009510:	9e06      	ldr	r6, [sp, #24]
 8009512:	4645      	mov	r5, r8
 8009514:	9a04      	ldr	r2, [sp, #16]
 8009516:	2101      	movs	r1, #1
 8009518:	441a      	add	r2, r3
 800951a:	4620      	mov	r0, r4
 800951c:	4498      	add	r8, r3
 800951e:	9204      	str	r2, [sp, #16]
 8009520:	f000 fb3e 	bl	8009ba0 <__i2b>
 8009524:	4607      	mov	r7, r0
 8009526:	2d00      	cmp	r5, #0
 8009528:	dd0b      	ble.n	8009542 <_dtoa_r+0x78a>
 800952a:	9b04      	ldr	r3, [sp, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	dd08      	ble.n	8009542 <_dtoa_r+0x78a>
 8009530:	42ab      	cmp	r3, r5
 8009532:	9a04      	ldr	r2, [sp, #16]
 8009534:	bfa8      	it	ge
 8009536:	462b      	movge	r3, r5
 8009538:	eba8 0803 	sub.w	r8, r8, r3
 800953c:	1aed      	subs	r5, r5, r3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	9b06      	ldr	r3, [sp, #24]
 8009544:	b1fb      	cbz	r3, 8009586 <_dtoa_r+0x7ce>
 8009546:	9b08      	ldr	r3, [sp, #32]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 809f 	beq.w	800968c <_dtoa_r+0x8d4>
 800954e:	2e00      	cmp	r6, #0
 8009550:	dd11      	ble.n	8009576 <_dtoa_r+0x7be>
 8009552:	4639      	mov	r1, r7
 8009554:	4632      	mov	r2, r6
 8009556:	4620      	mov	r0, r4
 8009558:	f000 fbde 	bl	8009d18 <__pow5mult>
 800955c:	465a      	mov	r2, fp
 800955e:	4601      	mov	r1, r0
 8009560:	4607      	mov	r7, r0
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fb32 	bl	8009bcc <__multiply>
 8009568:	4659      	mov	r1, fp
 800956a:	9007      	str	r0, [sp, #28]
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fa5b 	bl	8009a28 <_Bfree>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	469b      	mov	fp, r3
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	1b9a      	subs	r2, r3, r6
 800957a:	d004      	beq.n	8009586 <_dtoa_r+0x7ce>
 800957c:	4659      	mov	r1, fp
 800957e:	4620      	mov	r0, r4
 8009580:	f000 fbca 	bl	8009d18 <__pow5mult>
 8009584:	4683      	mov	fp, r0
 8009586:	2101      	movs	r1, #1
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fb09 	bl	8009ba0 <__i2b>
 800958e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009590:	2b00      	cmp	r3, #0
 8009592:	4606      	mov	r6, r0
 8009594:	dd7c      	ble.n	8009690 <_dtoa_r+0x8d8>
 8009596:	461a      	mov	r2, r3
 8009598:	4601      	mov	r1, r0
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fbbc 	bl	8009d18 <__pow5mult>
 80095a0:	9b05      	ldr	r3, [sp, #20]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	4606      	mov	r6, r0
 80095a6:	dd76      	ble.n	8009696 <_dtoa_r+0x8de>
 80095a8:	2300      	movs	r3, #0
 80095aa:	9306      	str	r3, [sp, #24]
 80095ac:	6933      	ldr	r3, [r6, #16]
 80095ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095b2:	6918      	ldr	r0, [r3, #16]
 80095b4:	f000 faa4 	bl	8009b00 <__hi0bits>
 80095b8:	f1c0 0020 	rsb	r0, r0, #32
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	4418      	add	r0, r3
 80095c0:	f010 001f 	ands.w	r0, r0, #31
 80095c4:	f000 8086 	beq.w	80096d4 <_dtoa_r+0x91c>
 80095c8:	f1c0 0320 	rsb	r3, r0, #32
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	dd7f      	ble.n	80096d0 <_dtoa_r+0x918>
 80095d0:	f1c0 001c 	rsb	r0, r0, #28
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	4403      	add	r3, r0
 80095d8:	4480      	add	r8, r0
 80095da:	4405      	add	r5, r0
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	f1b8 0f00 	cmp.w	r8, #0
 80095e2:	dd05      	ble.n	80095f0 <_dtoa_r+0x838>
 80095e4:	4659      	mov	r1, fp
 80095e6:	4642      	mov	r2, r8
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fbef 	bl	8009dcc <__lshift>
 80095ee:	4683      	mov	fp, r0
 80095f0:	9b04      	ldr	r3, [sp, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd05      	ble.n	8009602 <_dtoa_r+0x84a>
 80095f6:	4631      	mov	r1, r6
 80095f8:	461a      	mov	r2, r3
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fbe6 	bl	8009dcc <__lshift>
 8009600:	4606      	mov	r6, r0
 8009602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009604:	2b00      	cmp	r3, #0
 8009606:	d069      	beq.n	80096dc <_dtoa_r+0x924>
 8009608:	4631      	mov	r1, r6
 800960a:	4658      	mov	r0, fp
 800960c:	f000 fc4a 	bl	8009ea4 <__mcmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	da63      	bge.n	80096dc <_dtoa_r+0x924>
 8009614:	2300      	movs	r3, #0
 8009616:	4659      	mov	r1, fp
 8009618:	220a      	movs	r2, #10
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fa26 	bl	8009a6c <__multadd>
 8009620:	9b08      	ldr	r3, [sp, #32]
 8009622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009626:	4683      	mov	fp, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 818f 	beq.w	800994c <_dtoa_r+0xb94>
 800962e:	4639      	mov	r1, r7
 8009630:	2300      	movs	r3, #0
 8009632:	220a      	movs	r2, #10
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fa19 	bl	8009a6c <__multadd>
 800963a:	f1b9 0f00 	cmp.w	r9, #0
 800963e:	4607      	mov	r7, r0
 8009640:	f300 808e 	bgt.w	8009760 <_dtoa_r+0x9a8>
 8009644:	9b05      	ldr	r3, [sp, #20]
 8009646:	2b02      	cmp	r3, #2
 8009648:	dc50      	bgt.n	80096ec <_dtoa_r+0x934>
 800964a:	e089      	b.n	8009760 <_dtoa_r+0x9a8>
 800964c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800964e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009652:	e75d      	b.n	8009510 <_dtoa_r+0x758>
 8009654:	9b01      	ldr	r3, [sp, #4]
 8009656:	1e5e      	subs	r6, r3, #1
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	42b3      	cmp	r3, r6
 800965c:	bfbf      	itttt	lt
 800965e:	9b06      	ldrlt	r3, [sp, #24]
 8009660:	9606      	strlt	r6, [sp, #24]
 8009662:	1af2      	sublt	r2, r6, r3
 8009664:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009666:	bfb6      	itet	lt
 8009668:	189b      	addlt	r3, r3, r2
 800966a:	1b9e      	subge	r6, r3, r6
 800966c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	bfb8      	it	lt
 8009672:	2600      	movlt	r6, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfb5      	itete	lt
 8009678:	eba8 0503 	sublt.w	r5, r8, r3
 800967c:	9b01      	ldrge	r3, [sp, #4]
 800967e:	2300      	movlt	r3, #0
 8009680:	4645      	movge	r5, r8
 8009682:	e747      	b.n	8009514 <_dtoa_r+0x75c>
 8009684:	9e06      	ldr	r6, [sp, #24]
 8009686:	9f08      	ldr	r7, [sp, #32]
 8009688:	4645      	mov	r5, r8
 800968a:	e74c      	b.n	8009526 <_dtoa_r+0x76e>
 800968c:	9a06      	ldr	r2, [sp, #24]
 800968e:	e775      	b.n	800957c <_dtoa_r+0x7c4>
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	2b01      	cmp	r3, #1
 8009694:	dc18      	bgt.n	80096c8 <_dtoa_r+0x910>
 8009696:	9b02      	ldr	r3, [sp, #8]
 8009698:	b9b3      	cbnz	r3, 80096c8 <_dtoa_r+0x910>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a0:	b9a3      	cbnz	r3, 80096cc <_dtoa_r+0x914>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	0d1b      	lsrs	r3, r3, #20
 80096aa:	051b      	lsls	r3, r3, #20
 80096ac:	b12b      	cbz	r3, 80096ba <_dtoa_r+0x902>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	3301      	adds	r3, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	f108 0801 	add.w	r8, r8, #1
 80096b8:	2301      	movs	r3, #1
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f47f af74 	bne.w	80095ac <_dtoa_r+0x7f4>
 80096c4:	2001      	movs	r0, #1
 80096c6:	e779      	b.n	80095bc <_dtoa_r+0x804>
 80096c8:	2300      	movs	r3, #0
 80096ca:	e7f6      	b.n	80096ba <_dtoa_r+0x902>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	e7f4      	b.n	80096ba <_dtoa_r+0x902>
 80096d0:	d085      	beq.n	80095de <_dtoa_r+0x826>
 80096d2:	4618      	mov	r0, r3
 80096d4:	301c      	adds	r0, #28
 80096d6:	e77d      	b.n	80095d4 <_dtoa_r+0x81c>
 80096d8:	40240000 	.word	0x40240000
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dc38      	bgt.n	8009754 <_dtoa_r+0x99c>
 80096e2:	9b05      	ldr	r3, [sp, #20]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	dd35      	ble.n	8009754 <_dtoa_r+0x99c>
 80096e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80096ec:	f1b9 0f00 	cmp.w	r9, #0
 80096f0:	d10d      	bne.n	800970e <_dtoa_r+0x956>
 80096f2:	4631      	mov	r1, r6
 80096f4:	464b      	mov	r3, r9
 80096f6:	2205      	movs	r2, #5
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 f9b7 	bl	8009a6c <__multadd>
 80096fe:	4601      	mov	r1, r0
 8009700:	4606      	mov	r6, r0
 8009702:	4658      	mov	r0, fp
 8009704:	f000 fbce 	bl	8009ea4 <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	f73f adbd 	bgt.w	8009288 <_dtoa_r+0x4d0>
 800970e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009710:	9d00      	ldr	r5, [sp, #0]
 8009712:	ea6f 0a03 	mvn.w	sl, r3
 8009716:	f04f 0800 	mov.w	r8, #0
 800971a:	4631      	mov	r1, r6
 800971c:	4620      	mov	r0, r4
 800971e:	f000 f983 	bl	8009a28 <_Bfree>
 8009722:	2f00      	cmp	r7, #0
 8009724:	f43f aeb4 	beq.w	8009490 <_dtoa_r+0x6d8>
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	d005      	beq.n	800973a <_dtoa_r+0x982>
 800972e:	45b8      	cmp	r8, r7
 8009730:	d003      	beq.n	800973a <_dtoa_r+0x982>
 8009732:	4641      	mov	r1, r8
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f977 	bl	8009a28 <_Bfree>
 800973a:	4639      	mov	r1, r7
 800973c:	4620      	mov	r0, r4
 800973e:	f000 f973 	bl	8009a28 <_Bfree>
 8009742:	e6a5      	b.n	8009490 <_dtoa_r+0x6d8>
 8009744:	2600      	movs	r6, #0
 8009746:	4637      	mov	r7, r6
 8009748:	e7e1      	b.n	800970e <_dtoa_r+0x956>
 800974a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800974c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009750:	4637      	mov	r7, r6
 8009752:	e599      	b.n	8009288 <_dtoa_r+0x4d0>
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 80fd 	beq.w	800995a <_dtoa_r+0xba2>
 8009760:	2d00      	cmp	r5, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x9b8>
 8009764:	4639      	mov	r1, r7
 8009766:	462a      	mov	r2, r5
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fb2f 	bl	8009dcc <__lshift>
 800976e:	4607      	mov	r7, r0
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d05c      	beq.n	8009830 <_dtoa_r+0xa78>
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 f915 	bl	80099a8 <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b928      	cbnz	r0, 800978e <_dtoa_r+0x9d6>
 8009782:	4b80      	ldr	r3, [pc, #512]	; (8009984 <_dtoa_r+0xbcc>)
 8009784:	4602      	mov	r2, r0
 8009786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800978a:	f7ff bb2e 	b.w	8008dea <_dtoa_r+0x32>
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	f107 010c 	add.w	r1, r7, #12
 8009798:	300c      	adds	r0, #12
 800979a:	f7fe fde1 	bl	8008360 <memcpy>
 800979e:	2201      	movs	r2, #1
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fb12 	bl	8009dcc <__lshift>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	9b00      	ldr	r3, [sp, #0]
 80097b0:	444b      	add	r3, r9
 80097b2:	9307      	str	r3, [sp, #28]
 80097b4:	9b02      	ldr	r3, [sp, #8]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	46b8      	mov	r8, r7
 80097bc:	9306      	str	r3, [sp, #24]
 80097be:	4607      	mov	r7, r0
 80097c0:	9b01      	ldr	r3, [sp, #4]
 80097c2:	4631      	mov	r1, r6
 80097c4:	3b01      	subs	r3, #1
 80097c6:	4658      	mov	r0, fp
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	f7ff fa69 	bl	8008ca0 <quorem>
 80097ce:	4603      	mov	r3, r0
 80097d0:	3330      	adds	r3, #48	; 0x30
 80097d2:	9004      	str	r0, [sp, #16]
 80097d4:	4641      	mov	r1, r8
 80097d6:	4658      	mov	r0, fp
 80097d8:	9308      	str	r3, [sp, #32]
 80097da:	f000 fb63 	bl	8009ea4 <__mcmp>
 80097de:	463a      	mov	r2, r7
 80097e0:	4681      	mov	r9, r0
 80097e2:	4631      	mov	r1, r6
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fb79 	bl	8009edc <__mdiff>
 80097ea:	68c2      	ldr	r2, [r0, #12]
 80097ec:	9b08      	ldr	r3, [sp, #32]
 80097ee:	4605      	mov	r5, r0
 80097f0:	bb02      	cbnz	r2, 8009834 <_dtoa_r+0xa7c>
 80097f2:	4601      	mov	r1, r0
 80097f4:	4658      	mov	r0, fp
 80097f6:	f000 fb55 	bl	8009ea4 <__mcmp>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	4602      	mov	r2, r0
 80097fe:	4629      	mov	r1, r5
 8009800:	4620      	mov	r0, r4
 8009802:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009806:	f000 f90f 	bl	8009a28 <_Bfree>
 800980a:	9b05      	ldr	r3, [sp, #20]
 800980c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800980e:	9d01      	ldr	r5, [sp, #4]
 8009810:	ea43 0102 	orr.w	r1, r3, r2
 8009814:	9b06      	ldr	r3, [sp, #24]
 8009816:	430b      	orrs	r3, r1
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	d10d      	bne.n	8009838 <_dtoa_r+0xa80>
 800981c:	2b39      	cmp	r3, #57	; 0x39
 800981e:	d029      	beq.n	8009874 <_dtoa_r+0xabc>
 8009820:	f1b9 0f00 	cmp.w	r9, #0
 8009824:	dd01      	ble.n	800982a <_dtoa_r+0xa72>
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	3331      	adds	r3, #49	; 0x31
 800982a:	9a02      	ldr	r2, [sp, #8]
 800982c:	7013      	strb	r3, [r2, #0]
 800982e:	e774      	b.n	800971a <_dtoa_r+0x962>
 8009830:	4638      	mov	r0, r7
 8009832:	e7b9      	b.n	80097a8 <_dtoa_r+0x9f0>
 8009834:	2201      	movs	r2, #1
 8009836:	e7e2      	b.n	80097fe <_dtoa_r+0xa46>
 8009838:	f1b9 0f00 	cmp.w	r9, #0
 800983c:	db06      	blt.n	800984c <_dtoa_r+0xa94>
 800983e:	9905      	ldr	r1, [sp, #20]
 8009840:	ea41 0909 	orr.w	r9, r1, r9
 8009844:	9906      	ldr	r1, [sp, #24]
 8009846:	ea59 0101 	orrs.w	r1, r9, r1
 800984a:	d120      	bne.n	800988e <_dtoa_r+0xad6>
 800984c:	2a00      	cmp	r2, #0
 800984e:	ddec      	ble.n	800982a <_dtoa_r+0xa72>
 8009850:	4659      	mov	r1, fp
 8009852:	2201      	movs	r2, #1
 8009854:	4620      	mov	r0, r4
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	f000 fab8 	bl	8009dcc <__lshift>
 800985c:	4631      	mov	r1, r6
 800985e:	4683      	mov	fp, r0
 8009860:	f000 fb20 	bl	8009ea4 <__mcmp>
 8009864:	2800      	cmp	r0, #0
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	dc02      	bgt.n	8009870 <_dtoa_r+0xab8>
 800986a:	d1de      	bne.n	800982a <_dtoa_r+0xa72>
 800986c:	07da      	lsls	r2, r3, #31
 800986e:	d5dc      	bpl.n	800982a <_dtoa_r+0xa72>
 8009870:	2b39      	cmp	r3, #57	; 0x39
 8009872:	d1d8      	bne.n	8009826 <_dtoa_r+0xa6e>
 8009874:	9a02      	ldr	r2, [sp, #8]
 8009876:	2339      	movs	r3, #57	; 0x39
 8009878:	7013      	strb	r3, [r2, #0]
 800987a:	462b      	mov	r3, r5
 800987c:	461d      	mov	r5, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009884:	2a39      	cmp	r2, #57	; 0x39
 8009886:	d050      	beq.n	800992a <_dtoa_r+0xb72>
 8009888:	3201      	adds	r2, #1
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	e745      	b.n	800971a <_dtoa_r+0x962>
 800988e:	2a00      	cmp	r2, #0
 8009890:	dd03      	ble.n	800989a <_dtoa_r+0xae2>
 8009892:	2b39      	cmp	r3, #57	; 0x39
 8009894:	d0ee      	beq.n	8009874 <_dtoa_r+0xabc>
 8009896:	3301      	adds	r3, #1
 8009898:	e7c7      	b.n	800982a <_dtoa_r+0xa72>
 800989a:	9a01      	ldr	r2, [sp, #4]
 800989c:	9907      	ldr	r1, [sp, #28]
 800989e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098a2:	428a      	cmp	r2, r1
 80098a4:	d02a      	beq.n	80098fc <_dtoa_r+0xb44>
 80098a6:	4659      	mov	r1, fp
 80098a8:	2300      	movs	r3, #0
 80098aa:	220a      	movs	r2, #10
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 f8dd 	bl	8009a6c <__multadd>
 80098b2:	45b8      	cmp	r8, r7
 80098b4:	4683      	mov	fp, r0
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	f04f 020a 	mov.w	r2, #10
 80098be:	4641      	mov	r1, r8
 80098c0:	4620      	mov	r0, r4
 80098c2:	d107      	bne.n	80098d4 <_dtoa_r+0xb1c>
 80098c4:	f000 f8d2 	bl	8009a6c <__multadd>
 80098c8:	4680      	mov	r8, r0
 80098ca:	4607      	mov	r7, r0
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	3301      	adds	r3, #1
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	e775      	b.n	80097c0 <_dtoa_r+0xa08>
 80098d4:	f000 f8ca 	bl	8009a6c <__multadd>
 80098d8:	4639      	mov	r1, r7
 80098da:	4680      	mov	r8, r0
 80098dc:	2300      	movs	r3, #0
 80098de:	220a      	movs	r2, #10
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 f8c3 	bl	8009a6c <__multadd>
 80098e6:	4607      	mov	r7, r0
 80098e8:	e7f0      	b.n	80098cc <_dtoa_r+0xb14>
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	9a00      	ldr	r2, [sp, #0]
 80098f0:	bfcc      	ite	gt
 80098f2:	464d      	movgt	r5, r9
 80098f4:	2501      	movle	r5, #1
 80098f6:	4415      	add	r5, r2
 80098f8:	f04f 0800 	mov.w	r8, #0
 80098fc:	4659      	mov	r1, fp
 80098fe:	2201      	movs	r2, #1
 8009900:	4620      	mov	r0, r4
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	f000 fa62 	bl	8009dcc <__lshift>
 8009908:	4631      	mov	r1, r6
 800990a:	4683      	mov	fp, r0
 800990c:	f000 faca 	bl	8009ea4 <__mcmp>
 8009910:	2800      	cmp	r0, #0
 8009912:	dcb2      	bgt.n	800987a <_dtoa_r+0xac2>
 8009914:	d102      	bne.n	800991c <_dtoa_r+0xb64>
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	07db      	lsls	r3, r3, #31
 800991a:	d4ae      	bmi.n	800987a <_dtoa_r+0xac2>
 800991c:	462b      	mov	r3, r5
 800991e:	461d      	mov	r5, r3
 8009920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009924:	2a30      	cmp	r2, #48	; 0x30
 8009926:	d0fa      	beq.n	800991e <_dtoa_r+0xb66>
 8009928:	e6f7      	b.n	800971a <_dtoa_r+0x962>
 800992a:	9a00      	ldr	r2, [sp, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d1a5      	bne.n	800987c <_dtoa_r+0xac4>
 8009930:	f10a 0a01 	add.w	sl, sl, #1
 8009934:	2331      	movs	r3, #49	; 0x31
 8009936:	e779      	b.n	800982c <_dtoa_r+0xa74>
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <_dtoa_r+0xbd0>)
 800993a:	f7ff baaf 	b.w	8008e9c <_dtoa_r+0xe4>
 800993e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009940:	2b00      	cmp	r3, #0
 8009942:	f47f aa86 	bne.w	8008e52 <_dtoa_r+0x9a>
 8009946:	4b11      	ldr	r3, [pc, #68]	; (800998c <_dtoa_r+0xbd4>)
 8009948:	f7ff baa8 	b.w	8008e9c <_dtoa_r+0xe4>
 800994c:	f1b9 0f00 	cmp.w	r9, #0
 8009950:	dc03      	bgt.n	800995a <_dtoa_r+0xba2>
 8009952:	9b05      	ldr	r3, [sp, #20]
 8009954:	2b02      	cmp	r3, #2
 8009956:	f73f aec9 	bgt.w	80096ec <_dtoa_r+0x934>
 800995a:	9d00      	ldr	r5, [sp, #0]
 800995c:	4631      	mov	r1, r6
 800995e:	4658      	mov	r0, fp
 8009960:	f7ff f99e 	bl	8008ca0 <quorem>
 8009964:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009968:	f805 3b01 	strb.w	r3, [r5], #1
 800996c:	9a00      	ldr	r2, [sp, #0]
 800996e:	1aaa      	subs	r2, r5, r2
 8009970:	4591      	cmp	r9, r2
 8009972:	ddba      	ble.n	80098ea <_dtoa_r+0xb32>
 8009974:	4659      	mov	r1, fp
 8009976:	2300      	movs	r3, #0
 8009978:	220a      	movs	r2, #10
 800997a:	4620      	mov	r0, r4
 800997c:	f000 f876 	bl	8009a6c <__multadd>
 8009980:	4683      	mov	fp, r0
 8009982:	e7eb      	b.n	800995c <_dtoa_r+0xba4>
 8009984:	0800b953 	.word	0x0800b953
 8009988:	0800b8ac 	.word	0x0800b8ac
 800998c:	0800b8d0 	.word	0x0800b8d0

08009990 <_localeconv_r>:
 8009990:	4800      	ldr	r0, [pc, #0]	; (8009994 <_localeconv_r+0x4>)
 8009992:	4770      	bx	lr
 8009994:	20000164 	.word	0x20000164

08009998 <malloc>:
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <malloc+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f000 bbe1 	b.w	800a164 <_malloc_r>
 80099a2:	bf00      	nop
 80099a4:	20000010 	.word	0x20000010

080099a8 <_Balloc>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099ac:	4604      	mov	r4, r0
 80099ae:	460d      	mov	r5, r1
 80099b0:	b976      	cbnz	r6, 80099d0 <_Balloc+0x28>
 80099b2:	2010      	movs	r0, #16
 80099b4:	f7ff fff0 	bl	8009998 <malloc>
 80099b8:	4602      	mov	r2, r0
 80099ba:	6260      	str	r0, [r4, #36]	; 0x24
 80099bc:	b920      	cbnz	r0, 80099c8 <_Balloc+0x20>
 80099be:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <_Balloc+0x78>)
 80099c0:	4818      	ldr	r0, [pc, #96]	; (8009a24 <_Balloc+0x7c>)
 80099c2:	2166      	movs	r1, #102	; 0x66
 80099c4:	f000 fd94 	bl	800a4f0 <__assert_func>
 80099c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099cc:	6006      	str	r6, [r0, #0]
 80099ce:	60c6      	str	r6, [r0, #12]
 80099d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099d2:	68f3      	ldr	r3, [r6, #12]
 80099d4:	b183      	cbz	r3, 80099f8 <_Balloc+0x50>
 80099d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099de:	b9b8      	cbnz	r0, 8009a10 <_Balloc+0x68>
 80099e0:	2101      	movs	r1, #1
 80099e2:	fa01 f605 	lsl.w	r6, r1, r5
 80099e6:	1d72      	adds	r2, r6, #5
 80099e8:	0092      	lsls	r2, r2, #2
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 fb5a 	bl	800a0a4 <_calloc_r>
 80099f0:	b160      	cbz	r0, 8009a0c <_Balloc+0x64>
 80099f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099f6:	e00e      	b.n	8009a16 <_Balloc+0x6e>
 80099f8:	2221      	movs	r2, #33	; 0x21
 80099fa:	2104      	movs	r1, #4
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fb51 	bl	800a0a4 <_calloc_r>
 8009a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a04:	60f0      	str	r0, [r6, #12]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e4      	bne.n	80099d6 <_Balloc+0x2e>
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	6802      	ldr	r2, [r0, #0]
 8009a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a16:	2300      	movs	r3, #0
 8009a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a1c:	e7f7      	b.n	8009a0e <_Balloc+0x66>
 8009a1e:	bf00      	nop
 8009a20:	0800b8dd 	.word	0x0800b8dd
 8009a24:	0800b964 	.word	0x0800b964

08009a28 <_Bfree>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b976      	cbnz	r6, 8009a50 <_Bfree+0x28>
 8009a32:	2010      	movs	r0, #16
 8009a34:	f7ff ffb0 	bl	8009998 <malloc>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6268      	str	r0, [r5, #36]	; 0x24
 8009a3c:	b920      	cbnz	r0, 8009a48 <_Bfree+0x20>
 8009a3e:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <_Bfree+0x3c>)
 8009a40:	4809      	ldr	r0, [pc, #36]	; (8009a68 <_Bfree+0x40>)
 8009a42:	218a      	movs	r1, #138	; 0x8a
 8009a44:	f000 fd54 	bl	800a4f0 <__assert_func>
 8009a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a4c:	6006      	str	r6, [r0, #0]
 8009a4e:	60c6      	str	r6, [r0, #12]
 8009a50:	b13c      	cbz	r4, 8009a62 <_Bfree+0x3a>
 8009a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a54:	6862      	ldr	r2, [r4, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a5c:	6021      	str	r1, [r4, #0]
 8009a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	0800b8dd 	.word	0x0800b8dd
 8009a68:	0800b964 	.word	0x0800b964

08009a6c <__multadd>:
 8009a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a70:	690e      	ldr	r6, [r1, #16]
 8009a72:	4607      	mov	r7, r0
 8009a74:	4698      	mov	r8, r3
 8009a76:	460c      	mov	r4, r1
 8009a78:	f101 0014 	add.w	r0, r1, #20
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	6805      	ldr	r5, [r0, #0]
 8009a80:	b2a9      	uxth	r1, r5
 8009a82:	fb02 8101 	mla	r1, r2, r1, r8
 8009a86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009a8a:	0c2d      	lsrs	r5, r5, #16
 8009a8c:	fb02 c505 	mla	r5, r2, r5, ip
 8009a90:	b289      	uxth	r1, r1
 8009a92:	3301      	adds	r3, #1
 8009a94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009a98:	429e      	cmp	r6, r3
 8009a9a:	f840 1b04 	str.w	r1, [r0], #4
 8009a9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009aa2:	dcec      	bgt.n	8009a7e <__multadd+0x12>
 8009aa4:	f1b8 0f00 	cmp.w	r8, #0
 8009aa8:	d022      	beq.n	8009af0 <__multadd+0x84>
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	42b3      	cmp	r3, r6
 8009aae:	dc19      	bgt.n	8009ae4 <__multadd+0x78>
 8009ab0:	6861      	ldr	r1, [r4, #4]
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	f7ff ff77 	bl	80099a8 <_Balloc>
 8009aba:	4605      	mov	r5, r0
 8009abc:	b928      	cbnz	r0, 8009aca <__multadd+0x5e>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <__multadd+0x8c>)
 8009ac2:	480e      	ldr	r0, [pc, #56]	; (8009afc <__multadd+0x90>)
 8009ac4:	21b5      	movs	r1, #181	; 0xb5
 8009ac6:	f000 fd13 	bl	800a4f0 <__assert_func>
 8009aca:	6922      	ldr	r2, [r4, #16]
 8009acc:	3202      	adds	r2, #2
 8009ace:	f104 010c 	add.w	r1, r4, #12
 8009ad2:	0092      	lsls	r2, r2, #2
 8009ad4:	300c      	adds	r0, #12
 8009ad6:	f7fe fc43 	bl	8008360 <memcpy>
 8009ada:	4621      	mov	r1, r4
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff ffa3 	bl	8009a28 <_Bfree>
 8009ae2:	462c      	mov	r4, r5
 8009ae4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009ae8:	3601      	adds	r6, #1
 8009aea:	f8c3 8014 	str.w	r8, [r3, #20]
 8009aee:	6126      	str	r6, [r4, #16]
 8009af0:	4620      	mov	r0, r4
 8009af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af6:	bf00      	nop
 8009af8:	0800b953 	.word	0x0800b953
 8009afc:	0800b964 	.word	0x0800b964

08009b00 <__hi0bits>:
 8009b00:	0c03      	lsrs	r3, r0, #16
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	b9d3      	cbnz	r3, 8009b3c <__hi0bits+0x3c>
 8009b06:	0400      	lsls	r0, r0, #16
 8009b08:	2310      	movs	r3, #16
 8009b0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b0e:	bf04      	itt	eq
 8009b10:	0200      	lsleq	r0, r0, #8
 8009b12:	3308      	addeq	r3, #8
 8009b14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b18:	bf04      	itt	eq
 8009b1a:	0100      	lsleq	r0, r0, #4
 8009b1c:	3304      	addeq	r3, #4
 8009b1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b22:	bf04      	itt	eq
 8009b24:	0080      	lsleq	r0, r0, #2
 8009b26:	3302      	addeq	r3, #2
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	db05      	blt.n	8009b38 <__hi0bits+0x38>
 8009b2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b30:	f103 0301 	add.w	r3, r3, #1
 8009b34:	bf08      	it	eq
 8009b36:	2320      	moveq	r3, #32
 8009b38:	4618      	mov	r0, r3
 8009b3a:	4770      	bx	lr
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e7e4      	b.n	8009b0a <__hi0bits+0xa>

08009b40 <__lo0bits>:
 8009b40:	6803      	ldr	r3, [r0, #0]
 8009b42:	f013 0207 	ands.w	r2, r3, #7
 8009b46:	4601      	mov	r1, r0
 8009b48:	d00b      	beq.n	8009b62 <__lo0bits+0x22>
 8009b4a:	07da      	lsls	r2, r3, #31
 8009b4c:	d424      	bmi.n	8009b98 <__lo0bits+0x58>
 8009b4e:	0798      	lsls	r0, r3, #30
 8009b50:	bf49      	itett	mi
 8009b52:	085b      	lsrmi	r3, r3, #1
 8009b54:	089b      	lsrpl	r3, r3, #2
 8009b56:	2001      	movmi	r0, #1
 8009b58:	600b      	strmi	r3, [r1, #0]
 8009b5a:	bf5c      	itt	pl
 8009b5c:	600b      	strpl	r3, [r1, #0]
 8009b5e:	2002      	movpl	r0, #2
 8009b60:	4770      	bx	lr
 8009b62:	b298      	uxth	r0, r3
 8009b64:	b9b0      	cbnz	r0, 8009b94 <__lo0bits+0x54>
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	2010      	movs	r0, #16
 8009b6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b6e:	bf04      	itt	eq
 8009b70:	0a1b      	lsreq	r3, r3, #8
 8009b72:	3008      	addeq	r0, #8
 8009b74:	071a      	lsls	r2, r3, #28
 8009b76:	bf04      	itt	eq
 8009b78:	091b      	lsreq	r3, r3, #4
 8009b7a:	3004      	addeq	r0, #4
 8009b7c:	079a      	lsls	r2, r3, #30
 8009b7e:	bf04      	itt	eq
 8009b80:	089b      	lsreq	r3, r3, #2
 8009b82:	3002      	addeq	r0, #2
 8009b84:	07da      	lsls	r2, r3, #31
 8009b86:	d403      	bmi.n	8009b90 <__lo0bits+0x50>
 8009b88:	085b      	lsrs	r3, r3, #1
 8009b8a:	f100 0001 	add.w	r0, r0, #1
 8009b8e:	d005      	beq.n	8009b9c <__lo0bits+0x5c>
 8009b90:	600b      	str	r3, [r1, #0]
 8009b92:	4770      	bx	lr
 8009b94:	4610      	mov	r0, r2
 8009b96:	e7e8      	b.n	8009b6a <__lo0bits+0x2a>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	4770      	bx	lr
 8009b9c:	2020      	movs	r0, #32
 8009b9e:	4770      	bx	lr

08009ba0 <__i2b>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	f7ff feff 	bl	80099a8 <_Balloc>
 8009baa:	4602      	mov	r2, r0
 8009bac:	b928      	cbnz	r0, 8009bba <__i2b+0x1a>
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <__i2b+0x24>)
 8009bb0:	4805      	ldr	r0, [pc, #20]	; (8009bc8 <__i2b+0x28>)
 8009bb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bb6:	f000 fc9b 	bl	800a4f0 <__assert_func>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	6144      	str	r4, [r0, #20]
 8009bbe:	6103      	str	r3, [r0, #16]
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	bf00      	nop
 8009bc4:	0800b953 	.word	0x0800b953
 8009bc8:	0800b964 	.word	0x0800b964

08009bcc <__multiply>:
 8009bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	690a      	ldr	r2, [r1, #16]
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	bfb8      	it	lt
 8009bda:	460b      	movlt	r3, r1
 8009bdc:	460d      	mov	r5, r1
 8009bde:	bfbc      	itt	lt
 8009be0:	4625      	movlt	r5, r4
 8009be2:	461c      	movlt	r4, r3
 8009be4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009be8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bec:	68ab      	ldr	r3, [r5, #8]
 8009bee:	6869      	ldr	r1, [r5, #4]
 8009bf0:	eb0a 0709 	add.w	r7, sl, r9
 8009bf4:	42bb      	cmp	r3, r7
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	bfb8      	it	lt
 8009bfa:	3101      	addlt	r1, #1
 8009bfc:	f7ff fed4 	bl	80099a8 <_Balloc>
 8009c00:	b930      	cbnz	r0, 8009c10 <__multiply+0x44>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4b42      	ldr	r3, [pc, #264]	; (8009d10 <__multiply+0x144>)
 8009c06:	4843      	ldr	r0, [pc, #268]	; (8009d14 <__multiply+0x148>)
 8009c08:	f240 115d 	movw	r1, #349	; 0x15d
 8009c0c:	f000 fc70 	bl	800a4f0 <__assert_func>
 8009c10:	f100 0614 	add.w	r6, r0, #20
 8009c14:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009c18:	4633      	mov	r3, r6
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	4543      	cmp	r3, r8
 8009c1e:	d31e      	bcc.n	8009c5e <__multiply+0x92>
 8009c20:	f105 0c14 	add.w	ip, r5, #20
 8009c24:	f104 0314 	add.w	r3, r4, #20
 8009c28:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009c2c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009c30:	9202      	str	r2, [sp, #8]
 8009c32:	ebac 0205 	sub.w	r2, ip, r5
 8009c36:	3a15      	subs	r2, #21
 8009c38:	f022 0203 	bic.w	r2, r2, #3
 8009c3c:	3204      	adds	r2, #4
 8009c3e:	f105 0115 	add.w	r1, r5, #21
 8009c42:	458c      	cmp	ip, r1
 8009c44:	bf38      	it	cc
 8009c46:	2204      	movcc	r2, #4
 8009c48:	9201      	str	r2, [sp, #4]
 8009c4a:	9a02      	ldr	r2, [sp, #8]
 8009c4c:	9303      	str	r3, [sp, #12]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d808      	bhi.n	8009c64 <__multiply+0x98>
 8009c52:	2f00      	cmp	r7, #0
 8009c54:	dc55      	bgt.n	8009d02 <__multiply+0x136>
 8009c56:	6107      	str	r7, [r0, #16]
 8009c58:	b005      	add	sp, #20
 8009c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5e:	f843 2b04 	str.w	r2, [r3], #4
 8009c62:	e7db      	b.n	8009c1c <__multiply+0x50>
 8009c64:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c68:	f1ba 0f00 	cmp.w	sl, #0
 8009c6c:	d020      	beq.n	8009cb0 <__multiply+0xe4>
 8009c6e:	f105 0e14 	add.w	lr, r5, #20
 8009c72:	46b1      	mov	r9, r6
 8009c74:	2200      	movs	r2, #0
 8009c76:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c7a:	f8d9 b000 	ldr.w	fp, [r9]
 8009c7e:	b2a1      	uxth	r1, r4
 8009c80:	fa1f fb8b 	uxth.w	fp, fp
 8009c84:	fb0a b101 	mla	r1, sl, r1, fp
 8009c88:	4411      	add	r1, r2
 8009c8a:	f8d9 2000 	ldr.w	r2, [r9]
 8009c8e:	0c24      	lsrs	r4, r4, #16
 8009c90:	0c12      	lsrs	r2, r2, #16
 8009c92:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c96:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c9a:	b289      	uxth	r1, r1
 8009c9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ca0:	45f4      	cmp	ip, lr
 8009ca2:	f849 1b04 	str.w	r1, [r9], #4
 8009ca6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009caa:	d8e4      	bhi.n	8009c76 <__multiply+0xaa>
 8009cac:	9901      	ldr	r1, [sp, #4]
 8009cae:	5072      	str	r2, [r6, r1]
 8009cb0:	9a03      	ldr	r2, [sp, #12]
 8009cb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	f1b9 0f00 	cmp.w	r9, #0
 8009cbc:	d01f      	beq.n	8009cfe <__multiply+0x132>
 8009cbe:	6834      	ldr	r4, [r6, #0]
 8009cc0:	f105 0114 	add.w	r1, r5, #20
 8009cc4:	46b6      	mov	lr, r6
 8009cc6:	f04f 0a00 	mov.w	sl, #0
 8009cca:	880a      	ldrh	r2, [r1, #0]
 8009ccc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009cd0:	fb09 b202 	mla	r2, r9, r2, fp
 8009cd4:	4492      	add	sl, r2
 8009cd6:	b2a4      	uxth	r4, r4
 8009cd8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009cdc:	f84e 4b04 	str.w	r4, [lr], #4
 8009ce0:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ce4:	f8be 2000 	ldrh.w	r2, [lr]
 8009ce8:	0c24      	lsrs	r4, r4, #16
 8009cea:	fb09 2404 	mla	r4, r9, r4, r2
 8009cee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009cf2:	458c      	cmp	ip, r1
 8009cf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009cf8:	d8e7      	bhi.n	8009cca <__multiply+0xfe>
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	50b4      	str	r4, [r6, r2]
 8009cfe:	3604      	adds	r6, #4
 8009d00:	e7a3      	b.n	8009c4a <__multiply+0x7e>
 8009d02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1a5      	bne.n	8009c56 <__multiply+0x8a>
 8009d0a:	3f01      	subs	r7, #1
 8009d0c:	e7a1      	b.n	8009c52 <__multiply+0x86>
 8009d0e:	bf00      	nop
 8009d10:	0800b953 	.word	0x0800b953
 8009d14:	0800b964 	.word	0x0800b964

08009d18 <__pow5mult>:
 8009d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	f012 0203 	ands.w	r2, r2, #3
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	d007      	beq.n	8009d38 <__pow5mult+0x20>
 8009d28:	4c25      	ldr	r4, [pc, #148]	; (8009dc0 <__pow5mult+0xa8>)
 8009d2a:	3a01      	subs	r2, #1
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d32:	f7ff fe9b 	bl	8009a6c <__multadd>
 8009d36:	4607      	mov	r7, r0
 8009d38:	10ad      	asrs	r5, r5, #2
 8009d3a:	d03d      	beq.n	8009db8 <__pow5mult+0xa0>
 8009d3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d3e:	b97c      	cbnz	r4, 8009d60 <__pow5mult+0x48>
 8009d40:	2010      	movs	r0, #16
 8009d42:	f7ff fe29 	bl	8009998 <malloc>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6270      	str	r0, [r6, #36]	; 0x24
 8009d4a:	b928      	cbnz	r0, 8009d58 <__pow5mult+0x40>
 8009d4c:	4b1d      	ldr	r3, [pc, #116]	; (8009dc4 <__pow5mult+0xac>)
 8009d4e:	481e      	ldr	r0, [pc, #120]	; (8009dc8 <__pow5mult+0xb0>)
 8009d50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d54:	f000 fbcc 	bl	800a4f0 <__assert_func>
 8009d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d5c:	6004      	str	r4, [r0, #0]
 8009d5e:	60c4      	str	r4, [r0, #12]
 8009d60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d68:	b94c      	cbnz	r4, 8009d7e <__pow5mult+0x66>
 8009d6a:	f240 2171 	movw	r1, #625	; 0x271
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f7ff ff16 	bl	8009ba0 <__i2b>
 8009d74:	2300      	movs	r3, #0
 8009d76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	6003      	str	r3, [r0, #0]
 8009d7e:	f04f 0900 	mov.w	r9, #0
 8009d82:	07eb      	lsls	r3, r5, #31
 8009d84:	d50a      	bpl.n	8009d9c <__pow5mult+0x84>
 8009d86:	4639      	mov	r1, r7
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f7ff ff1e 	bl	8009bcc <__multiply>
 8009d90:	4639      	mov	r1, r7
 8009d92:	4680      	mov	r8, r0
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff fe47 	bl	8009a28 <_Bfree>
 8009d9a:	4647      	mov	r7, r8
 8009d9c:	106d      	asrs	r5, r5, #1
 8009d9e:	d00b      	beq.n	8009db8 <__pow5mult+0xa0>
 8009da0:	6820      	ldr	r0, [r4, #0]
 8009da2:	b938      	cbnz	r0, 8009db4 <__pow5mult+0x9c>
 8009da4:	4622      	mov	r2, r4
 8009da6:	4621      	mov	r1, r4
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7ff ff0f 	bl	8009bcc <__multiply>
 8009dae:	6020      	str	r0, [r4, #0]
 8009db0:	f8c0 9000 	str.w	r9, [r0]
 8009db4:	4604      	mov	r4, r0
 8009db6:	e7e4      	b.n	8009d82 <__pow5mult+0x6a>
 8009db8:	4638      	mov	r0, r7
 8009dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dbe:	bf00      	nop
 8009dc0:	0800bab8 	.word	0x0800bab8
 8009dc4:	0800b8dd 	.word	0x0800b8dd
 8009dc8:	0800b964 	.word	0x0800b964

08009dcc <__lshift>:
 8009dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	6849      	ldr	r1, [r1, #4]
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dda:	68a3      	ldr	r3, [r4, #8]
 8009ddc:	4607      	mov	r7, r0
 8009dde:	4691      	mov	r9, r2
 8009de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009de4:	f108 0601 	add.w	r6, r8, #1
 8009de8:	42b3      	cmp	r3, r6
 8009dea:	db0b      	blt.n	8009e04 <__lshift+0x38>
 8009dec:	4638      	mov	r0, r7
 8009dee:	f7ff fddb 	bl	80099a8 <_Balloc>
 8009df2:	4605      	mov	r5, r0
 8009df4:	b948      	cbnz	r0, 8009e0a <__lshift+0x3e>
 8009df6:	4602      	mov	r2, r0
 8009df8:	4b28      	ldr	r3, [pc, #160]	; (8009e9c <__lshift+0xd0>)
 8009dfa:	4829      	ldr	r0, [pc, #164]	; (8009ea0 <__lshift+0xd4>)
 8009dfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e00:	f000 fb76 	bl	800a4f0 <__assert_func>
 8009e04:	3101      	adds	r1, #1
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	e7ee      	b.n	8009de8 <__lshift+0x1c>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f100 0114 	add.w	r1, r0, #20
 8009e10:	f100 0210 	add.w	r2, r0, #16
 8009e14:	4618      	mov	r0, r3
 8009e16:	4553      	cmp	r3, sl
 8009e18:	db33      	blt.n	8009e82 <__lshift+0xb6>
 8009e1a:	6920      	ldr	r0, [r4, #16]
 8009e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e20:	f104 0314 	add.w	r3, r4, #20
 8009e24:	f019 091f 	ands.w	r9, r9, #31
 8009e28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e30:	d02b      	beq.n	8009e8a <__lshift+0xbe>
 8009e32:	f1c9 0e20 	rsb	lr, r9, #32
 8009e36:	468a      	mov	sl, r1
 8009e38:	2200      	movs	r2, #0
 8009e3a:	6818      	ldr	r0, [r3, #0]
 8009e3c:	fa00 f009 	lsl.w	r0, r0, r9
 8009e40:	4302      	orrs	r2, r0
 8009e42:	f84a 2b04 	str.w	r2, [sl], #4
 8009e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e4a:	459c      	cmp	ip, r3
 8009e4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e50:	d8f3      	bhi.n	8009e3a <__lshift+0x6e>
 8009e52:	ebac 0304 	sub.w	r3, ip, r4
 8009e56:	3b15      	subs	r3, #21
 8009e58:	f023 0303 	bic.w	r3, r3, #3
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	f104 0015 	add.w	r0, r4, #21
 8009e62:	4584      	cmp	ip, r0
 8009e64:	bf38      	it	cc
 8009e66:	2304      	movcc	r3, #4
 8009e68:	50ca      	str	r2, [r1, r3]
 8009e6a:	b10a      	cbz	r2, 8009e70 <__lshift+0xa4>
 8009e6c:	f108 0602 	add.w	r6, r8, #2
 8009e70:	3e01      	subs	r6, #1
 8009e72:	4638      	mov	r0, r7
 8009e74:	612e      	str	r6, [r5, #16]
 8009e76:	4621      	mov	r1, r4
 8009e78:	f7ff fdd6 	bl	8009a28 <_Bfree>
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e86:	3301      	adds	r3, #1
 8009e88:	e7c5      	b.n	8009e16 <__lshift+0x4a>
 8009e8a:	3904      	subs	r1, #4
 8009e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e94:	459c      	cmp	ip, r3
 8009e96:	d8f9      	bhi.n	8009e8c <__lshift+0xc0>
 8009e98:	e7ea      	b.n	8009e70 <__lshift+0xa4>
 8009e9a:	bf00      	nop
 8009e9c:	0800b953 	.word	0x0800b953
 8009ea0:	0800b964 	.word	0x0800b964

08009ea4 <__mcmp>:
 8009ea4:	b530      	push	{r4, r5, lr}
 8009ea6:	6902      	ldr	r2, [r0, #16]
 8009ea8:	690c      	ldr	r4, [r1, #16]
 8009eaa:	1b12      	subs	r2, r2, r4
 8009eac:	d10e      	bne.n	8009ecc <__mcmp+0x28>
 8009eae:	f100 0314 	add.w	r3, r0, #20
 8009eb2:	3114      	adds	r1, #20
 8009eb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009eb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ebc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ec0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ec4:	42a5      	cmp	r5, r4
 8009ec6:	d003      	beq.n	8009ed0 <__mcmp+0x2c>
 8009ec8:	d305      	bcc.n	8009ed6 <__mcmp+0x32>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4610      	mov	r0, r2
 8009ece:	bd30      	pop	{r4, r5, pc}
 8009ed0:	4283      	cmp	r3, r0
 8009ed2:	d3f3      	bcc.n	8009ebc <__mcmp+0x18>
 8009ed4:	e7fa      	b.n	8009ecc <__mcmp+0x28>
 8009ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eda:	e7f7      	b.n	8009ecc <__mcmp+0x28>

08009edc <__mdiff>:
 8009edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	4617      	mov	r7, r2
 8009eea:	f7ff ffdb 	bl	8009ea4 <__mcmp>
 8009eee:	1e05      	subs	r5, r0, #0
 8009ef0:	d110      	bne.n	8009f14 <__mdiff+0x38>
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f7ff fd57 	bl	80099a8 <_Balloc>
 8009efa:	b930      	cbnz	r0, 8009f0a <__mdiff+0x2e>
 8009efc:	4b39      	ldr	r3, [pc, #228]	; (8009fe4 <__mdiff+0x108>)
 8009efe:	4602      	mov	r2, r0
 8009f00:	f240 2132 	movw	r1, #562	; 0x232
 8009f04:	4838      	ldr	r0, [pc, #224]	; (8009fe8 <__mdiff+0x10c>)
 8009f06:	f000 faf3 	bl	800a4f0 <__assert_func>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f14:	bfa4      	itt	ge
 8009f16:	463b      	movge	r3, r7
 8009f18:	4627      	movge	r7, r4
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	bfa6      	itte	ge
 8009f20:	461c      	movge	r4, r3
 8009f22:	2500      	movge	r5, #0
 8009f24:	2501      	movlt	r5, #1
 8009f26:	f7ff fd3f 	bl	80099a8 <_Balloc>
 8009f2a:	b920      	cbnz	r0, 8009f36 <__mdiff+0x5a>
 8009f2c:	4b2d      	ldr	r3, [pc, #180]	; (8009fe4 <__mdiff+0x108>)
 8009f2e:	4602      	mov	r2, r0
 8009f30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f34:	e7e6      	b.n	8009f04 <__mdiff+0x28>
 8009f36:	693e      	ldr	r6, [r7, #16]
 8009f38:	60c5      	str	r5, [r0, #12]
 8009f3a:	6925      	ldr	r5, [r4, #16]
 8009f3c:	f107 0114 	add.w	r1, r7, #20
 8009f40:	f104 0914 	add.w	r9, r4, #20
 8009f44:	f100 0e14 	add.w	lr, r0, #20
 8009f48:	f107 0210 	add.w	r2, r7, #16
 8009f4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009f50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009f54:	46f2      	mov	sl, lr
 8009f56:	2700      	movs	r7, #0
 8009f58:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f60:	fa1f f883 	uxth.w	r8, r3
 8009f64:	fa17 f78b 	uxtah	r7, r7, fp
 8009f68:	0c1b      	lsrs	r3, r3, #16
 8009f6a:	eba7 0808 	sub.w	r8, r7, r8
 8009f6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f76:	fa1f f888 	uxth.w	r8, r8
 8009f7a:	141f      	asrs	r7, r3, #16
 8009f7c:	454d      	cmp	r5, r9
 8009f7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f82:	f84a 3b04 	str.w	r3, [sl], #4
 8009f86:	d8e7      	bhi.n	8009f58 <__mdiff+0x7c>
 8009f88:	1b2b      	subs	r3, r5, r4
 8009f8a:	3b15      	subs	r3, #21
 8009f8c:	f023 0303 	bic.w	r3, r3, #3
 8009f90:	3304      	adds	r3, #4
 8009f92:	3415      	adds	r4, #21
 8009f94:	42a5      	cmp	r5, r4
 8009f96:	bf38      	it	cc
 8009f98:	2304      	movcc	r3, #4
 8009f9a:	4419      	add	r1, r3
 8009f9c:	4473      	add	r3, lr
 8009f9e:	469e      	mov	lr, r3
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	4565      	cmp	r5, ip
 8009fa4:	d30e      	bcc.n	8009fc4 <__mdiff+0xe8>
 8009fa6:	f10c 0203 	add.w	r2, ip, #3
 8009faa:	1a52      	subs	r2, r2, r1
 8009fac:	f022 0203 	bic.w	r2, r2, #3
 8009fb0:	3903      	subs	r1, #3
 8009fb2:	458c      	cmp	ip, r1
 8009fb4:	bf38      	it	cc
 8009fb6:	2200      	movcc	r2, #0
 8009fb8:	441a      	add	r2, r3
 8009fba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fbe:	b17b      	cbz	r3, 8009fe0 <__mdiff+0x104>
 8009fc0:	6106      	str	r6, [r0, #16]
 8009fc2:	e7a5      	b.n	8009f10 <__mdiff+0x34>
 8009fc4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009fc8:	fa17 f488 	uxtah	r4, r7, r8
 8009fcc:	1422      	asrs	r2, r4, #16
 8009fce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009fd2:	b2a4      	uxth	r4, r4
 8009fd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009fd8:	f84e 4b04 	str.w	r4, [lr], #4
 8009fdc:	1417      	asrs	r7, r2, #16
 8009fde:	e7e0      	b.n	8009fa2 <__mdiff+0xc6>
 8009fe0:	3e01      	subs	r6, #1
 8009fe2:	e7ea      	b.n	8009fba <__mdiff+0xde>
 8009fe4:	0800b953 	.word	0x0800b953
 8009fe8:	0800b964 	.word	0x0800b964

08009fec <__d2b>:
 8009fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	4689      	mov	r9, r1
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	ec57 6b10 	vmov	r6, r7, d0
 8009ff8:	4690      	mov	r8, r2
 8009ffa:	f7ff fcd5 	bl	80099a8 <_Balloc>
 8009ffe:	4604      	mov	r4, r0
 800a000:	b930      	cbnz	r0, 800a010 <__d2b+0x24>
 800a002:	4602      	mov	r2, r0
 800a004:	4b25      	ldr	r3, [pc, #148]	; (800a09c <__d2b+0xb0>)
 800a006:	4826      	ldr	r0, [pc, #152]	; (800a0a0 <__d2b+0xb4>)
 800a008:	f240 310a 	movw	r1, #778	; 0x30a
 800a00c:	f000 fa70 	bl	800a4f0 <__assert_func>
 800a010:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a014:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a018:	bb35      	cbnz	r5, 800a068 <__d2b+0x7c>
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	d028      	beq.n	800a072 <__d2b+0x86>
 800a020:	4668      	mov	r0, sp
 800a022:	9600      	str	r6, [sp, #0]
 800a024:	f7ff fd8c 	bl	8009b40 <__lo0bits>
 800a028:	9900      	ldr	r1, [sp, #0]
 800a02a:	b300      	cbz	r0, 800a06e <__d2b+0x82>
 800a02c:	9a01      	ldr	r2, [sp, #4]
 800a02e:	f1c0 0320 	rsb	r3, r0, #32
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	430b      	orrs	r3, r1
 800a038:	40c2      	lsrs	r2, r0
 800a03a:	6163      	str	r3, [r4, #20]
 800a03c:	9201      	str	r2, [sp, #4]
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	61a3      	str	r3, [r4, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	bf14      	ite	ne
 800a046:	2202      	movne	r2, #2
 800a048:	2201      	moveq	r2, #1
 800a04a:	6122      	str	r2, [r4, #16]
 800a04c:	b1d5      	cbz	r5, 800a084 <__d2b+0x98>
 800a04e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a052:	4405      	add	r5, r0
 800a054:	f8c9 5000 	str.w	r5, [r9]
 800a058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a05c:	f8c8 0000 	str.w	r0, [r8]
 800a060:	4620      	mov	r0, r4
 800a062:	b003      	add	sp, #12
 800a064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a06c:	e7d5      	b.n	800a01a <__d2b+0x2e>
 800a06e:	6161      	str	r1, [r4, #20]
 800a070:	e7e5      	b.n	800a03e <__d2b+0x52>
 800a072:	a801      	add	r0, sp, #4
 800a074:	f7ff fd64 	bl	8009b40 <__lo0bits>
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	6163      	str	r3, [r4, #20]
 800a07c:	2201      	movs	r2, #1
 800a07e:	6122      	str	r2, [r4, #16]
 800a080:	3020      	adds	r0, #32
 800a082:	e7e3      	b.n	800a04c <__d2b+0x60>
 800a084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a08c:	f8c9 0000 	str.w	r0, [r9]
 800a090:	6918      	ldr	r0, [r3, #16]
 800a092:	f7ff fd35 	bl	8009b00 <__hi0bits>
 800a096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a09a:	e7df      	b.n	800a05c <__d2b+0x70>
 800a09c:	0800b953 	.word	0x0800b953
 800a0a0:	0800b964 	.word	0x0800b964

0800a0a4 <_calloc_r>:
 800a0a4:	b513      	push	{r0, r1, r4, lr}
 800a0a6:	434a      	muls	r2, r1
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	9201      	str	r2, [sp, #4]
 800a0ac:	f000 f85a 	bl	800a164 <_malloc_r>
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	b118      	cbz	r0, 800a0bc <_calloc_r+0x18>
 800a0b4:	9a01      	ldr	r2, [sp, #4]
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	f7fe f960 	bl	800837c <memset>
 800a0bc:	4620      	mov	r0, r4
 800a0be:	b002      	add	sp, #8
 800a0c0:	bd10      	pop	{r4, pc}
	...

0800a0c4 <_free_r>:
 800a0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c6:	2900      	cmp	r1, #0
 800a0c8:	d048      	beq.n	800a15c <_free_r+0x98>
 800a0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ce:	9001      	str	r0, [sp, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0d6:	bfb8      	it	lt
 800a0d8:	18e4      	addlt	r4, r4, r3
 800a0da:	f000 fa65 	bl	800a5a8 <__malloc_lock>
 800a0de:	4a20      	ldr	r2, [pc, #128]	; (800a160 <_free_r+0x9c>)
 800a0e0:	9801      	ldr	r0, [sp, #4]
 800a0e2:	6813      	ldr	r3, [r2, #0]
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	b933      	cbnz	r3, 800a0f6 <_free_r+0x32>
 800a0e8:	6063      	str	r3, [r4, #4]
 800a0ea:	6014      	str	r4, [r2, #0]
 800a0ec:	b003      	add	sp, #12
 800a0ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0f2:	f000 ba5f 	b.w	800a5b4 <__malloc_unlock>
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	d90b      	bls.n	800a112 <_free_r+0x4e>
 800a0fa:	6821      	ldr	r1, [r4, #0]
 800a0fc:	1862      	adds	r2, r4, r1
 800a0fe:	4293      	cmp	r3, r2
 800a100:	bf04      	itt	eq
 800a102:	681a      	ldreq	r2, [r3, #0]
 800a104:	685b      	ldreq	r3, [r3, #4]
 800a106:	6063      	str	r3, [r4, #4]
 800a108:	bf04      	itt	eq
 800a10a:	1852      	addeq	r2, r2, r1
 800a10c:	6022      	streq	r2, [r4, #0]
 800a10e:	602c      	str	r4, [r5, #0]
 800a110:	e7ec      	b.n	800a0ec <_free_r+0x28>
 800a112:	461a      	mov	r2, r3
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	b10b      	cbz	r3, 800a11c <_free_r+0x58>
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d9fa      	bls.n	800a112 <_free_r+0x4e>
 800a11c:	6811      	ldr	r1, [r2, #0]
 800a11e:	1855      	adds	r5, r2, r1
 800a120:	42a5      	cmp	r5, r4
 800a122:	d10b      	bne.n	800a13c <_free_r+0x78>
 800a124:	6824      	ldr	r4, [r4, #0]
 800a126:	4421      	add	r1, r4
 800a128:	1854      	adds	r4, r2, r1
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	6011      	str	r1, [r2, #0]
 800a12e:	d1dd      	bne.n	800a0ec <_free_r+0x28>
 800a130:	681c      	ldr	r4, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	6053      	str	r3, [r2, #4]
 800a136:	4421      	add	r1, r4
 800a138:	6011      	str	r1, [r2, #0]
 800a13a:	e7d7      	b.n	800a0ec <_free_r+0x28>
 800a13c:	d902      	bls.n	800a144 <_free_r+0x80>
 800a13e:	230c      	movs	r3, #12
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	e7d3      	b.n	800a0ec <_free_r+0x28>
 800a144:	6825      	ldr	r5, [r4, #0]
 800a146:	1961      	adds	r1, r4, r5
 800a148:	428b      	cmp	r3, r1
 800a14a:	bf04      	itt	eq
 800a14c:	6819      	ldreq	r1, [r3, #0]
 800a14e:	685b      	ldreq	r3, [r3, #4]
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	bf04      	itt	eq
 800a154:	1949      	addeq	r1, r1, r5
 800a156:	6021      	streq	r1, [r4, #0]
 800a158:	6054      	str	r4, [r2, #4]
 800a15a:	e7c7      	b.n	800a0ec <_free_r+0x28>
 800a15c:	b003      	add	sp, #12
 800a15e:	bd30      	pop	{r4, r5, pc}
 800a160:	20004b1c 	.word	0x20004b1c

0800a164 <_malloc_r>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	1ccd      	adds	r5, r1, #3
 800a168:	f025 0503 	bic.w	r5, r5, #3
 800a16c:	3508      	adds	r5, #8
 800a16e:	2d0c      	cmp	r5, #12
 800a170:	bf38      	it	cc
 800a172:	250c      	movcc	r5, #12
 800a174:	2d00      	cmp	r5, #0
 800a176:	4606      	mov	r6, r0
 800a178:	db01      	blt.n	800a17e <_malloc_r+0x1a>
 800a17a:	42a9      	cmp	r1, r5
 800a17c:	d903      	bls.n	800a186 <_malloc_r+0x22>
 800a17e:	230c      	movs	r3, #12
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	2000      	movs	r0, #0
 800a184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a186:	f000 fa0f 	bl	800a5a8 <__malloc_lock>
 800a18a:	4921      	ldr	r1, [pc, #132]	; (800a210 <_malloc_r+0xac>)
 800a18c:	680a      	ldr	r2, [r1, #0]
 800a18e:	4614      	mov	r4, r2
 800a190:	b99c      	cbnz	r4, 800a1ba <_malloc_r+0x56>
 800a192:	4f20      	ldr	r7, [pc, #128]	; (800a214 <_malloc_r+0xb0>)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	b923      	cbnz	r3, 800a1a2 <_malloc_r+0x3e>
 800a198:	4621      	mov	r1, r4
 800a19a:	4630      	mov	r0, r6
 800a19c:	f000 f998 	bl	800a4d0 <_sbrk_r>
 800a1a0:	6038      	str	r0, [r7, #0]
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f000 f993 	bl	800a4d0 <_sbrk_r>
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	d123      	bne.n	800a1f6 <_malloc_r+0x92>
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	6033      	str	r3, [r6, #0]
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f000 f9fe 	bl	800a5b4 <__malloc_unlock>
 800a1b8:	e7e3      	b.n	800a182 <_malloc_r+0x1e>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	1b5b      	subs	r3, r3, r5
 800a1be:	d417      	bmi.n	800a1f0 <_malloc_r+0x8c>
 800a1c0:	2b0b      	cmp	r3, #11
 800a1c2:	d903      	bls.n	800a1cc <_malloc_r+0x68>
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	441c      	add	r4, r3
 800a1c8:	6025      	str	r5, [r4, #0]
 800a1ca:	e004      	b.n	800a1d6 <_malloc_r+0x72>
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	42a2      	cmp	r2, r4
 800a1d0:	bf0c      	ite	eq
 800a1d2:	600b      	streq	r3, [r1, #0]
 800a1d4:	6053      	strne	r3, [r2, #4]
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f000 f9ec 	bl	800a5b4 <__malloc_unlock>
 800a1dc:	f104 000b 	add.w	r0, r4, #11
 800a1e0:	1d23      	adds	r3, r4, #4
 800a1e2:	f020 0007 	bic.w	r0, r0, #7
 800a1e6:	1ac2      	subs	r2, r0, r3
 800a1e8:	d0cc      	beq.n	800a184 <_malloc_r+0x20>
 800a1ea:	1a1b      	subs	r3, r3, r0
 800a1ec:	50a3      	str	r3, [r4, r2]
 800a1ee:	e7c9      	b.n	800a184 <_malloc_r+0x20>
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	6864      	ldr	r4, [r4, #4]
 800a1f4:	e7cc      	b.n	800a190 <_malloc_r+0x2c>
 800a1f6:	1cc4      	adds	r4, r0, #3
 800a1f8:	f024 0403 	bic.w	r4, r4, #3
 800a1fc:	42a0      	cmp	r0, r4
 800a1fe:	d0e3      	beq.n	800a1c8 <_malloc_r+0x64>
 800a200:	1a21      	subs	r1, r4, r0
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f964 	bl	800a4d0 <_sbrk_r>
 800a208:	3001      	adds	r0, #1
 800a20a:	d1dd      	bne.n	800a1c8 <_malloc_r+0x64>
 800a20c:	e7cf      	b.n	800a1ae <_malloc_r+0x4a>
 800a20e:	bf00      	nop
 800a210:	20004b1c 	.word	0x20004b1c
 800a214:	20004b20 	.word	0x20004b20

0800a218 <__ssputs_r>:
 800a218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a21c:	688e      	ldr	r6, [r1, #8]
 800a21e:	429e      	cmp	r6, r3
 800a220:	4682      	mov	sl, r0
 800a222:	460c      	mov	r4, r1
 800a224:	4690      	mov	r8, r2
 800a226:	461f      	mov	r7, r3
 800a228:	d838      	bhi.n	800a29c <__ssputs_r+0x84>
 800a22a:	898a      	ldrh	r2, [r1, #12]
 800a22c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a230:	d032      	beq.n	800a298 <__ssputs_r+0x80>
 800a232:	6825      	ldr	r5, [r4, #0]
 800a234:	6909      	ldr	r1, [r1, #16]
 800a236:	eba5 0901 	sub.w	r9, r5, r1
 800a23a:	6965      	ldr	r5, [r4, #20]
 800a23c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a244:	3301      	adds	r3, #1
 800a246:	444b      	add	r3, r9
 800a248:	106d      	asrs	r5, r5, #1
 800a24a:	429d      	cmp	r5, r3
 800a24c:	bf38      	it	cc
 800a24e:	461d      	movcc	r5, r3
 800a250:	0553      	lsls	r3, r2, #21
 800a252:	d531      	bpl.n	800a2b8 <__ssputs_r+0xa0>
 800a254:	4629      	mov	r1, r5
 800a256:	f7ff ff85 	bl	800a164 <_malloc_r>
 800a25a:	4606      	mov	r6, r0
 800a25c:	b950      	cbnz	r0, 800a274 <__ssputs_r+0x5c>
 800a25e:	230c      	movs	r3, #12
 800a260:	f8ca 3000 	str.w	r3, [sl]
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295
 800a270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a274:	6921      	ldr	r1, [r4, #16]
 800a276:	464a      	mov	r2, r9
 800a278:	f7fe f872 	bl	8008360 <memcpy>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a286:	81a3      	strh	r3, [r4, #12]
 800a288:	6126      	str	r6, [r4, #16]
 800a28a:	6165      	str	r5, [r4, #20]
 800a28c:	444e      	add	r6, r9
 800a28e:	eba5 0509 	sub.w	r5, r5, r9
 800a292:	6026      	str	r6, [r4, #0]
 800a294:	60a5      	str	r5, [r4, #8]
 800a296:	463e      	mov	r6, r7
 800a298:	42be      	cmp	r6, r7
 800a29a:	d900      	bls.n	800a29e <__ssputs_r+0x86>
 800a29c:	463e      	mov	r6, r7
 800a29e:	4632      	mov	r2, r6
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	4641      	mov	r1, r8
 800a2a4:	f000 f966 	bl	800a574 <memmove>
 800a2a8:	68a3      	ldr	r3, [r4, #8]
 800a2aa:	6822      	ldr	r2, [r4, #0]
 800a2ac:	1b9b      	subs	r3, r3, r6
 800a2ae:	4432      	add	r2, r6
 800a2b0:	60a3      	str	r3, [r4, #8]
 800a2b2:	6022      	str	r2, [r4, #0]
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	e7db      	b.n	800a270 <__ssputs_r+0x58>
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	f000 f981 	bl	800a5c0 <_realloc_r>
 800a2be:	4606      	mov	r6, r0
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d1e1      	bne.n	800a288 <__ssputs_r+0x70>
 800a2c4:	6921      	ldr	r1, [r4, #16]
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	f7ff fefc 	bl	800a0c4 <_free_r>
 800a2cc:	e7c7      	b.n	800a25e <__ssputs_r+0x46>
	...

0800a2d0 <_svfiprintf_r>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	4698      	mov	r8, r3
 800a2d6:	898b      	ldrh	r3, [r1, #12]
 800a2d8:	061b      	lsls	r3, r3, #24
 800a2da:	b09d      	sub	sp, #116	; 0x74
 800a2dc:	4607      	mov	r7, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	d50e      	bpl.n	800a302 <_svfiprintf_r+0x32>
 800a2e4:	690b      	ldr	r3, [r1, #16]
 800a2e6:	b963      	cbnz	r3, 800a302 <_svfiprintf_r+0x32>
 800a2e8:	2140      	movs	r1, #64	; 0x40
 800a2ea:	f7ff ff3b 	bl	800a164 <_malloc_r>
 800a2ee:	6028      	str	r0, [r5, #0]
 800a2f0:	6128      	str	r0, [r5, #16]
 800a2f2:	b920      	cbnz	r0, 800a2fe <_svfiprintf_r+0x2e>
 800a2f4:	230c      	movs	r3, #12
 800a2f6:	603b      	str	r3, [r7, #0]
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	e0d1      	b.n	800a4a2 <_svfiprintf_r+0x1d2>
 800a2fe:	2340      	movs	r3, #64	; 0x40
 800a300:	616b      	str	r3, [r5, #20]
 800a302:	2300      	movs	r3, #0
 800a304:	9309      	str	r3, [sp, #36]	; 0x24
 800a306:	2320      	movs	r3, #32
 800a308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a30c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a310:	2330      	movs	r3, #48	; 0x30
 800a312:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4bc <_svfiprintf_r+0x1ec>
 800a316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a31a:	f04f 0901 	mov.w	r9, #1
 800a31e:	4623      	mov	r3, r4
 800a320:	469a      	mov	sl, r3
 800a322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a326:	b10a      	cbz	r2, 800a32c <_svfiprintf_r+0x5c>
 800a328:	2a25      	cmp	r2, #37	; 0x25
 800a32a:	d1f9      	bne.n	800a320 <_svfiprintf_r+0x50>
 800a32c:	ebba 0b04 	subs.w	fp, sl, r4
 800a330:	d00b      	beq.n	800a34a <_svfiprintf_r+0x7a>
 800a332:	465b      	mov	r3, fp
 800a334:	4622      	mov	r2, r4
 800a336:	4629      	mov	r1, r5
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff ff6d 	bl	800a218 <__ssputs_r>
 800a33e:	3001      	adds	r0, #1
 800a340:	f000 80aa 	beq.w	800a498 <_svfiprintf_r+0x1c8>
 800a344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a346:	445a      	add	r2, fp
 800a348:	9209      	str	r2, [sp, #36]	; 0x24
 800a34a:	f89a 3000 	ldrb.w	r3, [sl]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 80a2 	beq.w	800a498 <_svfiprintf_r+0x1c8>
 800a354:	2300      	movs	r3, #0
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35e:	f10a 0a01 	add.w	sl, sl, #1
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	9307      	str	r3, [sp, #28]
 800a366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a36a:	931a      	str	r3, [sp, #104]	; 0x68
 800a36c:	4654      	mov	r4, sl
 800a36e:	2205      	movs	r2, #5
 800a370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a374:	4851      	ldr	r0, [pc, #324]	; (800a4bc <_svfiprintf_r+0x1ec>)
 800a376:	f7f5 ff3b 	bl	80001f0 <memchr>
 800a37a:	9a04      	ldr	r2, [sp, #16]
 800a37c:	b9d8      	cbnz	r0, 800a3b6 <_svfiprintf_r+0xe6>
 800a37e:	06d0      	lsls	r0, r2, #27
 800a380:	bf44      	itt	mi
 800a382:	2320      	movmi	r3, #32
 800a384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a388:	0711      	lsls	r1, r2, #28
 800a38a:	bf44      	itt	mi
 800a38c:	232b      	movmi	r3, #43	; 0x2b
 800a38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a392:	f89a 3000 	ldrb.w	r3, [sl]
 800a396:	2b2a      	cmp	r3, #42	; 0x2a
 800a398:	d015      	beq.n	800a3c6 <_svfiprintf_r+0xf6>
 800a39a:	9a07      	ldr	r2, [sp, #28]
 800a39c:	4654      	mov	r4, sl
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f04f 0c0a 	mov.w	ip, #10
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3aa:	3b30      	subs	r3, #48	; 0x30
 800a3ac:	2b09      	cmp	r3, #9
 800a3ae:	d94e      	bls.n	800a44e <_svfiprintf_r+0x17e>
 800a3b0:	b1b0      	cbz	r0, 800a3e0 <_svfiprintf_r+0x110>
 800a3b2:	9207      	str	r2, [sp, #28]
 800a3b4:	e014      	b.n	800a3e0 <_svfiprintf_r+0x110>
 800a3b6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	46a2      	mov	sl, r4
 800a3c4:	e7d2      	b.n	800a36c <_svfiprintf_r+0x9c>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	1d19      	adds	r1, r3, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	9103      	str	r1, [sp, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfbb      	ittet	lt
 800a3d2:	425b      	neglt	r3, r3
 800a3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d8:	9307      	strge	r3, [sp, #28]
 800a3da:	9307      	strlt	r3, [sp, #28]
 800a3dc:	bfb8      	it	lt
 800a3de:	9204      	strlt	r2, [sp, #16]
 800a3e0:	7823      	ldrb	r3, [r4, #0]
 800a3e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a3e4:	d10c      	bne.n	800a400 <_svfiprintf_r+0x130>
 800a3e6:	7863      	ldrb	r3, [r4, #1]
 800a3e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ea:	d135      	bne.n	800a458 <_svfiprintf_r+0x188>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	1d1a      	adds	r2, r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	9203      	str	r2, [sp, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	bfb8      	it	lt
 800a3f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3fc:	3402      	adds	r4, #2
 800a3fe:	9305      	str	r3, [sp, #20]
 800a400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4cc <_svfiprintf_r+0x1fc>
 800a404:	7821      	ldrb	r1, [r4, #0]
 800a406:	2203      	movs	r2, #3
 800a408:	4650      	mov	r0, sl
 800a40a:	f7f5 fef1 	bl	80001f0 <memchr>
 800a40e:	b140      	cbz	r0, 800a422 <_svfiprintf_r+0x152>
 800a410:	2340      	movs	r3, #64	; 0x40
 800a412:	eba0 000a 	sub.w	r0, r0, sl
 800a416:	fa03 f000 	lsl.w	r0, r3, r0
 800a41a:	9b04      	ldr	r3, [sp, #16]
 800a41c:	4303      	orrs	r3, r0
 800a41e:	3401      	adds	r4, #1
 800a420:	9304      	str	r3, [sp, #16]
 800a422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a426:	4826      	ldr	r0, [pc, #152]	; (800a4c0 <_svfiprintf_r+0x1f0>)
 800a428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a42c:	2206      	movs	r2, #6
 800a42e:	f7f5 fedf 	bl	80001f0 <memchr>
 800a432:	2800      	cmp	r0, #0
 800a434:	d038      	beq.n	800a4a8 <_svfiprintf_r+0x1d8>
 800a436:	4b23      	ldr	r3, [pc, #140]	; (800a4c4 <_svfiprintf_r+0x1f4>)
 800a438:	bb1b      	cbnz	r3, 800a482 <_svfiprintf_r+0x1b2>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	3307      	adds	r3, #7
 800a43e:	f023 0307 	bic.w	r3, r3, #7
 800a442:	3308      	adds	r3, #8
 800a444:	9303      	str	r3, [sp, #12]
 800a446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a448:	4433      	add	r3, r6
 800a44a:	9309      	str	r3, [sp, #36]	; 0x24
 800a44c:	e767      	b.n	800a31e <_svfiprintf_r+0x4e>
 800a44e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a452:	460c      	mov	r4, r1
 800a454:	2001      	movs	r0, #1
 800a456:	e7a5      	b.n	800a3a4 <_svfiprintf_r+0xd4>
 800a458:	2300      	movs	r3, #0
 800a45a:	3401      	adds	r4, #1
 800a45c:	9305      	str	r3, [sp, #20]
 800a45e:	4619      	mov	r1, r3
 800a460:	f04f 0c0a 	mov.w	ip, #10
 800a464:	4620      	mov	r0, r4
 800a466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a46a:	3a30      	subs	r2, #48	; 0x30
 800a46c:	2a09      	cmp	r2, #9
 800a46e:	d903      	bls.n	800a478 <_svfiprintf_r+0x1a8>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0c5      	beq.n	800a400 <_svfiprintf_r+0x130>
 800a474:	9105      	str	r1, [sp, #20]
 800a476:	e7c3      	b.n	800a400 <_svfiprintf_r+0x130>
 800a478:	fb0c 2101 	mla	r1, ip, r1, r2
 800a47c:	4604      	mov	r4, r0
 800a47e:	2301      	movs	r3, #1
 800a480:	e7f0      	b.n	800a464 <_svfiprintf_r+0x194>
 800a482:	ab03      	add	r3, sp, #12
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	462a      	mov	r2, r5
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <_svfiprintf_r+0x1f8>)
 800a48a:	a904      	add	r1, sp, #16
 800a48c:	4638      	mov	r0, r7
 800a48e:	f7fe f81d 	bl	80084cc <_printf_float>
 800a492:	1c42      	adds	r2, r0, #1
 800a494:	4606      	mov	r6, r0
 800a496:	d1d6      	bne.n	800a446 <_svfiprintf_r+0x176>
 800a498:	89ab      	ldrh	r3, [r5, #12]
 800a49a:	065b      	lsls	r3, r3, #25
 800a49c:	f53f af2c 	bmi.w	800a2f8 <_svfiprintf_r+0x28>
 800a4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4a2:	b01d      	add	sp, #116	; 0x74
 800a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	ab03      	add	r3, sp, #12
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <_svfiprintf_r+0x1f8>)
 800a4b0:	a904      	add	r1, sp, #16
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f7fe faae 	bl	8008a14 <_printf_i>
 800a4b8:	e7eb      	b.n	800a492 <_svfiprintf_r+0x1c2>
 800a4ba:	bf00      	nop
 800a4bc:	0800bac4 	.word	0x0800bac4
 800a4c0:	0800bace 	.word	0x0800bace
 800a4c4:	080084cd 	.word	0x080084cd
 800a4c8:	0800a219 	.word	0x0800a219
 800a4cc:	0800baca 	.word	0x0800baca

0800a4d0 <_sbrk_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d06      	ldr	r5, [pc, #24]	; (800a4ec <_sbrk_r+0x1c>)
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	602b      	str	r3, [r5, #0]
 800a4dc:	f7f7 fc3c 	bl	8001d58 <_sbrk>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d102      	bne.n	800a4ea <_sbrk_r+0x1a>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b103      	cbz	r3, 800a4ea <_sbrk_r+0x1a>
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	20004c14 	.word	0x20004c14

0800a4f0 <__assert_func>:
 800a4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4f2:	4614      	mov	r4, r2
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	4b09      	ldr	r3, [pc, #36]	; (800a51c <__assert_func+0x2c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	68d8      	ldr	r0, [r3, #12]
 800a4fe:	b14c      	cbz	r4, 800a514 <__assert_func+0x24>
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <__assert_func+0x30>)
 800a502:	9100      	str	r1, [sp, #0]
 800a504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a508:	4906      	ldr	r1, [pc, #24]	; (800a524 <__assert_func+0x34>)
 800a50a:	462b      	mov	r3, r5
 800a50c:	f000 f80e 	bl	800a52c <fiprintf>
 800a510:	f000 faa4 	bl	800aa5c <abort>
 800a514:	4b04      	ldr	r3, [pc, #16]	; (800a528 <__assert_func+0x38>)
 800a516:	461c      	mov	r4, r3
 800a518:	e7f3      	b.n	800a502 <__assert_func+0x12>
 800a51a:	bf00      	nop
 800a51c:	20000010 	.word	0x20000010
 800a520:	0800bad5 	.word	0x0800bad5
 800a524:	0800bae2 	.word	0x0800bae2
 800a528:	0800bb10 	.word	0x0800bb10

0800a52c <fiprintf>:
 800a52c:	b40e      	push	{r1, r2, r3}
 800a52e:	b503      	push	{r0, r1, lr}
 800a530:	4601      	mov	r1, r0
 800a532:	ab03      	add	r3, sp, #12
 800a534:	4805      	ldr	r0, [pc, #20]	; (800a54c <fiprintf+0x20>)
 800a536:	f853 2b04 	ldr.w	r2, [r3], #4
 800a53a:	6800      	ldr	r0, [r0, #0]
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	f000 f88f 	bl	800a660 <_vfiprintf_r>
 800a542:	b002      	add	sp, #8
 800a544:	f85d eb04 	ldr.w	lr, [sp], #4
 800a548:	b003      	add	sp, #12
 800a54a:	4770      	bx	lr
 800a54c:	20000010 	.word	0x20000010

0800a550 <__ascii_mbtowc>:
 800a550:	b082      	sub	sp, #8
 800a552:	b901      	cbnz	r1, 800a556 <__ascii_mbtowc+0x6>
 800a554:	a901      	add	r1, sp, #4
 800a556:	b142      	cbz	r2, 800a56a <__ascii_mbtowc+0x1a>
 800a558:	b14b      	cbz	r3, 800a56e <__ascii_mbtowc+0x1e>
 800a55a:	7813      	ldrb	r3, [r2, #0]
 800a55c:	600b      	str	r3, [r1, #0]
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	1e10      	subs	r0, r2, #0
 800a562:	bf18      	it	ne
 800a564:	2001      	movne	r0, #1
 800a566:	b002      	add	sp, #8
 800a568:	4770      	bx	lr
 800a56a:	4610      	mov	r0, r2
 800a56c:	e7fb      	b.n	800a566 <__ascii_mbtowc+0x16>
 800a56e:	f06f 0001 	mvn.w	r0, #1
 800a572:	e7f8      	b.n	800a566 <__ascii_mbtowc+0x16>

0800a574 <memmove>:
 800a574:	4288      	cmp	r0, r1
 800a576:	b510      	push	{r4, lr}
 800a578:	eb01 0402 	add.w	r4, r1, r2
 800a57c:	d902      	bls.n	800a584 <memmove+0x10>
 800a57e:	4284      	cmp	r4, r0
 800a580:	4623      	mov	r3, r4
 800a582:	d807      	bhi.n	800a594 <memmove+0x20>
 800a584:	1e43      	subs	r3, r0, #1
 800a586:	42a1      	cmp	r1, r4
 800a588:	d008      	beq.n	800a59c <memmove+0x28>
 800a58a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a592:	e7f8      	b.n	800a586 <memmove+0x12>
 800a594:	4402      	add	r2, r0
 800a596:	4601      	mov	r1, r0
 800a598:	428a      	cmp	r2, r1
 800a59a:	d100      	bne.n	800a59e <memmove+0x2a>
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5a6:	e7f7      	b.n	800a598 <memmove+0x24>

0800a5a8 <__malloc_lock>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__malloc_lock+0x8>)
 800a5aa:	f000 bc17 	b.w	800addc <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20004c1c 	.word	0x20004c1c

0800a5b4 <__malloc_unlock>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__malloc_unlock+0x8>)
 800a5b6:	f000 bc12 	b.w	800adde <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	20004c1c 	.word	0x20004c1c

0800a5c0 <_realloc_r>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	460e      	mov	r6, r1
 800a5c8:	b921      	cbnz	r1, 800a5d4 <_realloc_r+0x14>
 800a5ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	f7ff bdc8 	b.w	800a164 <_malloc_r>
 800a5d4:	b922      	cbnz	r2, 800a5e0 <_realloc_r+0x20>
 800a5d6:	f7ff fd75 	bl	800a0c4 <_free_r>
 800a5da:	4625      	mov	r5, r4
 800a5dc:	4628      	mov	r0, r5
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	f000 fc62 	bl	800aea8 <_malloc_usable_size_r>
 800a5e4:	42a0      	cmp	r0, r4
 800a5e6:	d20f      	bcs.n	800a608 <_realloc_r+0x48>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	f7ff fdba 	bl	800a164 <_malloc_r>
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d0f2      	beq.n	800a5dc <_realloc_r+0x1c>
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	f7fd feb1 	bl	8008360 <memcpy>
 800a5fe:	4631      	mov	r1, r6
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff fd5f 	bl	800a0c4 <_free_r>
 800a606:	e7e9      	b.n	800a5dc <_realloc_r+0x1c>
 800a608:	4635      	mov	r5, r6
 800a60a:	e7e7      	b.n	800a5dc <_realloc_r+0x1c>

0800a60c <__sfputc_r>:
 800a60c:	6893      	ldr	r3, [r2, #8]
 800a60e:	3b01      	subs	r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	b410      	push	{r4}
 800a614:	6093      	str	r3, [r2, #8]
 800a616:	da08      	bge.n	800a62a <__sfputc_r+0x1e>
 800a618:	6994      	ldr	r4, [r2, #24]
 800a61a:	42a3      	cmp	r3, r4
 800a61c:	db01      	blt.n	800a622 <__sfputc_r+0x16>
 800a61e:	290a      	cmp	r1, #10
 800a620:	d103      	bne.n	800a62a <__sfputc_r+0x1e>
 800a622:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a626:	f000 b94b 	b.w	800a8c0 <__swbuf_r>
 800a62a:	6813      	ldr	r3, [r2, #0]
 800a62c:	1c58      	adds	r0, r3, #1
 800a62e:	6010      	str	r0, [r2, #0]
 800a630:	7019      	strb	r1, [r3, #0]
 800a632:	4608      	mov	r0, r1
 800a634:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <__sfputs_r>:
 800a63a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63c:	4606      	mov	r6, r0
 800a63e:	460f      	mov	r7, r1
 800a640:	4614      	mov	r4, r2
 800a642:	18d5      	adds	r5, r2, r3
 800a644:	42ac      	cmp	r4, r5
 800a646:	d101      	bne.n	800a64c <__sfputs_r+0x12>
 800a648:	2000      	movs	r0, #0
 800a64a:	e007      	b.n	800a65c <__sfputs_r+0x22>
 800a64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a650:	463a      	mov	r2, r7
 800a652:	4630      	mov	r0, r6
 800a654:	f7ff ffda 	bl	800a60c <__sfputc_r>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d1f3      	bne.n	800a644 <__sfputs_r+0xa>
 800a65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a660 <_vfiprintf_r>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	460d      	mov	r5, r1
 800a666:	b09d      	sub	sp, #116	; 0x74
 800a668:	4614      	mov	r4, r2
 800a66a:	4698      	mov	r8, r3
 800a66c:	4606      	mov	r6, r0
 800a66e:	b118      	cbz	r0, 800a678 <_vfiprintf_r+0x18>
 800a670:	6983      	ldr	r3, [r0, #24]
 800a672:	b90b      	cbnz	r3, 800a678 <_vfiprintf_r+0x18>
 800a674:	f000 fb14 	bl	800aca0 <__sinit>
 800a678:	4b89      	ldr	r3, [pc, #548]	; (800a8a0 <_vfiprintf_r+0x240>)
 800a67a:	429d      	cmp	r5, r3
 800a67c:	d11b      	bne.n	800a6b6 <_vfiprintf_r+0x56>
 800a67e:	6875      	ldr	r5, [r6, #4]
 800a680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a682:	07d9      	lsls	r1, r3, #31
 800a684:	d405      	bmi.n	800a692 <_vfiprintf_r+0x32>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	059a      	lsls	r2, r3, #22
 800a68a:	d402      	bmi.n	800a692 <_vfiprintf_r+0x32>
 800a68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68e:	f000 fba5 	bl	800addc <__retarget_lock_acquire_recursive>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	071b      	lsls	r3, r3, #28
 800a696:	d501      	bpl.n	800a69c <_vfiprintf_r+0x3c>
 800a698:	692b      	ldr	r3, [r5, #16]
 800a69a:	b9eb      	cbnz	r3, 800a6d8 <_vfiprintf_r+0x78>
 800a69c:	4629      	mov	r1, r5
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f000 f96e 	bl	800a980 <__swsetup_r>
 800a6a4:	b1c0      	cbz	r0, 800a6d8 <_vfiprintf_r+0x78>
 800a6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a8:	07dc      	lsls	r4, r3, #31
 800a6aa:	d50e      	bpl.n	800a6ca <_vfiprintf_r+0x6a>
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	b01d      	add	sp, #116	; 0x74
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	4b7b      	ldr	r3, [pc, #492]	; (800a8a4 <_vfiprintf_r+0x244>)
 800a6b8:	429d      	cmp	r5, r3
 800a6ba:	d101      	bne.n	800a6c0 <_vfiprintf_r+0x60>
 800a6bc:	68b5      	ldr	r5, [r6, #8]
 800a6be:	e7df      	b.n	800a680 <_vfiprintf_r+0x20>
 800a6c0:	4b79      	ldr	r3, [pc, #484]	; (800a8a8 <_vfiprintf_r+0x248>)
 800a6c2:	429d      	cmp	r5, r3
 800a6c4:	bf08      	it	eq
 800a6c6:	68f5      	ldreq	r5, [r6, #12]
 800a6c8:	e7da      	b.n	800a680 <_vfiprintf_r+0x20>
 800a6ca:	89ab      	ldrh	r3, [r5, #12]
 800a6cc:	0598      	lsls	r0, r3, #22
 800a6ce:	d4ed      	bmi.n	800a6ac <_vfiprintf_r+0x4c>
 800a6d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6d2:	f000 fb84 	bl	800adde <__retarget_lock_release_recursive>
 800a6d6:	e7e9      	b.n	800a6ac <_vfiprintf_r+0x4c>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9309      	str	r3, [sp, #36]	; 0x24
 800a6dc:	2320      	movs	r3, #32
 800a6de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6e6:	2330      	movs	r3, #48	; 0x30
 800a6e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8ac <_vfiprintf_r+0x24c>
 800a6ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6f0:	f04f 0901 	mov.w	r9, #1
 800a6f4:	4623      	mov	r3, r4
 800a6f6:	469a      	mov	sl, r3
 800a6f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6fc:	b10a      	cbz	r2, 800a702 <_vfiprintf_r+0xa2>
 800a6fe:	2a25      	cmp	r2, #37	; 0x25
 800a700:	d1f9      	bne.n	800a6f6 <_vfiprintf_r+0x96>
 800a702:	ebba 0b04 	subs.w	fp, sl, r4
 800a706:	d00b      	beq.n	800a720 <_vfiprintf_r+0xc0>
 800a708:	465b      	mov	r3, fp
 800a70a:	4622      	mov	r2, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	4630      	mov	r0, r6
 800a710:	f7ff ff93 	bl	800a63a <__sfputs_r>
 800a714:	3001      	adds	r0, #1
 800a716:	f000 80aa 	beq.w	800a86e <_vfiprintf_r+0x20e>
 800a71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a71c:	445a      	add	r2, fp
 800a71e:	9209      	str	r2, [sp, #36]	; 0x24
 800a720:	f89a 3000 	ldrb.w	r3, [sl]
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 80a2 	beq.w	800a86e <_vfiprintf_r+0x20e>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f04f 32ff 	mov.w	r2, #4294967295
 800a730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a734:	f10a 0a01 	add.w	sl, sl, #1
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	9307      	str	r3, [sp, #28]
 800a73c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a740:	931a      	str	r3, [sp, #104]	; 0x68
 800a742:	4654      	mov	r4, sl
 800a744:	2205      	movs	r2, #5
 800a746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74a:	4858      	ldr	r0, [pc, #352]	; (800a8ac <_vfiprintf_r+0x24c>)
 800a74c:	f7f5 fd50 	bl	80001f0 <memchr>
 800a750:	9a04      	ldr	r2, [sp, #16]
 800a752:	b9d8      	cbnz	r0, 800a78c <_vfiprintf_r+0x12c>
 800a754:	06d1      	lsls	r1, r2, #27
 800a756:	bf44      	itt	mi
 800a758:	2320      	movmi	r3, #32
 800a75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a75e:	0713      	lsls	r3, r2, #28
 800a760:	bf44      	itt	mi
 800a762:	232b      	movmi	r3, #43	; 0x2b
 800a764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a768:	f89a 3000 	ldrb.w	r3, [sl]
 800a76c:	2b2a      	cmp	r3, #42	; 0x2a
 800a76e:	d015      	beq.n	800a79c <_vfiprintf_r+0x13c>
 800a770:	9a07      	ldr	r2, [sp, #28]
 800a772:	4654      	mov	r4, sl
 800a774:	2000      	movs	r0, #0
 800a776:	f04f 0c0a 	mov.w	ip, #10
 800a77a:	4621      	mov	r1, r4
 800a77c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a780:	3b30      	subs	r3, #48	; 0x30
 800a782:	2b09      	cmp	r3, #9
 800a784:	d94e      	bls.n	800a824 <_vfiprintf_r+0x1c4>
 800a786:	b1b0      	cbz	r0, 800a7b6 <_vfiprintf_r+0x156>
 800a788:	9207      	str	r2, [sp, #28]
 800a78a:	e014      	b.n	800a7b6 <_vfiprintf_r+0x156>
 800a78c:	eba0 0308 	sub.w	r3, r0, r8
 800a790:	fa09 f303 	lsl.w	r3, r9, r3
 800a794:	4313      	orrs	r3, r2
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	46a2      	mov	sl, r4
 800a79a:	e7d2      	b.n	800a742 <_vfiprintf_r+0xe2>
 800a79c:	9b03      	ldr	r3, [sp, #12]
 800a79e:	1d19      	adds	r1, r3, #4
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	9103      	str	r1, [sp, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfbb      	ittet	lt
 800a7a8:	425b      	neglt	r3, r3
 800a7aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ae:	9307      	strge	r3, [sp, #28]
 800a7b0:	9307      	strlt	r3, [sp, #28]
 800a7b2:	bfb8      	it	lt
 800a7b4:	9204      	strlt	r2, [sp, #16]
 800a7b6:	7823      	ldrb	r3, [r4, #0]
 800a7b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ba:	d10c      	bne.n	800a7d6 <_vfiprintf_r+0x176>
 800a7bc:	7863      	ldrb	r3, [r4, #1]
 800a7be:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c0:	d135      	bne.n	800a82e <_vfiprintf_r+0x1ce>
 800a7c2:	9b03      	ldr	r3, [sp, #12]
 800a7c4:	1d1a      	adds	r2, r3, #4
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	9203      	str	r2, [sp, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfb8      	it	lt
 800a7ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7d2:	3402      	adds	r4, #2
 800a7d4:	9305      	str	r3, [sp, #20]
 800a7d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8bc <_vfiprintf_r+0x25c>
 800a7da:	7821      	ldrb	r1, [r4, #0]
 800a7dc:	2203      	movs	r2, #3
 800a7de:	4650      	mov	r0, sl
 800a7e0:	f7f5 fd06 	bl	80001f0 <memchr>
 800a7e4:	b140      	cbz	r0, 800a7f8 <_vfiprintf_r+0x198>
 800a7e6:	2340      	movs	r3, #64	; 0x40
 800a7e8:	eba0 000a 	sub.w	r0, r0, sl
 800a7ec:	fa03 f000 	lsl.w	r0, r3, r0
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	4303      	orrs	r3, r0
 800a7f4:	3401      	adds	r4, #1
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fc:	482c      	ldr	r0, [pc, #176]	; (800a8b0 <_vfiprintf_r+0x250>)
 800a7fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a802:	2206      	movs	r2, #6
 800a804:	f7f5 fcf4 	bl	80001f0 <memchr>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d03f      	beq.n	800a88c <_vfiprintf_r+0x22c>
 800a80c:	4b29      	ldr	r3, [pc, #164]	; (800a8b4 <_vfiprintf_r+0x254>)
 800a80e:	bb1b      	cbnz	r3, 800a858 <_vfiprintf_r+0x1f8>
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	3307      	adds	r3, #7
 800a814:	f023 0307 	bic.w	r3, r3, #7
 800a818:	3308      	adds	r3, #8
 800a81a:	9303      	str	r3, [sp, #12]
 800a81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81e:	443b      	add	r3, r7
 800a820:	9309      	str	r3, [sp, #36]	; 0x24
 800a822:	e767      	b.n	800a6f4 <_vfiprintf_r+0x94>
 800a824:	fb0c 3202 	mla	r2, ip, r2, r3
 800a828:	460c      	mov	r4, r1
 800a82a:	2001      	movs	r0, #1
 800a82c:	e7a5      	b.n	800a77a <_vfiprintf_r+0x11a>
 800a82e:	2300      	movs	r3, #0
 800a830:	3401      	adds	r4, #1
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	4619      	mov	r1, r3
 800a836:	f04f 0c0a 	mov.w	ip, #10
 800a83a:	4620      	mov	r0, r4
 800a83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a840:	3a30      	subs	r2, #48	; 0x30
 800a842:	2a09      	cmp	r2, #9
 800a844:	d903      	bls.n	800a84e <_vfiprintf_r+0x1ee>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0c5      	beq.n	800a7d6 <_vfiprintf_r+0x176>
 800a84a:	9105      	str	r1, [sp, #20]
 800a84c:	e7c3      	b.n	800a7d6 <_vfiprintf_r+0x176>
 800a84e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a852:	4604      	mov	r4, r0
 800a854:	2301      	movs	r3, #1
 800a856:	e7f0      	b.n	800a83a <_vfiprintf_r+0x1da>
 800a858:	ab03      	add	r3, sp, #12
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	462a      	mov	r2, r5
 800a85e:	4b16      	ldr	r3, [pc, #88]	; (800a8b8 <_vfiprintf_r+0x258>)
 800a860:	a904      	add	r1, sp, #16
 800a862:	4630      	mov	r0, r6
 800a864:	f7fd fe32 	bl	80084cc <_printf_float>
 800a868:	4607      	mov	r7, r0
 800a86a:	1c78      	adds	r0, r7, #1
 800a86c:	d1d6      	bne.n	800a81c <_vfiprintf_r+0x1bc>
 800a86e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a870:	07d9      	lsls	r1, r3, #31
 800a872:	d405      	bmi.n	800a880 <_vfiprintf_r+0x220>
 800a874:	89ab      	ldrh	r3, [r5, #12]
 800a876:	059a      	lsls	r2, r3, #22
 800a878:	d402      	bmi.n	800a880 <_vfiprintf_r+0x220>
 800a87a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a87c:	f000 faaf 	bl	800adde <__retarget_lock_release_recursive>
 800a880:	89ab      	ldrh	r3, [r5, #12]
 800a882:	065b      	lsls	r3, r3, #25
 800a884:	f53f af12 	bmi.w	800a6ac <_vfiprintf_r+0x4c>
 800a888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88a:	e711      	b.n	800a6b0 <_vfiprintf_r+0x50>
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	462a      	mov	r2, r5
 800a892:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <_vfiprintf_r+0x258>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4630      	mov	r0, r6
 800a898:	f7fe f8bc 	bl	8008a14 <_printf_i>
 800a89c:	e7e4      	b.n	800a868 <_vfiprintf_r+0x208>
 800a89e:	bf00      	nop
 800a8a0:	0800bc3c 	.word	0x0800bc3c
 800a8a4:	0800bc5c 	.word	0x0800bc5c
 800a8a8:	0800bc1c 	.word	0x0800bc1c
 800a8ac:	0800bac4 	.word	0x0800bac4
 800a8b0:	0800bace 	.word	0x0800bace
 800a8b4:	080084cd 	.word	0x080084cd
 800a8b8:	0800a63b 	.word	0x0800a63b
 800a8bc:	0800baca 	.word	0x0800baca

0800a8c0 <__swbuf_r>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	460e      	mov	r6, r1
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	b118      	cbz	r0, 800a8d2 <__swbuf_r+0x12>
 800a8ca:	6983      	ldr	r3, [r0, #24]
 800a8cc:	b90b      	cbnz	r3, 800a8d2 <__swbuf_r+0x12>
 800a8ce:	f000 f9e7 	bl	800aca0 <__sinit>
 800a8d2:	4b21      	ldr	r3, [pc, #132]	; (800a958 <__swbuf_r+0x98>)
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	d12b      	bne.n	800a930 <__swbuf_r+0x70>
 800a8d8:	686c      	ldr	r4, [r5, #4]
 800a8da:	69a3      	ldr	r3, [r4, #24]
 800a8dc:	60a3      	str	r3, [r4, #8]
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	071a      	lsls	r2, r3, #28
 800a8e2:	d52f      	bpl.n	800a944 <__swbuf_r+0x84>
 800a8e4:	6923      	ldr	r3, [r4, #16]
 800a8e6:	b36b      	cbz	r3, 800a944 <__swbuf_r+0x84>
 800a8e8:	6923      	ldr	r3, [r4, #16]
 800a8ea:	6820      	ldr	r0, [r4, #0]
 800a8ec:	1ac0      	subs	r0, r0, r3
 800a8ee:	6963      	ldr	r3, [r4, #20]
 800a8f0:	b2f6      	uxtb	r6, r6
 800a8f2:	4283      	cmp	r3, r0
 800a8f4:	4637      	mov	r7, r6
 800a8f6:	dc04      	bgt.n	800a902 <__swbuf_r+0x42>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 f93c 	bl	800ab78 <_fflush_r>
 800a900:	bb30      	cbnz	r0, 800a950 <__swbuf_r+0x90>
 800a902:	68a3      	ldr	r3, [r4, #8]
 800a904:	3b01      	subs	r3, #1
 800a906:	60a3      	str	r3, [r4, #8]
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	6022      	str	r2, [r4, #0]
 800a90e:	701e      	strb	r6, [r3, #0]
 800a910:	6963      	ldr	r3, [r4, #20]
 800a912:	3001      	adds	r0, #1
 800a914:	4283      	cmp	r3, r0
 800a916:	d004      	beq.n	800a922 <__swbuf_r+0x62>
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	07db      	lsls	r3, r3, #31
 800a91c:	d506      	bpl.n	800a92c <__swbuf_r+0x6c>
 800a91e:	2e0a      	cmp	r6, #10
 800a920:	d104      	bne.n	800a92c <__swbuf_r+0x6c>
 800a922:	4621      	mov	r1, r4
 800a924:	4628      	mov	r0, r5
 800a926:	f000 f927 	bl	800ab78 <_fflush_r>
 800a92a:	b988      	cbnz	r0, 800a950 <__swbuf_r+0x90>
 800a92c:	4638      	mov	r0, r7
 800a92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a930:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <__swbuf_r+0x9c>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <__swbuf_r+0x7a>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7cf      	b.n	800a8da <__swbuf_r+0x1a>
 800a93a:	4b09      	ldr	r3, [pc, #36]	; (800a960 <__swbuf_r+0xa0>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7ca      	b.n	800a8da <__swbuf_r+0x1a>
 800a944:	4621      	mov	r1, r4
 800a946:	4628      	mov	r0, r5
 800a948:	f000 f81a 	bl	800a980 <__swsetup_r>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d0cb      	beq.n	800a8e8 <__swbuf_r+0x28>
 800a950:	f04f 37ff 	mov.w	r7, #4294967295
 800a954:	e7ea      	b.n	800a92c <__swbuf_r+0x6c>
 800a956:	bf00      	nop
 800a958:	0800bc3c 	.word	0x0800bc3c
 800a95c:	0800bc5c 	.word	0x0800bc5c
 800a960:	0800bc1c 	.word	0x0800bc1c

0800a964 <__ascii_wctomb>:
 800a964:	b149      	cbz	r1, 800a97a <__ascii_wctomb+0x16>
 800a966:	2aff      	cmp	r2, #255	; 0xff
 800a968:	bf85      	ittet	hi
 800a96a:	238a      	movhi	r3, #138	; 0x8a
 800a96c:	6003      	strhi	r3, [r0, #0]
 800a96e:	700a      	strbls	r2, [r1, #0]
 800a970:	f04f 30ff 	movhi.w	r0, #4294967295
 800a974:	bf98      	it	ls
 800a976:	2001      	movls	r0, #1
 800a978:	4770      	bx	lr
 800a97a:	4608      	mov	r0, r1
 800a97c:	4770      	bx	lr
	...

0800a980 <__swsetup_r>:
 800a980:	4b32      	ldr	r3, [pc, #200]	; (800aa4c <__swsetup_r+0xcc>)
 800a982:	b570      	push	{r4, r5, r6, lr}
 800a984:	681d      	ldr	r5, [r3, #0]
 800a986:	4606      	mov	r6, r0
 800a988:	460c      	mov	r4, r1
 800a98a:	b125      	cbz	r5, 800a996 <__swsetup_r+0x16>
 800a98c:	69ab      	ldr	r3, [r5, #24]
 800a98e:	b913      	cbnz	r3, 800a996 <__swsetup_r+0x16>
 800a990:	4628      	mov	r0, r5
 800a992:	f000 f985 	bl	800aca0 <__sinit>
 800a996:	4b2e      	ldr	r3, [pc, #184]	; (800aa50 <__swsetup_r+0xd0>)
 800a998:	429c      	cmp	r4, r3
 800a99a:	d10f      	bne.n	800a9bc <__swsetup_r+0x3c>
 800a99c:	686c      	ldr	r4, [r5, #4]
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9a4:	0719      	lsls	r1, r3, #28
 800a9a6:	d42c      	bmi.n	800aa02 <__swsetup_r+0x82>
 800a9a8:	06dd      	lsls	r5, r3, #27
 800a9aa:	d411      	bmi.n	800a9d0 <__swsetup_r+0x50>
 800a9ac:	2309      	movs	r3, #9
 800a9ae:	6033      	str	r3, [r6, #0]
 800a9b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ba:	e03e      	b.n	800aa3a <__swsetup_r+0xba>
 800a9bc:	4b25      	ldr	r3, [pc, #148]	; (800aa54 <__swsetup_r+0xd4>)
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d101      	bne.n	800a9c6 <__swsetup_r+0x46>
 800a9c2:	68ac      	ldr	r4, [r5, #8]
 800a9c4:	e7eb      	b.n	800a99e <__swsetup_r+0x1e>
 800a9c6:	4b24      	ldr	r3, [pc, #144]	; (800aa58 <__swsetup_r+0xd8>)
 800a9c8:	429c      	cmp	r4, r3
 800a9ca:	bf08      	it	eq
 800a9cc:	68ec      	ldreq	r4, [r5, #12]
 800a9ce:	e7e6      	b.n	800a99e <__swsetup_r+0x1e>
 800a9d0:	0758      	lsls	r0, r3, #29
 800a9d2:	d512      	bpl.n	800a9fa <__swsetup_r+0x7a>
 800a9d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9d6:	b141      	cbz	r1, 800a9ea <__swsetup_r+0x6a>
 800a9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d002      	beq.n	800a9e6 <__swsetup_r+0x66>
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7ff fb6f 	bl	800a0c4 <_free_r>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	6063      	str	r3, [r4, #4]
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f043 0308 	orr.w	r3, r3, #8
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	b94b      	cbnz	r3, 800aa1a <__swsetup_r+0x9a>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa10:	d003      	beq.n	800aa1a <__swsetup_r+0x9a>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4630      	mov	r0, r6
 800aa16:	f000 fa07 	bl	800ae28 <__smakebuf_r>
 800aa1a:	89a0      	ldrh	r0, [r4, #12]
 800aa1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa20:	f010 0301 	ands.w	r3, r0, #1
 800aa24:	d00a      	beq.n	800aa3c <__swsetup_r+0xbc>
 800aa26:	2300      	movs	r3, #0
 800aa28:	60a3      	str	r3, [r4, #8]
 800aa2a:	6963      	ldr	r3, [r4, #20]
 800aa2c:	425b      	negs	r3, r3
 800aa2e:	61a3      	str	r3, [r4, #24]
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	b943      	cbnz	r3, 800aa46 <__swsetup_r+0xc6>
 800aa34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa38:	d1ba      	bne.n	800a9b0 <__swsetup_r+0x30>
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	0781      	lsls	r1, r0, #30
 800aa3e:	bf58      	it	pl
 800aa40:	6963      	ldrpl	r3, [r4, #20]
 800aa42:	60a3      	str	r3, [r4, #8]
 800aa44:	e7f4      	b.n	800aa30 <__swsetup_r+0xb0>
 800aa46:	2000      	movs	r0, #0
 800aa48:	e7f7      	b.n	800aa3a <__swsetup_r+0xba>
 800aa4a:	bf00      	nop
 800aa4c:	20000010 	.word	0x20000010
 800aa50:	0800bc3c 	.word	0x0800bc3c
 800aa54:	0800bc5c 	.word	0x0800bc5c
 800aa58:	0800bc1c 	.word	0x0800bc1c

0800aa5c <abort>:
 800aa5c:	b508      	push	{r3, lr}
 800aa5e:	2006      	movs	r0, #6
 800aa60:	f000 fa52 	bl	800af08 <raise>
 800aa64:	2001      	movs	r0, #1
 800aa66:	f7f7 f8ff 	bl	8001c68 <_exit>
	...

0800aa6c <__sflush_r>:
 800aa6c:	898a      	ldrh	r2, [r1, #12]
 800aa6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa72:	4605      	mov	r5, r0
 800aa74:	0710      	lsls	r0, r2, #28
 800aa76:	460c      	mov	r4, r1
 800aa78:	d458      	bmi.n	800ab2c <__sflush_r+0xc0>
 800aa7a:	684b      	ldr	r3, [r1, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dc05      	bgt.n	800aa8c <__sflush_r+0x20>
 800aa80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	dc02      	bgt.n	800aa8c <__sflush_r+0x20>
 800aa86:	2000      	movs	r0, #0
 800aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa8e:	2e00      	cmp	r6, #0
 800aa90:	d0f9      	beq.n	800aa86 <__sflush_r+0x1a>
 800aa92:	2300      	movs	r3, #0
 800aa94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa98:	682f      	ldr	r7, [r5, #0]
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	d032      	beq.n	800ab04 <__sflush_r+0x98>
 800aa9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	075a      	lsls	r2, r3, #29
 800aaa4:	d505      	bpl.n	800aab2 <__sflush_r+0x46>
 800aaa6:	6863      	ldr	r3, [r4, #4]
 800aaa8:	1ac0      	subs	r0, r0, r3
 800aaaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaac:	b10b      	cbz	r3, 800aab2 <__sflush_r+0x46>
 800aaae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aab0:	1ac0      	subs	r0, r0, r3
 800aab2:	2300      	movs	r3, #0
 800aab4:	4602      	mov	r2, r0
 800aab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aab8:	6a21      	ldr	r1, [r4, #32]
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b0      	blx	r6
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	d106      	bne.n	800aad2 <__sflush_r+0x66>
 800aac4:	6829      	ldr	r1, [r5, #0]
 800aac6:	291d      	cmp	r1, #29
 800aac8:	d82c      	bhi.n	800ab24 <__sflush_r+0xb8>
 800aaca:	4a2a      	ldr	r2, [pc, #168]	; (800ab74 <__sflush_r+0x108>)
 800aacc:	40ca      	lsrs	r2, r1
 800aace:	07d6      	lsls	r6, r2, #31
 800aad0:	d528      	bpl.n	800ab24 <__sflush_r+0xb8>
 800aad2:	2200      	movs	r2, #0
 800aad4:	6062      	str	r2, [r4, #4]
 800aad6:	04d9      	lsls	r1, r3, #19
 800aad8:	6922      	ldr	r2, [r4, #16]
 800aada:	6022      	str	r2, [r4, #0]
 800aadc:	d504      	bpl.n	800aae8 <__sflush_r+0x7c>
 800aade:	1c42      	adds	r2, r0, #1
 800aae0:	d101      	bne.n	800aae6 <__sflush_r+0x7a>
 800aae2:	682b      	ldr	r3, [r5, #0]
 800aae4:	b903      	cbnz	r3, 800aae8 <__sflush_r+0x7c>
 800aae6:	6560      	str	r0, [r4, #84]	; 0x54
 800aae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaea:	602f      	str	r7, [r5, #0]
 800aaec:	2900      	cmp	r1, #0
 800aaee:	d0ca      	beq.n	800aa86 <__sflush_r+0x1a>
 800aaf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	d002      	beq.n	800aafe <__sflush_r+0x92>
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f7ff fae3 	bl	800a0c4 <_free_r>
 800aafe:	2000      	movs	r0, #0
 800ab00:	6360      	str	r0, [r4, #52]	; 0x34
 800ab02:	e7c1      	b.n	800aa88 <__sflush_r+0x1c>
 800ab04:	6a21      	ldr	r1, [r4, #32]
 800ab06:	2301      	movs	r3, #1
 800ab08:	4628      	mov	r0, r5
 800ab0a:	47b0      	blx	r6
 800ab0c:	1c41      	adds	r1, r0, #1
 800ab0e:	d1c7      	bne.n	800aaa0 <__sflush_r+0x34>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0c4      	beq.n	800aaa0 <__sflush_r+0x34>
 800ab16:	2b1d      	cmp	r3, #29
 800ab18:	d001      	beq.n	800ab1e <__sflush_r+0xb2>
 800ab1a:	2b16      	cmp	r3, #22
 800ab1c:	d101      	bne.n	800ab22 <__sflush_r+0xb6>
 800ab1e:	602f      	str	r7, [r5, #0]
 800ab20:	e7b1      	b.n	800aa86 <__sflush_r+0x1a>
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab28:	81a3      	strh	r3, [r4, #12]
 800ab2a:	e7ad      	b.n	800aa88 <__sflush_r+0x1c>
 800ab2c:	690f      	ldr	r7, [r1, #16]
 800ab2e:	2f00      	cmp	r7, #0
 800ab30:	d0a9      	beq.n	800aa86 <__sflush_r+0x1a>
 800ab32:	0793      	lsls	r3, r2, #30
 800ab34:	680e      	ldr	r6, [r1, #0]
 800ab36:	bf08      	it	eq
 800ab38:	694b      	ldreq	r3, [r1, #20]
 800ab3a:	600f      	str	r7, [r1, #0]
 800ab3c:	bf18      	it	ne
 800ab3e:	2300      	movne	r3, #0
 800ab40:	eba6 0807 	sub.w	r8, r6, r7
 800ab44:	608b      	str	r3, [r1, #8]
 800ab46:	f1b8 0f00 	cmp.w	r8, #0
 800ab4a:	dd9c      	ble.n	800aa86 <__sflush_r+0x1a>
 800ab4c:	6a21      	ldr	r1, [r4, #32]
 800ab4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab50:	4643      	mov	r3, r8
 800ab52:	463a      	mov	r2, r7
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b0      	blx	r6
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	dc06      	bgt.n	800ab6a <__sflush_r+0xfe>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	f04f 30ff 	mov.w	r0, #4294967295
 800ab68:	e78e      	b.n	800aa88 <__sflush_r+0x1c>
 800ab6a:	4407      	add	r7, r0
 800ab6c:	eba8 0800 	sub.w	r8, r8, r0
 800ab70:	e7e9      	b.n	800ab46 <__sflush_r+0xda>
 800ab72:	bf00      	nop
 800ab74:	20400001 	.word	0x20400001

0800ab78 <_fflush_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	690b      	ldr	r3, [r1, #16]
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	b913      	cbnz	r3, 800ab88 <_fflush_r+0x10>
 800ab82:	2500      	movs	r5, #0
 800ab84:	4628      	mov	r0, r5
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	b118      	cbz	r0, 800ab92 <_fflush_r+0x1a>
 800ab8a:	6983      	ldr	r3, [r0, #24]
 800ab8c:	b90b      	cbnz	r3, 800ab92 <_fflush_r+0x1a>
 800ab8e:	f000 f887 	bl	800aca0 <__sinit>
 800ab92:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <_fflush_r+0x6c>)
 800ab94:	429c      	cmp	r4, r3
 800ab96:	d11b      	bne.n	800abd0 <_fflush_r+0x58>
 800ab98:	686c      	ldr	r4, [r5, #4]
 800ab9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d0ef      	beq.n	800ab82 <_fflush_r+0xa>
 800aba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aba4:	07d0      	lsls	r0, r2, #31
 800aba6:	d404      	bmi.n	800abb2 <_fflush_r+0x3a>
 800aba8:	0599      	lsls	r1, r3, #22
 800abaa:	d402      	bmi.n	800abb2 <_fflush_r+0x3a>
 800abac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abae:	f000 f915 	bl	800addc <__retarget_lock_acquire_recursive>
 800abb2:	4628      	mov	r0, r5
 800abb4:	4621      	mov	r1, r4
 800abb6:	f7ff ff59 	bl	800aa6c <__sflush_r>
 800abba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abbc:	07da      	lsls	r2, r3, #31
 800abbe:	4605      	mov	r5, r0
 800abc0:	d4e0      	bmi.n	800ab84 <_fflush_r+0xc>
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	059b      	lsls	r3, r3, #22
 800abc6:	d4dd      	bmi.n	800ab84 <_fflush_r+0xc>
 800abc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abca:	f000 f908 	bl	800adde <__retarget_lock_release_recursive>
 800abce:	e7d9      	b.n	800ab84 <_fflush_r+0xc>
 800abd0:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <_fflush_r+0x70>)
 800abd2:	429c      	cmp	r4, r3
 800abd4:	d101      	bne.n	800abda <_fflush_r+0x62>
 800abd6:	68ac      	ldr	r4, [r5, #8]
 800abd8:	e7df      	b.n	800ab9a <_fflush_r+0x22>
 800abda:	4b04      	ldr	r3, [pc, #16]	; (800abec <_fflush_r+0x74>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	bf08      	it	eq
 800abe0:	68ec      	ldreq	r4, [r5, #12]
 800abe2:	e7da      	b.n	800ab9a <_fflush_r+0x22>
 800abe4:	0800bc3c 	.word	0x0800bc3c
 800abe8:	0800bc5c 	.word	0x0800bc5c
 800abec:	0800bc1c 	.word	0x0800bc1c

0800abf0 <std>:
 800abf0:	2300      	movs	r3, #0
 800abf2:	b510      	push	{r4, lr}
 800abf4:	4604      	mov	r4, r0
 800abf6:	e9c0 3300 	strd	r3, r3, [r0]
 800abfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abfe:	6083      	str	r3, [r0, #8]
 800ac00:	8181      	strh	r1, [r0, #12]
 800ac02:	6643      	str	r3, [r0, #100]	; 0x64
 800ac04:	81c2      	strh	r2, [r0, #14]
 800ac06:	6183      	str	r3, [r0, #24]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	2208      	movs	r2, #8
 800ac0c:	305c      	adds	r0, #92	; 0x5c
 800ac0e:	f7fd fbb5 	bl	800837c <memset>
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <std+0x38>)
 800ac14:	6263      	str	r3, [r4, #36]	; 0x24
 800ac16:	4b05      	ldr	r3, [pc, #20]	; (800ac2c <std+0x3c>)
 800ac18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac1a:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <std+0x40>)
 800ac1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac1e:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <std+0x44>)
 800ac20:	6224      	str	r4, [r4, #32]
 800ac22:	6323      	str	r3, [r4, #48]	; 0x30
 800ac24:	bd10      	pop	{r4, pc}
 800ac26:	bf00      	nop
 800ac28:	0800af41 	.word	0x0800af41
 800ac2c:	0800af63 	.word	0x0800af63
 800ac30:	0800af9b 	.word	0x0800af9b
 800ac34:	0800afbf 	.word	0x0800afbf

0800ac38 <_cleanup_r>:
 800ac38:	4901      	ldr	r1, [pc, #4]	; (800ac40 <_cleanup_r+0x8>)
 800ac3a:	f000 b8af 	b.w	800ad9c <_fwalk_reent>
 800ac3e:	bf00      	nop
 800ac40:	0800ab79 	.word	0x0800ab79

0800ac44 <__sfmoreglue>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	1e4a      	subs	r2, r1, #1
 800ac48:	2568      	movs	r5, #104	; 0x68
 800ac4a:	4355      	muls	r5, r2
 800ac4c:	460e      	mov	r6, r1
 800ac4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac52:	f7ff fa87 	bl	800a164 <_malloc_r>
 800ac56:	4604      	mov	r4, r0
 800ac58:	b140      	cbz	r0, 800ac6c <__sfmoreglue+0x28>
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac60:	300c      	adds	r0, #12
 800ac62:	60a0      	str	r0, [r4, #8]
 800ac64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac68:	f7fd fb88 	bl	800837c <memset>
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}

0800ac70 <__sfp_lock_acquire>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__sfp_lock_acquire+0x8>)
 800ac72:	f000 b8b3 	b.w	800addc <__retarget_lock_acquire_recursive>
 800ac76:	bf00      	nop
 800ac78:	20004c20 	.word	0x20004c20

0800ac7c <__sfp_lock_release>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__sfp_lock_release+0x8>)
 800ac7e:	f000 b8ae 	b.w	800adde <__retarget_lock_release_recursive>
 800ac82:	bf00      	nop
 800ac84:	20004c20 	.word	0x20004c20

0800ac88 <__sinit_lock_acquire>:
 800ac88:	4801      	ldr	r0, [pc, #4]	; (800ac90 <__sinit_lock_acquire+0x8>)
 800ac8a:	f000 b8a7 	b.w	800addc <__retarget_lock_acquire_recursive>
 800ac8e:	bf00      	nop
 800ac90:	20004c1b 	.word	0x20004c1b

0800ac94 <__sinit_lock_release>:
 800ac94:	4801      	ldr	r0, [pc, #4]	; (800ac9c <__sinit_lock_release+0x8>)
 800ac96:	f000 b8a2 	b.w	800adde <__retarget_lock_release_recursive>
 800ac9a:	bf00      	nop
 800ac9c:	20004c1b 	.word	0x20004c1b

0800aca0 <__sinit>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	4604      	mov	r4, r0
 800aca4:	f7ff fff0 	bl	800ac88 <__sinit_lock_acquire>
 800aca8:	69a3      	ldr	r3, [r4, #24]
 800acaa:	b11b      	cbz	r3, 800acb4 <__sinit+0x14>
 800acac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb0:	f7ff bff0 	b.w	800ac94 <__sinit_lock_release>
 800acb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acb8:	6523      	str	r3, [r4, #80]	; 0x50
 800acba:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <__sinit+0x68>)
 800acbc:	4a13      	ldr	r2, [pc, #76]	; (800ad0c <__sinit+0x6c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800acc2:	42a3      	cmp	r3, r4
 800acc4:	bf04      	itt	eq
 800acc6:	2301      	moveq	r3, #1
 800acc8:	61a3      	streq	r3, [r4, #24]
 800acca:	4620      	mov	r0, r4
 800accc:	f000 f820 	bl	800ad10 <__sfp>
 800acd0:	6060      	str	r0, [r4, #4]
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 f81c 	bl	800ad10 <__sfp>
 800acd8:	60a0      	str	r0, [r4, #8]
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 f818 	bl	800ad10 <__sfp>
 800ace0:	2200      	movs	r2, #0
 800ace2:	60e0      	str	r0, [r4, #12]
 800ace4:	2104      	movs	r1, #4
 800ace6:	6860      	ldr	r0, [r4, #4]
 800ace8:	f7ff ff82 	bl	800abf0 <std>
 800acec:	68a0      	ldr	r0, [r4, #8]
 800acee:	2201      	movs	r2, #1
 800acf0:	2109      	movs	r1, #9
 800acf2:	f7ff ff7d 	bl	800abf0 <std>
 800acf6:	68e0      	ldr	r0, [r4, #12]
 800acf8:	2202      	movs	r2, #2
 800acfa:	2112      	movs	r1, #18
 800acfc:	f7ff ff78 	bl	800abf0 <std>
 800ad00:	2301      	movs	r3, #1
 800ad02:	61a3      	str	r3, [r4, #24]
 800ad04:	e7d2      	b.n	800acac <__sinit+0xc>
 800ad06:	bf00      	nop
 800ad08:	0800b898 	.word	0x0800b898
 800ad0c:	0800ac39 	.word	0x0800ac39

0800ad10 <__sfp>:
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad12:	4607      	mov	r7, r0
 800ad14:	f7ff ffac 	bl	800ac70 <__sfp_lock_acquire>
 800ad18:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <__sfp+0x84>)
 800ad1a:	681e      	ldr	r6, [r3, #0]
 800ad1c:	69b3      	ldr	r3, [r6, #24]
 800ad1e:	b913      	cbnz	r3, 800ad26 <__sfp+0x16>
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff ffbd 	bl	800aca0 <__sinit>
 800ad26:	3648      	adds	r6, #72	; 0x48
 800ad28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	d503      	bpl.n	800ad38 <__sfp+0x28>
 800ad30:	6833      	ldr	r3, [r6, #0]
 800ad32:	b30b      	cbz	r3, 800ad78 <__sfp+0x68>
 800ad34:	6836      	ldr	r6, [r6, #0]
 800ad36:	e7f7      	b.n	800ad28 <__sfp+0x18>
 800ad38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad3c:	b9d5      	cbnz	r5, 800ad74 <__sfp+0x64>
 800ad3e:	4b16      	ldr	r3, [pc, #88]	; (800ad98 <__sfp+0x88>)
 800ad40:	60e3      	str	r3, [r4, #12]
 800ad42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad46:	6665      	str	r5, [r4, #100]	; 0x64
 800ad48:	f000 f847 	bl	800adda <__retarget_lock_init_recursive>
 800ad4c:	f7ff ff96 	bl	800ac7c <__sfp_lock_release>
 800ad50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad58:	6025      	str	r5, [r4, #0]
 800ad5a:	61a5      	str	r5, [r4, #24]
 800ad5c:	2208      	movs	r2, #8
 800ad5e:	4629      	mov	r1, r5
 800ad60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad64:	f7fd fb0a 	bl	800837c <memset>
 800ad68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad70:	4620      	mov	r0, r4
 800ad72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad74:	3468      	adds	r4, #104	; 0x68
 800ad76:	e7d9      	b.n	800ad2c <__sfp+0x1c>
 800ad78:	2104      	movs	r1, #4
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	f7ff ff62 	bl	800ac44 <__sfmoreglue>
 800ad80:	4604      	mov	r4, r0
 800ad82:	6030      	str	r0, [r6, #0]
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d1d5      	bne.n	800ad34 <__sfp+0x24>
 800ad88:	f7ff ff78 	bl	800ac7c <__sfp_lock_release>
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	e7ee      	b.n	800ad70 <__sfp+0x60>
 800ad92:	bf00      	nop
 800ad94:	0800b898 	.word	0x0800b898
 800ad98:	ffff0001 	.word	0xffff0001

0800ad9c <_fwalk_reent>:
 800ad9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada0:	4606      	mov	r6, r0
 800ada2:	4688      	mov	r8, r1
 800ada4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ada8:	2700      	movs	r7, #0
 800adaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adae:	f1b9 0901 	subs.w	r9, r9, #1
 800adb2:	d505      	bpl.n	800adc0 <_fwalk_reent+0x24>
 800adb4:	6824      	ldr	r4, [r4, #0]
 800adb6:	2c00      	cmp	r4, #0
 800adb8:	d1f7      	bne.n	800adaa <_fwalk_reent+0xe>
 800adba:	4638      	mov	r0, r7
 800adbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc0:	89ab      	ldrh	r3, [r5, #12]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d907      	bls.n	800add6 <_fwalk_reent+0x3a>
 800adc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adca:	3301      	adds	r3, #1
 800adcc:	d003      	beq.n	800add6 <_fwalk_reent+0x3a>
 800adce:	4629      	mov	r1, r5
 800add0:	4630      	mov	r0, r6
 800add2:	47c0      	blx	r8
 800add4:	4307      	orrs	r7, r0
 800add6:	3568      	adds	r5, #104	; 0x68
 800add8:	e7e9      	b.n	800adae <_fwalk_reent+0x12>

0800adda <__retarget_lock_init_recursive>:
 800adda:	4770      	bx	lr

0800addc <__retarget_lock_acquire_recursive>:
 800addc:	4770      	bx	lr

0800adde <__retarget_lock_release_recursive>:
 800adde:	4770      	bx	lr

0800ade0 <__swhatbuf_r>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	460e      	mov	r6, r1
 800ade4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade8:	2900      	cmp	r1, #0
 800adea:	b096      	sub	sp, #88	; 0x58
 800adec:	4614      	mov	r4, r2
 800adee:	461d      	mov	r5, r3
 800adf0:	da07      	bge.n	800ae02 <__swhatbuf_r+0x22>
 800adf2:	2300      	movs	r3, #0
 800adf4:	602b      	str	r3, [r5, #0]
 800adf6:	89b3      	ldrh	r3, [r6, #12]
 800adf8:	061a      	lsls	r2, r3, #24
 800adfa:	d410      	bmi.n	800ae1e <__swhatbuf_r+0x3e>
 800adfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae00:	e00e      	b.n	800ae20 <__swhatbuf_r+0x40>
 800ae02:	466a      	mov	r2, sp
 800ae04:	f000 f902 	bl	800b00c <_fstat_r>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	dbf2      	blt.n	800adf2 <__swhatbuf_r+0x12>
 800ae0c:	9a01      	ldr	r2, [sp, #4]
 800ae0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae16:	425a      	negs	r2, r3
 800ae18:	415a      	adcs	r2, r3
 800ae1a:	602a      	str	r2, [r5, #0]
 800ae1c:	e7ee      	b.n	800adfc <__swhatbuf_r+0x1c>
 800ae1e:	2340      	movs	r3, #64	; 0x40
 800ae20:	2000      	movs	r0, #0
 800ae22:	6023      	str	r3, [r4, #0]
 800ae24:	b016      	add	sp, #88	; 0x58
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <__smakebuf_r>:
 800ae28:	898b      	ldrh	r3, [r1, #12]
 800ae2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae2c:	079d      	lsls	r5, r3, #30
 800ae2e:	4606      	mov	r6, r0
 800ae30:	460c      	mov	r4, r1
 800ae32:	d507      	bpl.n	800ae44 <__smakebuf_r+0x1c>
 800ae34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	6123      	str	r3, [r4, #16]
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	6163      	str	r3, [r4, #20]
 800ae40:	b002      	add	sp, #8
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	ab01      	add	r3, sp, #4
 800ae46:	466a      	mov	r2, sp
 800ae48:	f7ff ffca 	bl	800ade0 <__swhatbuf_r>
 800ae4c:	9900      	ldr	r1, [sp, #0]
 800ae4e:	4605      	mov	r5, r0
 800ae50:	4630      	mov	r0, r6
 800ae52:	f7ff f987 	bl	800a164 <_malloc_r>
 800ae56:	b948      	cbnz	r0, 800ae6c <__smakebuf_r+0x44>
 800ae58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae5c:	059a      	lsls	r2, r3, #22
 800ae5e:	d4ef      	bmi.n	800ae40 <__smakebuf_r+0x18>
 800ae60:	f023 0303 	bic.w	r3, r3, #3
 800ae64:	f043 0302 	orr.w	r3, r3, #2
 800ae68:	81a3      	strh	r3, [r4, #12]
 800ae6a:	e7e3      	b.n	800ae34 <__smakebuf_r+0xc>
 800ae6c:	4b0d      	ldr	r3, [pc, #52]	; (800aea4 <__smakebuf_r+0x7c>)
 800ae6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	6020      	str	r0, [r4, #0]
 800ae74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	9b00      	ldr	r3, [sp, #0]
 800ae7c:	6163      	str	r3, [r4, #20]
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	6120      	str	r0, [r4, #16]
 800ae82:	b15b      	cbz	r3, 800ae9c <__smakebuf_r+0x74>
 800ae84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f000 f8d1 	bl	800b030 <_isatty_r>
 800ae8e:	b128      	cbz	r0, 800ae9c <__smakebuf_r+0x74>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	f023 0303 	bic.w	r3, r3, #3
 800ae96:	f043 0301 	orr.w	r3, r3, #1
 800ae9a:	81a3      	strh	r3, [r4, #12]
 800ae9c:	89a0      	ldrh	r0, [r4, #12]
 800ae9e:	4305      	orrs	r5, r0
 800aea0:	81a5      	strh	r5, [r4, #12]
 800aea2:	e7cd      	b.n	800ae40 <__smakebuf_r+0x18>
 800aea4:	0800ac39 	.word	0x0800ac39

0800aea8 <_malloc_usable_size_r>:
 800aea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeac:	1f18      	subs	r0, r3, #4
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	bfbc      	itt	lt
 800aeb2:	580b      	ldrlt	r3, [r1, r0]
 800aeb4:	18c0      	addlt	r0, r0, r3
 800aeb6:	4770      	bx	lr

0800aeb8 <_raise_r>:
 800aeb8:	291f      	cmp	r1, #31
 800aeba:	b538      	push	{r3, r4, r5, lr}
 800aebc:	4604      	mov	r4, r0
 800aebe:	460d      	mov	r5, r1
 800aec0:	d904      	bls.n	800aecc <_raise_r+0x14>
 800aec2:	2316      	movs	r3, #22
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aece:	b112      	cbz	r2, 800aed6 <_raise_r+0x1e>
 800aed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aed4:	b94b      	cbnz	r3, 800aeea <_raise_r+0x32>
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 f830 	bl	800af3c <_getpid_r>
 800aedc:	462a      	mov	r2, r5
 800aede:	4601      	mov	r1, r0
 800aee0:	4620      	mov	r0, r4
 800aee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee6:	f000 b817 	b.w	800af18 <_kill_r>
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d00a      	beq.n	800af04 <_raise_r+0x4c>
 800aeee:	1c59      	adds	r1, r3, #1
 800aef0:	d103      	bne.n	800aefa <_raise_r+0x42>
 800aef2:	2316      	movs	r3, #22
 800aef4:	6003      	str	r3, [r0, #0]
 800aef6:	2001      	movs	r0, #1
 800aef8:	e7e7      	b.n	800aeca <_raise_r+0x12>
 800aefa:	2400      	movs	r4, #0
 800aefc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af00:	4628      	mov	r0, r5
 800af02:	4798      	blx	r3
 800af04:	2000      	movs	r0, #0
 800af06:	e7e0      	b.n	800aeca <_raise_r+0x12>

0800af08 <raise>:
 800af08:	4b02      	ldr	r3, [pc, #8]	; (800af14 <raise+0xc>)
 800af0a:	4601      	mov	r1, r0
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f7ff bfd3 	b.w	800aeb8 <_raise_r>
 800af12:	bf00      	nop
 800af14:	20000010 	.word	0x20000010

0800af18 <_kill_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	; (800af38 <_kill_r+0x20>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	4611      	mov	r1, r2
 800af24:	602b      	str	r3, [r5, #0]
 800af26:	f7f6 fe8f 	bl	8001c48 <_kill>
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	d102      	bne.n	800af34 <_kill_r+0x1c>
 800af2e:	682b      	ldr	r3, [r5, #0]
 800af30:	b103      	cbz	r3, 800af34 <_kill_r+0x1c>
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	bd38      	pop	{r3, r4, r5, pc}
 800af36:	bf00      	nop
 800af38:	20004c14 	.word	0x20004c14

0800af3c <_getpid_r>:
 800af3c:	f7f6 be7c 	b.w	8001c38 <_getpid>

0800af40 <__sread>:
 800af40:	b510      	push	{r4, lr}
 800af42:	460c      	mov	r4, r1
 800af44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af48:	f000 f894 	bl	800b074 <_read_r>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	bfab      	itete	ge
 800af50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af52:	89a3      	ldrhlt	r3, [r4, #12]
 800af54:	181b      	addge	r3, r3, r0
 800af56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af5a:	bfac      	ite	ge
 800af5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af5e:	81a3      	strhlt	r3, [r4, #12]
 800af60:	bd10      	pop	{r4, pc}

0800af62 <__swrite>:
 800af62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af66:	461f      	mov	r7, r3
 800af68:	898b      	ldrh	r3, [r1, #12]
 800af6a:	05db      	lsls	r3, r3, #23
 800af6c:	4605      	mov	r5, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	4616      	mov	r6, r2
 800af72:	d505      	bpl.n	800af80 <__swrite+0x1e>
 800af74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af78:	2302      	movs	r3, #2
 800af7a:	2200      	movs	r2, #0
 800af7c:	f000 f868 	bl	800b050 <_lseek_r>
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	4632      	mov	r2, r6
 800af8e:	463b      	mov	r3, r7
 800af90:	4628      	mov	r0, r5
 800af92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af96:	f000 b817 	b.w	800afc8 <_write_r>

0800af9a <__sseek>:
 800af9a:	b510      	push	{r4, lr}
 800af9c:	460c      	mov	r4, r1
 800af9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa2:	f000 f855 	bl	800b050 <_lseek_r>
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	bf15      	itete	ne
 800afac:	6560      	strne	r0, [r4, #84]	; 0x54
 800afae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afb6:	81a3      	strheq	r3, [r4, #12]
 800afb8:	bf18      	it	ne
 800afba:	81a3      	strhne	r3, [r4, #12]
 800afbc:	bd10      	pop	{r4, pc}

0800afbe <__sclose>:
 800afbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc2:	f000 b813 	b.w	800afec <_close_r>
	...

0800afc8 <_write_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	; (800afe8 <_write_r+0x20>)
 800afcc:	4604      	mov	r4, r0
 800afce:	4608      	mov	r0, r1
 800afd0:	4611      	mov	r1, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f7f6 fe6d 	bl	8001cb6 <_write>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_write_r+0x1e>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_write_r+0x1e>
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	20004c14 	.word	0x20004c14

0800afec <_close_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d06      	ldr	r5, [pc, #24]	; (800b008 <_close_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f6 fe79 	bl	8001cee <_close>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_close_r+0x1a>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_close_r+0x1a>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20004c14 	.word	0x20004c14

0800b00c <_fstat_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	; (800b02c <_fstat_r+0x20>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	4611      	mov	r1, r2
 800b018:	602b      	str	r3, [r5, #0]
 800b01a:	f7f6 fe74 	bl	8001d06 <_fstat>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	d102      	bne.n	800b028 <_fstat_r+0x1c>
 800b022:	682b      	ldr	r3, [r5, #0]
 800b024:	b103      	cbz	r3, 800b028 <_fstat_r+0x1c>
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	bd38      	pop	{r3, r4, r5, pc}
 800b02a:	bf00      	nop
 800b02c:	20004c14 	.word	0x20004c14

0800b030 <_isatty_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d06      	ldr	r5, [pc, #24]	; (800b04c <_isatty_r+0x1c>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	f7f6 fe73 	bl	8001d26 <_isatty>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_isatty_r+0x1a>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_isatty_r+0x1a>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	20004c14 	.word	0x20004c14

0800b050 <_lseek_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	; (800b070 <_lseek_r+0x20>)
 800b054:	4604      	mov	r4, r0
 800b056:	4608      	mov	r0, r1
 800b058:	4611      	mov	r1, r2
 800b05a:	2200      	movs	r2, #0
 800b05c:	602a      	str	r2, [r5, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	f7f6 fe6c 	bl	8001d3c <_lseek>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_lseek_r+0x1e>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_lseek_r+0x1e>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20004c14 	.word	0x20004c14

0800b074 <_read_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d07      	ldr	r5, [pc, #28]	; (800b094 <_read_r+0x20>)
 800b078:	4604      	mov	r4, r0
 800b07a:	4608      	mov	r0, r1
 800b07c:	4611      	mov	r1, r2
 800b07e:	2200      	movs	r2, #0
 800b080:	602a      	str	r2, [r5, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	f7f6 fdfa 	bl	8001c7c <_read>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d102      	bne.n	800b092 <_read_r+0x1e>
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	b103      	cbz	r3, 800b092 <_read_r+0x1e>
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	20004c14 	.word	0x20004c14

0800b098 <asin>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	ed2d 8b02 	vpush	{d8}
 800b09e:	ec55 4b10 	vmov	r4, r5, d0
 800b0a2:	f000 f835 	bl	800b110 <__ieee754_asin>
 800b0a6:	4b16      	ldr	r3, [pc, #88]	; (800b100 <asin+0x68>)
 800b0a8:	eeb0 8a40 	vmov.f32	s16, s0
 800b0ac:	eef0 8a60 	vmov.f32	s17, s1
 800b0b0:	f993 3000 	ldrsb.w	r3, [r3]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	d01c      	beq.n	800b0f2 <asin+0x5a>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	462b      	mov	r3, r5
 800b0bc:	4620      	mov	r0, r4
 800b0be:	4629      	mov	r1, r5
 800b0c0:	f7f5 fd3c 	bl	8000b3c <__aeabi_dcmpun>
 800b0c4:	b9a8      	cbnz	r0, 800b0f2 <asin+0x5a>
 800b0c6:	ec45 4b10 	vmov	d0, r4, r5
 800b0ca:	f000 fae9 	bl	800b6a0 <fabs>
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <asin+0x6c>)
 800b0d0:	ec51 0b10 	vmov	r0, r1, d0
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f7f5 fd27 	bl	8000b28 <__aeabi_dcmpgt>
 800b0da:	b150      	cbz	r0, 800b0f2 <asin+0x5a>
 800b0dc:	f7fd f916 	bl	800830c <__errno>
 800b0e0:	ecbd 8b02 	vpop	{d8}
 800b0e4:	2321      	movs	r3, #33	; 0x21
 800b0e6:	6003      	str	r3, [r0, #0]
 800b0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ec:	4806      	ldr	r0, [pc, #24]	; (800b108 <asin+0x70>)
 800b0ee:	f000 bae3 	b.w	800b6b8 <nan>
 800b0f2:	eeb0 0a48 	vmov.f32	s0, s16
 800b0f6:	eef0 0a68 	vmov.f32	s1, s17
 800b0fa:	ecbd 8b02 	vpop	{d8}
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	200001e0 	.word	0x200001e0
 800b104:	3ff00000 	.word	0x3ff00000
 800b108:	0800bb10 	.word	0x0800bb10
 800b10c:	00000000 	.word	0x00000000

0800b110 <__ieee754_asin>:
 800b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	ed2d 8b04 	vpush	{d8-d9}
 800b118:	ec55 4b10 	vmov	r4, r5, d0
 800b11c:	4bcc      	ldr	r3, [pc, #816]	; (800b450 <__ieee754_asin+0x340>)
 800b11e:	b083      	sub	sp, #12
 800b120:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b124:	4598      	cmp	r8, r3
 800b126:	9501      	str	r5, [sp, #4]
 800b128:	dd35      	ble.n	800b196 <__ieee754_asin+0x86>
 800b12a:	ee10 3a10 	vmov	r3, s0
 800b12e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b132:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b136:	ea58 0303 	orrs.w	r3, r8, r3
 800b13a:	d117      	bne.n	800b16c <__ieee754_asin+0x5c>
 800b13c:	a3aa      	add	r3, pc, #680	; (adr r3, 800b3e8 <__ieee754_asin+0x2d8>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	ee10 0a10 	vmov	r0, s0
 800b146:	4629      	mov	r1, r5
 800b148:	f7f5 fa5e 	bl	8000608 <__aeabi_dmul>
 800b14c:	a3a8      	add	r3, pc, #672	; (adr r3, 800b3f0 <__ieee754_asin+0x2e0>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	4606      	mov	r6, r0
 800b154:	460f      	mov	r7, r1
 800b156:	4620      	mov	r0, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	f7f5 fa55 	bl	8000608 <__aeabi_dmul>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 f899 	bl	800029c <__adddf3>
 800b16a:	e00b      	b.n	800b184 <__ieee754_asin+0x74>
 800b16c:	ee10 2a10 	vmov	r2, s0
 800b170:	462b      	mov	r3, r5
 800b172:	ee10 0a10 	vmov	r0, s0
 800b176:	4629      	mov	r1, r5
 800b178:	f7f5 f88e 	bl	8000298 <__aeabi_dsub>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	f7f5 fb6c 	bl	800085c <__aeabi_ddiv>
 800b184:	4604      	mov	r4, r0
 800b186:	460d      	mov	r5, r1
 800b188:	ec45 4b10 	vmov	d0, r4, r5
 800b18c:	b003      	add	sp, #12
 800b18e:	ecbd 8b04 	vpop	{d8-d9}
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b196:	4baf      	ldr	r3, [pc, #700]	; (800b454 <__ieee754_asin+0x344>)
 800b198:	4598      	cmp	r8, r3
 800b19a:	dc11      	bgt.n	800b1c0 <__ieee754_asin+0xb0>
 800b19c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b1a0:	f280 80ae 	bge.w	800b300 <__ieee754_asin+0x1f0>
 800b1a4:	a394      	add	r3, pc, #592	; (adr r3, 800b3f8 <__ieee754_asin+0x2e8>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	ee10 0a10 	vmov	r0, s0
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f7f5 f874 	bl	800029c <__adddf3>
 800b1b4:	4ba8      	ldr	r3, [pc, #672]	; (800b458 <__ieee754_asin+0x348>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f7f5 fcb6 	bl	8000b28 <__aeabi_dcmpgt>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d1e3      	bne.n	800b188 <__ieee754_asin+0x78>
 800b1c0:	ec45 4b10 	vmov	d0, r4, r5
 800b1c4:	f000 fa6c 	bl	800b6a0 <fabs>
 800b1c8:	49a3      	ldr	r1, [pc, #652]	; (800b458 <__ieee754_asin+0x348>)
 800b1ca:	ec53 2b10 	vmov	r2, r3, d0
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	f7f5 f862 	bl	8000298 <__aeabi_dsub>
 800b1d4:	4ba1      	ldr	r3, [pc, #644]	; (800b45c <__ieee754_asin+0x34c>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f7f5 fa16 	bl	8000608 <__aeabi_dmul>
 800b1dc:	a388      	add	r3, pc, #544	; (adr r3, 800b400 <__ieee754_asin+0x2f0>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	460d      	mov	r5, r1
 800b1e6:	f7f5 fa0f 	bl	8000608 <__aeabi_dmul>
 800b1ea:	a387      	add	r3, pc, #540	; (adr r3, 800b408 <__ieee754_asin+0x2f8>)
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	f7f5 f854 	bl	800029c <__adddf3>
 800b1f4:	4622      	mov	r2, r4
 800b1f6:	462b      	mov	r3, r5
 800b1f8:	f7f5 fa06 	bl	8000608 <__aeabi_dmul>
 800b1fc:	a384      	add	r3, pc, #528	; (adr r3, 800b410 <__ieee754_asin+0x300>)
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	f7f5 f849 	bl	8000298 <__aeabi_dsub>
 800b206:	4622      	mov	r2, r4
 800b208:	462b      	mov	r3, r5
 800b20a:	f7f5 f9fd 	bl	8000608 <__aeabi_dmul>
 800b20e:	a382      	add	r3, pc, #520	; (adr r3, 800b418 <__ieee754_asin+0x308>)
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	f7f5 f842 	bl	800029c <__adddf3>
 800b218:	4622      	mov	r2, r4
 800b21a:	462b      	mov	r3, r5
 800b21c:	f7f5 f9f4 	bl	8000608 <__aeabi_dmul>
 800b220:	a37f      	add	r3, pc, #508	; (adr r3, 800b420 <__ieee754_asin+0x310>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f7f5 f837 	bl	8000298 <__aeabi_dsub>
 800b22a:	4622      	mov	r2, r4
 800b22c:	462b      	mov	r3, r5
 800b22e:	f7f5 f9eb 	bl	8000608 <__aeabi_dmul>
 800b232:	a37d      	add	r3, pc, #500	; (adr r3, 800b428 <__ieee754_asin+0x318>)
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f7f5 f830 	bl	800029c <__adddf3>
 800b23c:	4622      	mov	r2, r4
 800b23e:	462b      	mov	r3, r5
 800b240:	f7f5 f9e2 	bl	8000608 <__aeabi_dmul>
 800b244:	a37a      	add	r3, pc, #488	; (adr r3, 800b430 <__ieee754_asin+0x320>)
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	ec41 0b18 	vmov	d8, r0, r1
 800b24e:	4620      	mov	r0, r4
 800b250:	4629      	mov	r1, r5
 800b252:	f7f5 f9d9 	bl	8000608 <__aeabi_dmul>
 800b256:	a378      	add	r3, pc, #480	; (adr r3, 800b438 <__ieee754_asin+0x328>)
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	f7f5 f81c 	bl	8000298 <__aeabi_dsub>
 800b260:	4622      	mov	r2, r4
 800b262:	462b      	mov	r3, r5
 800b264:	f7f5 f9d0 	bl	8000608 <__aeabi_dmul>
 800b268:	a375      	add	r3, pc, #468	; (adr r3, 800b440 <__ieee754_asin+0x330>)
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	f7f5 f815 	bl	800029c <__adddf3>
 800b272:	4622      	mov	r2, r4
 800b274:	462b      	mov	r3, r5
 800b276:	f7f5 f9c7 	bl	8000608 <__aeabi_dmul>
 800b27a:	a373      	add	r3, pc, #460	; (adr r3, 800b448 <__ieee754_asin+0x338>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f5 f80a 	bl	8000298 <__aeabi_dsub>
 800b284:	4622      	mov	r2, r4
 800b286:	462b      	mov	r3, r5
 800b288:	f7f5 f9be 	bl	8000608 <__aeabi_dmul>
 800b28c:	4b72      	ldr	r3, [pc, #456]	; (800b458 <__ieee754_asin+0x348>)
 800b28e:	2200      	movs	r2, #0
 800b290:	f7f5 f804 	bl	800029c <__adddf3>
 800b294:	ec45 4b10 	vmov	d0, r4, r5
 800b298:	4606      	mov	r6, r0
 800b29a:	460f      	mov	r7, r1
 800b29c:	f000 f94c 	bl	800b538 <__ieee754_sqrt>
 800b2a0:	4b6f      	ldr	r3, [pc, #444]	; (800b460 <__ieee754_asin+0x350>)
 800b2a2:	4598      	cmp	r8, r3
 800b2a4:	ec5b ab10 	vmov	sl, fp, d0
 800b2a8:	f340 80dc 	ble.w	800b464 <__ieee754_asin+0x354>
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	ec51 0b18 	vmov	r0, r1, d8
 800b2b4:	f7f5 fad2 	bl	800085c <__aeabi_ddiv>
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	465b      	mov	r3, fp
 800b2bc:	f7f5 f9a4 	bl	8000608 <__aeabi_dmul>
 800b2c0:	4652      	mov	r2, sl
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	f7f4 ffea 	bl	800029c <__adddf3>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	f7f4 ffe6 	bl	800029c <__adddf3>
 800b2d0:	a347      	add	r3, pc, #284	; (adr r3, 800b3f0 <__ieee754_asin+0x2e0>)
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f7f4 ffdf 	bl	8000298 <__aeabi_dsub>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	a142      	add	r1, pc, #264	; (adr r1, 800b3e8 <__ieee754_asin+0x2d8>)
 800b2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e4:	f7f4 ffd8 	bl	8000298 <__aeabi_dsub>
 800b2e8:	9b01      	ldr	r3, [sp, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bfdc      	itt	le
 800b2ee:	4602      	movle	r2, r0
 800b2f0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	460d      	mov	r5, r1
 800b2f8:	bfdc      	itt	le
 800b2fa:	4614      	movle	r4, r2
 800b2fc:	461d      	movle	r5, r3
 800b2fe:	e743      	b.n	800b188 <__ieee754_asin+0x78>
 800b300:	ee10 2a10 	vmov	r2, s0
 800b304:	ee10 0a10 	vmov	r0, s0
 800b308:	462b      	mov	r3, r5
 800b30a:	4629      	mov	r1, r5
 800b30c:	f7f5 f97c 	bl	8000608 <__aeabi_dmul>
 800b310:	a33b      	add	r3, pc, #236	; (adr r3, 800b400 <__ieee754_asin+0x2f0>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	4606      	mov	r6, r0
 800b318:	460f      	mov	r7, r1
 800b31a:	f7f5 f975 	bl	8000608 <__aeabi_dmul>
 800b31e:	a33a      	add	r3, pc, #232	; (adr r3, 800b408 <__ieee754_asin+0x2f8>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	f7f4 ffba 	bl	800029c <__adddf3>
 800b328:	4632      	mov	r2, r6
 800b32a:	463b      	mov	r3, r7
 800b32c:	f7f5 f96c 	bl	8000608 <__aeabi_dmul>
 800b330:	a337      	add	r3, pc, #220	; (adr r3, 800b410 <__ieee754_asin+0x300>)
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f7f4 ffaf 	bl	8000298 <__aeabi_dsub>
 800b33a:	4632      	mov	r2, r6
 800b33c:	463b      	mov	r3, r7
 800b33e:	f7f5 f963 	bl	8000608 <__aeabi_dmul>
 800b342:	a335      	add	r3, pc, #212	; (adr r3, 800b418 <__ieee754_asin+0x308>)
 800b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b348:	f7f4 ffa8 	bl	800029c <__adddf3>
 800b34c:	4632      	mov	r2, r6
 800b34e:	463b      	mov	r3, r7
 800b350:	f7f5 f95a 	bl	8000608 <__aeabi_dmul>
 800b354:	a332      	add	r3, pc, #200	; (adr r3, 800b420 <__ieee754_asin+0x310>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f4 ff9d 	bl	8000298 <__aeabi_dsub>
 800b35e:	4632      	mov	r2, r6
 800b360:	463b      	mov	r3, r7
 800b362:	f7f5 f951 	bl	8000608 <__aeabi_dmul>
 800b366:	a330      	add	r3, pc, #192	; (adr r3, 800b428 <__ieee754_asin+0x318>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	f7f4 ff96 	bl	800029c <__adddf3>
 800b370:	4632      	mov	r2, r6
 800b372:	463b      	mov	r3, r7
 800b374:	f7f5 f948 	bl	8000608 <__aeabi_dmul>
 800b378:	a32d      	add	r3, pc, #180	; (adr r3, 800b430 <__ieee754_asin+0x320>)
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	4680      	mov	r8, r0
 800b380:	4689      	mov	r9, r1
 800b382:	4630      	mov	r0, r6
 800b384:	4639      	mov	r1, r7
 800b386:	f7f5 f93f 	bl	8000608 <__aeabi_dmul>
 800b38a:	a32b      	add	r3, pc, #172	; (adr r3, 800b438 <__ieee754_asin+0x328>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f7f4 ff82 	bl	8000298 <__aeabi_dsub>
 800b394:	4632      	mov	r2, r6
 800b396:	463b      	mov	r3, r7
 800b398:	f7f5 f936 	bl	8000608 <__aeabi_dmul>
 800b39c:	a328      	add	r3, pc, #160	; (adr r3, 800b440 <__ieee754_asin+0x330>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	f7f4 ff7b 	bl	800029c <__adddf3>
 800b3a6:	4632      	mov	r2, r6
 800b3a8:	463b      	mov	r3, r7
 800b3aa:	f7f5 f92d 	bl	8000608 <__aeabi_dmul>
 800b3ae:	a326      	add	r3, pc, #152	; (adr r3, 800b448 <__ieee754_asin+0x338>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f7f4 ff70 	bl	8000298 <__aeabi_dsub>
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	463b      	mov	r3, r7
 800b3bc:	f7f5 f924 	bl	8000608 <__aeabi_dmul>
 800b3c0:	4b25      	ldr	r3, [pc, #148]	; (800b458 <__ieee754_asin+0x348>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f7f4 ff6a 	bl	800029c <__adddf3>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	4649      	mov	r1, r9
 800b3d0:	f7f5 fa44 	bl	800085c <__aeabi_ddiv>
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	462b      	mov	r3, r5
 800b3d8:	f7f5 f916 	bl	8000608 <__aeabi_dmul>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	e6bf      	b.n	800b166 <__ieee754_asin+0x56>
 800b3e6:	bf00      	nop
 800b3e8:	54442d18 	.word	0x54442d18
 800b3ec:	3ff921fb 	.word	0x3ff921fb
 800b3f0:	33145c07 	.word	0x33145c07
 800b3f4:	3c91a626 	.word	0x3c91a626
 800b3f8:	8800759c 	.word	0x8800759c
 800b3fc:	7e37e43c 	.word	0x7e37e43c
 800b400:	0dfdf709 	.word	0x0dfdf709
 800b404:	3f023de1 	.word	0x3f023de1
 800b408:	7501b288 	.word	0x7501b288
 800b40c:	3f49efe0 	.word	0x3f49efe0
 800b410:	b5688f3b 	.word	0xb5688f3b
 800b414:	3fa48228 	.word	0x3fa48228
 800b418:	0e884455 	.word	0x0e884455
 800b41c:	3fc9c155 	.word	0x3fc9c155
 800b420:	03eb6f7d 	.word	0x03eb6f7d
 800b424:	3fd4d612 	.word	0x3fd4d612
 800b428:	55555555 	.word	0x55555555
 800b42c:	3fc55555 	.word	0x3fc55555
 800b430:	b12e9282 	.word	0xb12e9282
 800b434:	3fb3b8c5 	.word	0x3fb3b8c5
 800b438:	1b8d0159 	.word	0x1b8d0159
 800b43c:	3fe6066c 	.word	0x3fe6066c
 800b440:	9c598ac8 	.word	0x9c598ac8
 800b444:	40002ae5 	.word	0x40002ae5
 800b448:	1c8a2d4b 	.word	0x1c8a2d4b
 800b44c:	40033a27 	.word	0x40033a27
 800b450:	3fefffff 	.word	0x3fefffff
 800b454:	3fdfffff 	.word	0x3fdfffff
 800b458:	3ff00000 	.word	0x3ff00000
 800b45c:	3fe00000 	.word	0x3fe00000
 800b460:	3fef3332 	.word	0x3fef3332
 800b464:	ee10 2a10 	vmov	r2, s0
 800b468:	ee10 0a10 	vmov	r0, s0
 800b46c:	465b      	mov	r3, fp
 800b46e:	4659      	mov	r1, fp
 800b470:	f7f4 ff14 	bl	800029c <__adddf3>
 800b474:	4632      	mov	r2, r6
 800b476:	463b      	mov	r3, r7
 800b478:	ec41 0b19 	vmov	d9, r0, r1
 800b47c:	ec51 0b18 	vmov	r0, r1, d8
 800b480:	f7f5 f9ec 	bl	800085c <__aeabi_ddiv>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	ec51 0b19 	vmov	r0, r1, d9
 800b48c:	f7f5 f8bc 	bl	8000608 <__aeabi_dmul>
 800b490:	f04f 0800 	mov.w	r8, #0
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	4642      	mov	r2, r8
 800b49a:	465b      	mov	r3, fp
 800b49c:	4640      	mov	r0, r8
 800b49e:	4659      	mov	r1, fp
 800b4a0:	f7f5 f8b2 	bl	8000608 <__aeabi_dmul>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f7f4 fef4 	bl	8000298 <__aeabi_dsub>
 800b4b0:	4642      	mov	r2, r8
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	460d      	mov	r5, r1
 800b4b6:	465b      	mov	r3, fp
 800b4b8:	4650      	mov	r0, sl
 800b4ba:	4659      	mov	r1, fp
 800b4bc:	f7f4 feee 	bl	800029c <__adddf3>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f5 f9c8 	bl	800085c <__aeabi_ddiv>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	f7f4 fee4 	bl	800029c <__adddf3>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	a113      	add	r1, pc, #76	; (adr r1, 800b528 <__ieee754_asin+0x418>)
 800b4da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4de:	f7f4 fedb 	bl	8000298 <__aeabi_dsub>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	f7f4 fed5 	bl	8000298 <__aeabi_dsub>
 800b4ee:	4642      	mov	r2, r8
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	f7f4 fecf 	bl	800029c <__adddf3>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	a10b      	add	r1, pc, #44	; (adr r1, 800b530 <__ieee754_asin+0x420>)
 800b504:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b508:	f7f4 fec6 	bl	8000298 <__aeabi_dsub>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f4 fec0 	bl	8000298 <__aeabi_dsub>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	a104      	add	r1, pc, #16	; (adr r1, 800b530 <__ieee754_asin+0x420>)
 800b51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b522:	e6df      	b.n	800b2e4 <__ieee754_asin+0x1d4>
 800b524:	f3af 8000 	nop.w
 800b528:	33145c07 	.word	0x33145c07
 800b52c:	3c91a626 	.word	0x3c91a626
 800b530:	54442d18 	.word	0x54442d18
 800b534:	3fe921fb 	.word	0x3fe921fb

0800b538 <__ieee754_sqrt>:
 800b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53c:	ec55 4b10 	vmov	r4, r5, d0
 800b540:	4e56      	ldr	r6, [pc, #344]	; (800b69c <__ieee754_sqrt+0x164>)
 800b542:	43ae      	bics	r6, r5
 800b544:	ee10 0a10 	vmov	r0, s0
 800b548:	ee10 3a10 	vmov	r3, s0
 800b54c:	4629      	mov	r1, r5
 800b54e:	462a      	mov	r2, r5
 800b550:	d110      	bne.n	800b574 <__ieee754_sqrt+0x3c>
 800b552:	ee10 2a10 	vmov	r2, s0
 800b556:	462b      	mov	r3, r5
 800b558:	f7f5 f856 	bl	8000608 <__aeabi_dmul>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4620      	mov	r0, r4
 800b562:	4629      	mov	r1, r5
 800b564:	f7f4 fe9a 	bl	800029c <__adddf3>
 800b568:	4604      	mov	r4, r0
 800b56a:	460d      	mov	r5, r1
 800b56c:	ec45 4b10 	vmov	d0, r4, r5
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	2d00      	cmp	r5, #0
 800b576:	dc10      	bgt.n	800b59a <__ieee754_sqrt+0x62>
 800b578:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b57c:	4330      	orrs	r0, r6
 800b57e:	d0f5      	beq.n	800b56c <__ieee754_sqrt+0x34>
 800b580:	b15d      	cbz	r5, 800b59a <__ieee754_sqrt+0x62>
 800b582:	ee10 2a10 	vmov	r2, s0
 800b586:	462b      	mov	r3, r5
 800b588:	ee10 0a10 	vmov	r0, s0
 800b58c:	f7f4 fe84 	bl	8000298 <__aeabi_dsub>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	f7f5 f962 	bl	800085c <__aeabi_ddiv>
 800b598:	e7e6      	b.n	800b568 <__ieee754_sqrt+0x30>
 800b59a:	1509      	asrs	r1, r1, #20
 800b59c:	d076      	beq.n	800b68c <__ieee754_sqrt+0x154>
 800b59e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b5a2:	07ce      	lsls	r6, r1, #31
 800b5a4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b5a8:	bf5e      	ittt	pl
 800b5aa:	0fda      	lsrpl	r2, r3, #31
 800b5ac:	005b      	lslpl	r3, r3, #1
 800b5ae:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b5b2:	0fda      	lsrs	r2, r3, #31
 800b5b4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b5b8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b5bc:	2000      	movs	r0, #0
 800b5be:	106d      	asrs	r5, r5, #1
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	f04f 0e16 	mov.w	lr, #22
 800b5c6:	4684      	mov	ip, r0
 800b5c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5cc:	eb0c 0401 	add.w	r4, ip, r1
 800b5d0:	4294      	cmp	r4, r2
 800b5d2:	bfde      	ittt	le
 800b5d4:	1b12      	suble	r2, r2, r4
 800b5d6:	eb04 0c01 	addle.w	ip, r4, r1
 800b5da:	1840      	addle	r0, r0, r1
 800b5dc:	0052      	lsls	r2, r2, #1
 800b5de:	f1be 0e01 	subs.w	lr, lr, #1
 800b5e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b5e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b5ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5ee:	d1ed      	bne.n	800b5cc <__ieee754_sqrt+0x94>
 800b5f0:	4671      	mov	r1, lr
 800b5f2:	2720      	movs	r7, #32
 800b5f4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b5f8:	4562      	cmp	r2, ip
 800b5fa:	eb04 060e 	add.w	r6, r4, lr
 800b5fe:	dc02      	bgt.n	800b606 <__ieee754_sqrt+0xce>
 800b600:	d113      	bne.n	800b62a <__ieee754_sqrt+0xf2>
 800b602:	429e      	cmp	r6, r3
 800b604:	d811      	bhi.n	800b62a <__ieee754_sqrt+0xf2>
 800b606:	2e00      	cmp	r6, #0
 800b608:	eb06 0e04 	add.w	lr, r6, r4
 800b60c:	da43      	bge.n	800b696 <__ieee754_sqrt+0x15e>
 800b60e:	f1be 0f00 	cmp.w	lr, #0
 800b612:	db40      	blt.n	800b696 <__ieee754_sqrt+0x15e>
 800b614:	f10c 0801 	add.w	r8, ip, #1
 800b618:	eba2 020c 	sub.w	r2, r2, ip
 800b61c:	429e      	cmp	r6, r3
 800b61e:	bf88      	it	hi
 800b620:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b624:	1b9b      	subs	r3, r3, r6
 800b626:	4421      	add	r1, r4
 800b628:	46c4      	mov	ip, r8
 800b62a:	0052      	lsls	r2, r2, #1
 800b62c:	3f01      	subs	r7, #1
 800b62e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b632:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b636:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b63a:	d1dd      	bne.n	800b5f8 <__ieee754_sqrt+0xc0>
 800b63c:	4313      	orrs	r3, r2
 800b63e:	d006      	beq.n	800b64e <__ieee754_sqrt+0x116>
 800b640:	1c4c      	adds	r4, r1, #1
 800b642:	bf13      	iteet	ne
 800b644:	3101      	addne	r1, #1
 800b646:	3001      	addeq	r0, #1
 800b648:	4639      	moveq	r1, r7
 800b64a:	f021 0101 	bicne.w	r1, r1, #1
 800b64e:	1043      	asrs	r3, r0, #1
 800b650:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b654:	0849      	lsrs	r1, r1, #1
 800b656:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b65a:	07c2      	lsls	r2, r0, #31
 800b65c:	bf48      	it	mi
 800b65e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b662:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b666:	460c      	mov	r4, r1
 800b668:	463d      	mov	r5, r7
 800b66a:	e77f      	b.n	800b56c <__ieee754_sqrt+0x34>
 800b66c:	0ada      	lsrs	r2, r3, #11
 800b66e:	3815      	subs	r0, #21
 800b670:	055b      	lsls	r3, r3, #21
 800b672:	2a00      	cmp	r2, #0
 800b674:	d0fa      	beq.n	800b66c <__ieee754_sqrt+0x134>
 800b676:	02d7      	lsls	r7, r2, #11
 800b678:	d50a      	bpl.n	800b690 <__ieee754_sqrt+0x158>
 800b67a:	f1c1 0420 	rsb	r4, r1, #32
 800b67e:	fa23 f404 	lsr.w	r4, r3, r4
 800b682:	1e4d      	subs	r5, r1, #1
 800b684:	408b      	lsls	r3, r1
 800b686:	4322      	orrs	r2, r4
 800b688:	1b41      	subs	r1, r0, r5
 800b68a:	e788      	b.n	800b59e <__ieee754_sqrt+0x66>
 800b68c:	4608      	mov	r0, r1
 800b68e:	e7f0      	b.n	800b672 <__ieee754_sqrt+0x13a>
 800b690:	0052      	lsls	r2, r2, #1
 800b692:	3101      	adds	r1, #1
 800b694:	e7ef      	b.n	800b676 <__ieee754_sqrt+0x13e>
 800b696:	46e0      	mov	r8, ip
 800b698:	e7be      	b.n	800b618 <__ieee754_sqrt+0xe0>
 800b69a:	bf00      	nop
 800b69c:	7ff00000 	.word	0x7ff00000

0800b6a0 <fabs>:
 800b6a0:	ec51 0b10 	vmov	r0, r1, d0
 800b6a4:	ee10 2a10 	vmov	r2, s0
 800b6a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6ac:	ec43 2b10 	vmov	d0, r2, r3
 800b6b0:	4770      	bx	lr
 800b6b2:	0000      	movs	r0, r0
 800b6b4:	0000      	movs	r0, r0
	...

0800b6b8 <nan>:
 800b6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b6c0 <nan+0x8>
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	00000000 	.word	0x00000000
 800b6c4:	7ff80000 	.word	0x7ff80000

0800b6c8 <_init>:
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	bf00      	nop
 800b6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ce:	bc08      	pop	{r3}
 800b6d0:	469e      	mov	lr, r3
 800b6d2:	4770      	bx	lr

0800b6d4 <_fini>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	bf00      	nop
 800b6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6da:	bc08      	pop	{r3}
 800b6dc:	469e      	mov	lr, r3
 800b6de:	4770      	bx	lr
