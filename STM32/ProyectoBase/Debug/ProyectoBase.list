
ProyectoBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008d48  08008d48  00018d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e60  08008e60  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e68  08008e68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054dc  20000014  08008e84  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054f0  08008e84  000254f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ece8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b8b  00000000  00000000  0003ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000428b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  00043f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f4e  00000000  00000000  000454a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b63  00000000  00000000  0005e3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4b19  00000000  00000000  00076f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ba6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f50  00000000  00000000  0011bac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d30 	.word	0x08008d30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08008d30 	.word	0x08008d30

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <UART_initialize>:
static osEventFlagsId_t UART_EventFlagsHandle;



void UART_initialize( UART_HandleTypeDef * huart, uint32_t timeout )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	UART_handler = huart;
 80004e2:	4a09      	ldr	r2, [pc, #36]	; (8000508 <UART_initialize+0x30>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6013      	str	r3, [r2, #0]
	UART_timeout = timeout;
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <UART_initialize+0x34>)
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	6013      	str	r3, [r2, #0]
	UART_EventFlagsHandle = osEventFlagsNew(NULL);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f004 fefc 	bl	80052ec <osEventFlagsNew>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <UART_initialize+0x38>)
 80004f8:	6013      	str	r3, [r2, #0]
	current_state = AWAITING_CONNECTION;
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <UART_initialize+0x3c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000334 	.word	0x20000334
 800050c:	20000330 	.word	0x20000330
 8000510:	2000033c 	.word	0x2000033c
 8000514:	20000338 	.word	0x20000338

08000518 <_run_command>:



static int _run_command( uint8_t command, uint8_t address, const union Data * param, union Data * ret_param )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60ba      	str	r2, [r7, #8]
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	460b      	mov	r3, r1
 8000528:	73bb      	strb	r3, [r7, #14]
	if( command >= SUPPORTED_COMMANDS || command_pointers[command] == NULL )
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2bbf      	cmp	r3, #191	; 0xbf
 800052e:	d805      	bhi.n	800053c <_run_command+0x24>
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <_run_command+0x44>)
 8000534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_run_command+0x2a>
	{
		return CMD_INVALID_CMD;
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	e008      	b.n	8000554 <_run_command+0x3c>
	}

	return command_pointers[command](address, param, ret_param);
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <_run_command+0x44>)
 8000546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054a:	7bb8      	ldrb	r0, [r7, #14]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	68b9      	ldr	r1, [r7, #8]
 8000550:	4798      	blx	r3
 8000552:	4603      	mov	r3, r0
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000030 	.word	0x20000030

08000560 <_error_check>:



static uint8_t _error_check( const struct UART_Tx_Frame * tx_frame )
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	return 0;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <UART_start_server>:



/* TODO: ACK/deteccion de errores */
void UART_start_server( void )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	int cmd_ret;
	union Data ret_param;

	while(1)
	{
		switch( current_state )
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <UART_start_server+0xa4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1fb      	bne.n	800057e <UART_start_server+0x6>
		{
		case AWAITING_CONNECTION:
			ret = serial_receive( (uint8_t *)&tx_frame, sizeof(struct UART_Tx_Frame), UART_TIMEOUT_FOREVER );
 8000586:	f04f 32ff 	mov.w	r2, #4294967295
 800058a:	2108      	movs	r1, #8
 800058c:	4824      	ldr	r0, [pc, #144]	; (8000620 <UART_start_server+0xa8>)
 800058e:	f000 f885 	bl	800069c <serial_receive>
 8000592:	4603      	mov	r3, r0
 8000594:	73fb      	strb	r3, [r7, #15]

			if( ret == UART_SUCCESS )
 8000596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d13b      	bne.n	8000616 <UART_start_server+0x9e>
			{
				if( !_error_check(&tx_frame) )
 800059e:	4820      	ldr	r0, [pc, #128]	; (8000620 <UART_start_server+0xa8>)
 80005a0:	f7ff ffde 	bl	8000560 <_error_check>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d135      	bne.n	8000616 <UART_start_server+0x9e>
				{
					cmd_ret = _run_command( tx_frame.command, tx_frame.address, &tx_frame.data, &ret_param );
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <UART_start_server+0xa8>)
 80005ac:	7818      	ldrb	r0, [r3, #0]
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <UART_start_server+0xa8>)
 80005b0:	7859      	ldrb	r1, [r3, #1]
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <UART_start_server+0xac>)
 80005b6:	f7ff ffaf 	bl	8000518 <_run_command>
 80005ba:	60b8      	str	r0, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3303      	adds	r3, #3
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d81b      	bhi.n	80005fc <UART_start_server+0x84>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <UART_start_server+0x54>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005f5 	.word	0x080005f5
 80005d0:	080005ed 	.word	0x080005ed
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005dd 	.word	0x080005dd

					switch( cmd_ret )
					{
						case CMD_SUCCESS:
							rx_frame.ack = ACK_SUCCESS;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <UART_start_server+0xb0>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
							break;
 80005e2:	e00b      	b.n	80005fc <UART_start_server+0x84>

						case CMD_INVALID_CMD:
							rx_frame.ack = ACK_INVALID_CMD;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <UART_start_server+0xb0>)
 80005e6:	2205      	movs	r2, #5
 80005e8:	701a      	strb	r2, [r3, #0]
							break;
 80005ea:	e007      	b.n	80005fc <UART_start_server+0x84>

						case CMD_INVALID_ADDR:
							rx_frame.ack = ACK_INVALID_ADDR;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <UART_start_server+0xb0>)
 80005ee:	2203      	movs	r2, #3
 80005f0:	701a      	strb	r2, [r3, #0]
							break;
 80005f2:	e003      	b.n	80005fc <UART_start_server+0x84>

						case CMD_INVALID_DATA:
							rx_frame.ack = ACK_INVALID_DATA;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <UART_start_server+0xb0>)
 80005f6:	2204      	movs	r2, #4
 80005f8:	701a      	strb	r2, [r3, #0]
							break;
 80005fa:	bf00      	nop
					}

					rx_frame.data = ret_param;
 80005fc:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <UART_start_server+0xb0>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f8c2 3001 	str.w	r3, [r2, #1]

					ret = serial_send( (uint8_t *)&rx_frame, sizeof(struct UART_Rx_Frame), UART_timeout );
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <UART_start_server+0xb4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	2107      	movs	r1, #7
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <UART_start_server+0xb0>)
 800060e:	f000 f871 	bl	80006f4 <serial_send>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]
//				else
//				{
//					current_state = AWAITING_RESEND;
//				}
			}
			break;
 8000616:	bf00      	nop
		switch( current_state )
 8000618:	e7b1      	b.n	800057e <UART_start_server+0x6>
 800061a:	bf00      	nop
 800061c:	20000338 	.word	0x20000338
 8000620:	20000340 	.word	0x20000340
 8000624:	20000342 	.word	0x20000342
 8000628:	20000348 	.word	0x20000348
 800062c:	20000330 	.word	0x20000330

08000630 <UART_register_command>:
}



int UART_register_command( uint8_t cmd, int (*f_ptr)(uint8_t, const union Data *, union Data *) )
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
	if( cmd >= SUPPORTED_COMMANDS || f_ptr == NULL )
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2bbf      	cmp	r3, #191	; 0xbf
 8000640:	d802      	bhi.n	8000648 <UART_register_command+0x18>
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <UART_register_command+0x1e>
	{
		return -1;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	e005      	b.n	800065a <UART_register_command+0x2a>
	}

	command_pointers[cmd] = f_ptr;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4905      	ldr	r1, [pc, #20]	; (8000668 <UART_register_command+0x38>)
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000030 	.word	0x20000030

0800066c <UART_notify_RxCplt>:



void UART_notify_RxCplt(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	osEventFlagsSet( UART_EventFlagsHandle, UART_EORx_FLAG );
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <UART_notify_RxCplt+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fe78 	bl	800536c <osEventFlagsSet>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000033c 	.word	0x2000033c

08000684 <UART_notify_TxCplt>:



void UART_notify_TxCplt(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	osEventFlagsSet( UART_EventFlagsHandle, UART_EOTx_FLAG );
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <UART_notify_TxCplt+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2101      	movs	r1, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fe6c 	bl	800536c <osEventFlagsSet>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000033c 	.word	0x2000033c

0800069c <serial_receive>:



UART_status serial_receive( uint8_t * buffer_ptr, uint8_t length, uint32_t timeout )
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	460b      	mov	r3, r1
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	72fb      	strb	r3, [r7, #11]
	int ret;

	HAL_UART_Receive_IT(UART_handler, buffer_ptr, length);
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <serial_receive+0x50>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	7afa      	ldrb	r2, [r7, #11]
 80006b0:	b292      	uxth	r2, r2
 80006b2:	68f9      	ldr	r1, [r7, #12]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fe6d 	bl	8004394 <HAL_UART_Receive_IT>

	ret = osEventFlagsWait( UART_EventFlagsHandle, UART_EORx_FLAG, osFlagsWaitAny, timeout );
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <serial_receive+0x54>)
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	2102      	movs	r1, #2
 80006c4:	f004 fec8 	bl	8005458 <osEventFlagsWait>
 80006c8:	4603      	mov	r3, r0
 80006ca:	617b      	str	r3, [r7, #20]

	if( ret == osFlagsErrorTimeout)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f113 0f02 	cmn.w	r3, #2
 80006d2:	d101      	bne.n	80006d8 <serial_receive+0x3c>
	{
		return UART_TIMEOUT;
 80006d4:	2302      	movs	r3, #2
 80006d6:	e005      	b.n	80006e4 <serial_receive+0x48>
	}
	else if( ret < 0 )
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	da01      	bge.n	80006e2 <serial_receive+0x46>
	{
		return UART_DEVERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <serial_receive+0x48>
	}

	return UART_SUCCESS;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000334 	.word	0x20000334
 80006f0:	2000033c 	.word	0x2000033c

080006f4 <serial_send>:



UART_status serial_send( uint8_t * buffer_ptr, uint8_t length, uint32_t timeout )
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	460b      	mov	r3, r1
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	72fb      	strb	r3, [r7, #11]
	int ret;

	HAL_UART_Transmit_IT(UART_handler, buffer_ptr, length);
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <serial_send+0x50>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	7afa      	ldrb	r2, [r7, #11]
 8000708:	b292      	uxth	r2, r2
 800070a:	68f9      	ldr	r1, [r7, #12]
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fdfc 	bl	800430a <HAL_UART_Transmit_IT>

	ret = osEventFlagsWait( UART_EventFlagsHandle, UART_EOTx_FLAG, osFlagsWaitAny, timeout );
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <serial_send+0x54>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	f004 fe9c 	bl	8005458 <osEventFlagsWait>
 8000720:	4603      	mov	r3, r0
 8000722:	617b      	str	r3, [r7, #20]

	if( ret == osFlagsErrorTimeout)
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	f113 0f02 	cmn.w	r3, #2
 800072a:	d101      	bne.n	8000730 <serial_send+0x3c>
	{
		return UART_TIMEOUT;
 800072c:	2302      	movs	r3, #2
 800072e:	e005      	b.n	800073c <serial_send+0x48>
	}
	else if( ret < 0 )
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da01      	bge.n	800073a <serial_send+0x46>
	{
		return UART_DEVERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e000      	b.n	800073c <serial_send+0x48>
	}

	return UART_SUCCESS;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000334 	.word	0x20000334
 8000748:	2000033c 	.word	0x2000033c

0800074c <led_on>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void led_on(uint8_t v)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	switch (v)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b04      	cmp	r3, #4
 800075a:	d840      	bhi.n	80007de <led_on+0x92>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <led_on+0x18>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	08000779 	.word	0x08000779
 8000768:	080007a9 	.word	0x080007a9
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007c3 	.word	0x080007c3
 8000774:	080007d1 	.word	0x080007d1
	{
		case 0:
			HAL_GPIO_WritePin(D3_LED1_GPIO_Port, D3_LED1_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2108      	movs	r1, #8
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <led_on+0x9c>)
 800077e:	f002 f9fd 	bl	8002b7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_LED2_GPIO_Port, D6_LED2_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <led_on+0x9c>)
 800078a:	f002 f9f7 	bl	8002b7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_LED3_GPIO_Port, D7_LED3_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	4815      	ldr	r0, [pc, #84]	; (80007ec <led_on+0xa0>)
 8000796:	f002 f9f1 	bl	8002b7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D8_LED4_GPIO_Port, D8_LED4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	4812      	ldr	r0, [pc, #72]	; (80007ec <led_on+0xa0>)
 80007a2:	f002 f9eb 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 80007a6:	e01a      	b.n	80007de <led_on+0x92>
		case 1:
			HAL_GPIO_WritePin(D3_LED1_GPIO_Port, D3_LED1_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2108      	movs	r1, #8
 80007ac:	480e      	ldr	r0, [pc, #56]	; (80007e8 <led_on+0x9c>)
 80007ae:	f002 f9e5 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 80007b2:	e014      	b.n	80007de <led_on+0x92>
		case 2:
			HAL_GPIO_WritePin(D6_LED2_GPIO_Port, D6_LED2_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <led_on+0x9c>)
 80007bc:	f002 f9de 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 80007c0:	e00d      	b.n	80007de <led_on+0x92>
		case 3:
			HAL_GPIO_WritePin(D7_LED3_GPIO_Port, D7_LED3_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <led_on+0xa0>)
 80007ca:	f002 f9d7 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 80007ce:	e006      	b.n	80007de <led_on+0x92>
		case 4:
			HAL_GPIO_WritePin(D8_LED4_GPIO_Port, D8_LED4_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <led_on+0xa0>)
 80007d8:	f002 f9d0 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 80007dc:	bf00      	nop

	}
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40020000 	.word	0x40020000

080007f0 <led_off>:

void led_off(uint8_t v)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	switch (v)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d840      	bhi.n	8000882 <led_off+0x92>
 8000800:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <led_off+0x18>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	0800081d 	.word	0x0800081d
 800080c:	0800084d 	.word	0x0800084d
 8000810:	08000859 	.word	0x08000859
 8000814:	08000867 	.word	0x08000867
 8000818:	08000875 	.word	0x08000875
	{
		case 0:
			HAL_GPIO_WritePin(D3_LED1_GPIO_Port, D3_LED1_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2108      	movs	r1, #8
 8000820:	481a      	ldr	r0, [pc, #104]	; (800088c <led_off+0x9c>)
 8000822:	f002 f9ab 	bl	8002b7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_LED2_GPIO_Port, D6_LED2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	4817      	ldr	r0, [pc, #92]	; (800088c <led_off+0x9c>)
 800082e:	f002 f9a5 	bl	8002b7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_LED3_GPIO_Port, D7_LED3_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	4815      	ldr	r0, [pc, #84]	; (8000890 <led_off+0xa0>)
 800083a:	f002 f99f 	bl	8002b7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D8_LED4_GPIO_Port, D8_LED4_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000844:	4812      	ldr	r0, [pc, #72]	; (8000890 <led_off+0xa0>)
 8000846:	f002 f999 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 800084a:	e01a      	b.n	8000882 <led_off+0x92>
		case 1:
			HAL_GPIO_WritePin(D3_LED1_GPIO_Port, D3_LED1_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2108      	movs	r1, #8
 8000850:	480e      	ldr	r0, [pc, #56]	; (800088c <led_off+0x9c>)
 8000852:	f002 f993 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 8000856:	e014      	b.n	8000882 <led_off+0x92>
		case 2:
			HAL_GPIO_WritePin(D6_LED2_GPIO_Port, D6_LED2_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	480b      	ldr	r0, [pc, #44]	; (800088c <led_off+0x9c>)
 8000860:	f002 f98c 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 8000864:	e00d      	b.n	8000882 <led_off+0x92>
		case 3:
			HAL_GPIO_WritePin(D7_LED3_GPIO_Port, D7_LED3_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <led_off+0xa0>)
 800086e:	f002 f985 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 8000872:	e006      	b.n	8000882 <led_off+0x92>
		case 4:
			HAL_GPIO_WritePin(D8_LED4_GPIO_Port, D8_LED4_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <led_off+0xa0>)
 800087c:	f002 f97e 	bl	8002b7c <HAL_GPIO_WritePin>
			break;
 8000880:	bf00      	nop
	}
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40020400 	.word	0x40020400
 8000890:	40020000 	.word	0x40020000

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fece 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f85c 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f000 f9fc 	bl	8000c9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a4:	f000 f9b0 	bl	8000c08 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80008a8:	f000 f9d8 	bl	8000c5c <MX_DMA_Init>
  MX_ADC1_Init();
 80008ac:	f000 f8be 	bl	8000a2c <MX_ADC1_Init>
  MX_TIM3_Init();
 80008b0:	f000 f938 	bl	8000b24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_DMA_buffer, 4);
 80008b4:	2204      	movs	r2, #4
 80008b6:	4918      	ldr	r1, [pc, #96]	; (8000918 <main+0x84>)
 80008b8:	4818      	ldr	r0, [pc, #96]	; (800091c <main+0x88>)
 80008ba:	f000 ff43 	bl	8001744 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <main+0x8c>)
 80008c0:	f002 fe9e 	bl	8003600 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c4:	f004 fc1a 	bl	80050fc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of LedArrayMutex */
  LedArrayMutexHandle = osMutexNew(&LedArrayMutex_attributes);
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <main+0x90>)
 80008ca:	f004 fe2b 	bl	8005524 <osMutexNew>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a15      	ldr	r2, [pc, #84]	; (8000928 <main+0x94>)
 80008d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SerialCommTask */
  SerialCommTaskHandle = osThreadNew(StartMainTask, NULL, &SerialCommTask_attributes);
 80008d4:	4a15      	ldr	r2, [pc, #84]	; (800092c <main+0x98>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4815      	ldr	r0, [pc, #84]	; (8000930 <main+0x9c>)
 80008da:	f004 fc59 	bl	8005190 <osThreadNew>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <main+0xa0>)
 80008e2:	6013      	str	r3, [r2, #0]

  /* creation of LedAnimation1 */
  LedAnimation1Handle = osThreadNew(StartLedAnimation1, NULL, &LedAnimation1_attributes);
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <main+0xa4>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <main+0xa8>)
 80008ea:	f004 fc51 	bl	8005190 <osThreadNew>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <main+0xac>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* creation of LedAnimation2 */
  LedAnimation2Handle = osThreadNew(StartLedAnimation2, NULL, &LedAnimation2_attributes);
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <main+0xb0>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <main+0xb4>)
 80008fa:	f004 fc49 	bl	8005190 <osThreadNew>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <main+0xb8>)
 8000902:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of LedAnimationEvents */
  LedAnimationEventsHandle = osEventFlagsNew(&LedAnimationEvents_attributes);
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <main+0xbc>)
 8000906:	f004 fcf1 	bl	80052ec <osEventFlagsNew>
 800090a:	4603      	mov	r3, r0
 800090c:	4a11      	ldr	r2, [pc, #68]	; (8000954 <main+0xc0>)
 800090e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000910:	f004 fc18 	bl	8005144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000914:	e7fe      	b.n	8000914 <main+0x80>
 8000916:	bf00      	nop
 8000918:	20005414 	.word	0x20005414
 800091c:	200052b0 	.word	0x200052b0
 8000920:	20005264 	.word	0x20005264
 8000924:	08008e20 	.word	0x08008e20
 8000928:	20005410 	.word	0x20005410
 800092c:	08008db4 	.word	0x08008db4
 8000930:	08001075 	.word	0x08001075
 8000934:	20005260 	.word	0x20005260
 8000938:	08008dd8 	.word	0x08008dd8
 800093c:	080010ad 	.word	0x080010ad
 8000940:	200052ac 	.word	0x200052ac
 8000944:	08008dfc 	.word	0x08008dfc
 8000948:	0800118d 	.word	0x0800118d
 800094c:	200052f8 	.word	0x200052f8
 8000950:	08008e30 	.word	0x08008e30
 8000954:	2000541c 	.word	0x2000541c

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f008 f9da 	bl	8008d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <SystemClock_Config+0xcc>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <SystemClock_Config+0xcc>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <SystemClock_Config+0xcc>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <SystemClock_Config+0xd0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <SystemClock_Config+0xd0>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <SystemClock_Config+0xd0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009c8:	2310      	movs	r3, #16
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009d2:	2304      	movs	r3, #4
 80009d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f918 	bl	8002c14 <HAL_RCC_OscConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ea:	f000 fc31 	bl	8001250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	230f      	movs	r3, #15
 80009f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	2302      	movs	r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fb7a 	bl	8003104 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a16:	f000 fc1b 	bl	8001250 <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	; 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a40:	4a37      	ldr	r2, [pc, #220]	; (8000b20 <MX_ADC1_Init+0xf4>)
 8000a42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000a44:	4b35      	ldr	r3, [pc, #212]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a52:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a90:	4822      	ldr	r0, [pc, #136]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000a92:	f000 fe13 	bl	80016bc <HAL_ADC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000a9c:	f000 fbd8 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481a      	ldr	r0, [pc, #104]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000ab2:	f000 ff4b 	bl	800194c <HAL_ADC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000abc:	f000 fbc8 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000ace:	f000 ff3d 	bl	800194c <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ad8:	f000 fbba 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000aea:	f000 ff2f 	bl	800194c <HAL_ADC_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000af4:	f000 fbac 	bl	8001250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000af8:	2306      	movs	r3, #6
 8000afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_ADC1_Init+0xf0>)
 8000b06:	f000 ff21 	bl	800194c <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000b10:	f000 fb9e 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200052b0 	.word	0x200052b0
 8000b20:	40012000 	.word	0x40012000

08000b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b56:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <MX_TIM3_Init+0xe0>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 209;
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b5c:	22d1      	movs	r2, #209	; 0xd1
 8000b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b68:	2263      	movs	r2, #99	; 0x63
 8000b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b78:	4821      	ldr	r0, [pc, #132]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b7a:	f002 fcf1 	bl	8003560 <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000b84:	f000 fb64 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b92:	4619      	mov	r1, r3
 8000b94:	481a      	ldr	r0, [pc, #104]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000b96:	f002 ff53 	bl	8003a40 <HAL_TIM_ConfigClockSource>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ba0:	f000 fb56 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ba4:	4816      	ldr	r0, [pc, #88]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000ba6:	f002 fd8d 	bl	80036c4 <HAL_TIM_OC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000bb0:	f000 fb4e 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000bc4:	f003 fad2 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000bce:	f000 fb3f 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	220c      	movs	r2, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_TIM3_Init+0xdc>)
 8000bea:	f002 fecd 	bl	8003988 <HAL_TIM_OC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000bf4:	f000 fb2c 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3738      	adds	r7, #56	; 0x38
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20005264 	.word	0x20005264
 8000c04:	40000400 	.word	0x40000400

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART2_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f003 fb16 	bl	8004270 <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f000 fb01 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20005420 	.word	0x20005420
 8000c58:	40004400 	.word	0x40004400

08000c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_DMA_Init+0x3c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <MX_DMA_Init+0x3c>)
 8000c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_DMA_Init+0x3c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	2038      	movs	r0, #56	; 0x38
 8000c84:	f001 f9ca 	bl	800201c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c88:	2038      	movs	r0, #56	; 0x38
 8000c8a:	f001 f9e3 	bl	8002054 <HAL_NVIC_EnableIRQ>

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a46      	ldr	r2, [pc, #280]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b44      	ldr	r3, [pc, #272]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a38      	ldr	r2, [pc, #224]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <MX_GPIO_Init+0x138>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_LED3_Pin|D8_LED4_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000d28:	482b      	ldr	r0, [pc, #172]	; (8000dd8 <MX_GPIO_Init+0x13c>)
 8000d2a:	f001 ff27 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LED2_Pin|D3_LED1_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000d34:	4829      	ldr	r0, [pc, #164]	; (8000ddc <MX_GPIO_Init+0x140>)
 8000d36:	f001 ff21 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4823      	ldr	r0, [pc, #140]	; (8000de0 <MX_GPIO_Init+0x144>)
 8000d52:	f001 fd8f 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_LED3_Pin D8_LED4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_LED3_Pin|D8_LED4_Pin;
 8000d56:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <MX_GPIO_Init+0x13c>)
 8000d70:	f001 fd80 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LED2_Pin D3_LED1_Pin */
  GPIO_InitStruct.Pin = D6_LED2_Pin|D3_LED1_Pin;
 8000d74:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_GPIO_Init+0x140>)
 8000d8e:	f001 fd71 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : D5_EXTI_Pin */
  GPIO_InitStruct.Pin = D5_EXTI_Pin;
 8000d92:	2310      	movs	r3, #16
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D5_EXTI_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_GPIO_Init+0x140>)
 8000da8:	f001 fd64 	bl	8002874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2105      	movs	r1, #5
 8000db0:	200a      	movs	r0, #10
 8000db2:	f001 f933 	bl	800201c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000db6:	200a      	movs	r0, #10
 8000db8:	f001 f94c 	bl	8002054 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	2028      	movs	r0, #40	; 0x28
 8000dc2:	f001 f92b 	bl	800201c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc6:	2028      	movs	r0, #40	; 0x28
 8000dc8:	f001 f944 	bl	8002054 <HAL_NVIC_EnableIRQ>

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800

08000de4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	switch( GPIO_Pin )
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	2b10      	cmp	r3, #16
 8000df2:	d013      	beq.n	8000e1c <HAL_GPIO_EXTI_Callback+0x38>
 8000df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000df8:	d121      	bne.n	8000e3e <HAL_GPIO_EXTI_Callback+0x5a>
	{
	case GPIO_PIN_15: // Botón de la placa Nucleo (+ velocidad)
		animation_period_factor = (animation_period_factor==1 ? MAX_ANIM_PERIOD_FACTOR : animation_period_factor-1);
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d004      	beq.n	8000e0c <HAL_GPIO_EXTI_Callback+0x28>
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_EXTI_Callback+0x2a>
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e10:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e12:	2120      	movs	r1, #32
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e16:	f001 feca 	bl	8002bae <HAL_GPIO_TogglePin>
		break;
 8000e1a:	e010      	b.n	8000e3e <HAL_GPIO_EXTI_Callback+0x5a>

	case GPIO_PIN_4: // Botón externo (- velocidad)
		animation_period_factor = (animation_period_factor==MAX_ANIM_PERIOD_FACTOR ? 1 : animation_period_factor+1);
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b0a      	cmp	r3, #10
 8000e22:	d004      	beq.n	8000e2e <HAL_GPIO_EXTI_Callback+0x4a>
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x4c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e32:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e34:	2120      	movs	r1, #32
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e38:	f001 feb9 	bl	8002bae <HAL_GPIO_TogglePin>
		break;
 8000e3c:	bf00      	nop
	}
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_ADC_ConvCpltCallback>:


/* Obtención y filtrado de las muestras */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	current_sample_index = (current_sample_index+1)%ANALOG_BUFFER_SIZE;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	1c59      	adds	r1, r3, #1
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000e60:	fb83 2301 	smull	r2, r3, r3, r1
 8000e64:	105a      	asrs	r2, r3, #1
 8000e66:	17cb      	asrs	r3, r1, #31
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	1aca      	subs	r2, r1, r3
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e7a:	701a      	strb	r2, [r3, #0]

	for( uint8_t i=0; i<4; ++i )
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e01a      	b.n	8000eb8 <HAL_ADC_ConvCpltCallback+0x68>
		analog_buffer[i][current_sample_index] = ADC_DMA_buffer[i];
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x84>)
 8000e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8a:	b299      	uxth	r1, r3
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	ee07 1a90 	vmov	s15, r1
 8000e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9c:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x88>)
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4403      	add	r3, r0
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	edc3 7a00 	vstr	s15, [r3]
	for( uint8_t i=0; i<4; ++i )
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d9e1      	bls.n	8000e82 <HAL_ADC_ConvCpltCallback+0x32>
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	2000535c 	.word	0x2000535c
 8000ed0:	2e8ba2e9 	.word	0x2e8ba2e9
 8000ed4:	20005414 	.word	0x20005414
 8000ed8:	20005360 	.word	0x20005360

08000edc <read_analog>:
 *
 * */


int read_analog( uint8_t address, const union Data * tx, union Data * rx )
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]

	if( address > 3 )
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d902      	bls.n	8000ef6 <read_analog+0x1a>
	{
		return CMD_INVALID_ADDR;
 8000ef0:	f06f 0301 	mvn.w	r3, #1
 8000ef4:	e05e      	b.n	8000fb4 <read_analog+0xd8>
	Axout = (((analog_buffer[DIR_CANAL_X][current_sample_index] * VREF)/4095.0)-1.6)/0.32;
	Ayout = (((analog_buffer[DIR_CANAL_Y][current_sample_index] * VREF)/4095.0)-1.6)/0.32;
	Azout = (((analog_buffer[DIR_CANAL_Z][current_sample_index] * VREF)/4095.0)-1.7)/0.32;
#endif

	switch( address )
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d85a      	bhi.n	8000fb2 <read_analog+0xd6>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <read_analog+0x28>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f3b 	.word	0x08000f3b
 8000f0c:	08000f63 	.word	0x08000f63
 8000f10:	08000f8b 	.word	0x08000f8b
	{
	case DIR_CANAL_X:

#if READ_RAW_ANALOG_VALUES
		rx->F = (analog_buffer[DIR_CANAL_X][current_sample_index] * VREF)/4095.0;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <read_analog+0xe4>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <read_analog+0xe8>)
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000fc8 <read_analog+0xec>
 8000f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f2a:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000fcc <read_analog+0xf0>
 8000f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edc3 7a00 	vstr	s15, [r3]
#else
		rx->F = atan2(Axout,(sqrt(pow(Ayout,2)+pow(Azout,2))))*(180/PI); // En grados, formula sacada de internet
#endif
		break;
 8000f38:	e03b      	b.n	8000fb2 <read_analog+0xd6>

	case DIR_CANAL_Y:

#if READ_RAW_ANALOG_VALUES
		rx->F = (analog_buffer[DIR_CANAL_Y][current_sample_index] * VREF)/4095.0;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <read_analog+0xe4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <read_analog+0xe8>)
 8000f40:	330b      	adds	r3, #11
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000fc8 <read_analog+0xec>
 8000f4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f52:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000fcc <read_analog+0xf0>
 8000f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
#else
		rx->F = atan2(Ayout,(sqrt(pow(Axout,2)+pow(Azout,2))))*(180.0/PI); // En grados, formula sacada de internet
#endif
		break;
 8000f60:	e027      	b.n	8000fb2 <read_analog+0xd6>

	case DIR_CANAL_Z:

#if READ_RAW_ANALOG_VALUES
		rx->F = (analog_buffer[DIR_CANAL_Z][current_sample_index] * VREF)/4095.0;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <read_analog+0xe4>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <read_analog+0xe8>)
 8000f68:	3316      	adds	r3, #22
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	edd3 7a00 	vldr	s15, [r3]
 8000f72:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000fc8 <read_analog+0xec>
 8000f76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f7a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000fcc <read_analog+0xf0>
 8000f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edc3 7a00 	vstr	s15, [r3]
#else
		rx->F = atan2((sqrt(pow(Axout,2)+pow(Ayout,2))),Azout)*(180.0/PI); // En grados, formula sacada de internet
#endif
		break;
 8000f88:	e013      	b.n	8000fb2 <read_analog+0xd6>

	case DIR_CANAL_T:
		rx->F = (analog_buffer[DIR_CANAL_T][current_sample_index]*VREF)/4095.0;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <read_analog+0xe4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <read_analog+0xe8>)
 8000f90:	3321      	adds	r3, #33	; 0x21
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000fc8 <read_analog+0xec>
 8000f9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000fcc <read_analog+0xf0>
 8000fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	edc3 7a00 	vstr	s15, [r3]
		break;
 8000fb0:	bf00      	nop
	}

	return CMD_SUCCESS;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	2000535c 	.word	0x2000535c
 8000fc4:	20005360 	.word	0x20005360
 8000fc8:	40533333 	.word	0x40533333
 8000fcc:	457ff000 	.word	0x457ff000

08000fd0 <switch_led_animations>:



int switch_led_animations( uint8_t address, const union Data * tx, union Data * rx )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]

	switch( tx->W )
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d002      	beq.n	8000fec <switch_led_animations+0x1c>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d00d      	beq.n	8001006 <switch_led_animations+0x36>
 8000fea:	e019      	b.n	8001020 <switch_led_animations+0x50>
	{
	case LED_ANIMATION_1:
		osEventFlagsClear(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_2);
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <switch_led_animations+0x60>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 f9fe 	bl	80053f4 <osEventFlagsClear>
		osEventFlagsSet(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_1);
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <switch_led_animations+0x60>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 f9b4 	bl	800536c <osEventFlagsSet>
		break;
 8001004:	e00f      	b.n	8001026 <switch_led_animations+0x56>

	case LED_ANIMATION_2:
		osEventFlagsClear(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_1);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <switch_led_animations+0x60>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2101      	movs	r1, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f004 f9f1 	bl	80053f4 <osEventFlagsClear>
		osEventFlagsSet(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_2);
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <switch_led_animations+0x60>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2102      	movs	r1, #2
 8001018:	4618      	mov	r0, r3
 800101a:	f004 f9a7 	bl	800536c <osEventFlagsSet>
		break;
 800101e:	e002      	b.n	8001026 <switch_led_animations+0x56>

	default:
		return CMD_INVALID_DATA;
 8001020:	f06f 0302 	mvn.w	r3, #2
 8001024:	e000      	b.n	8001028 <switch_led_animations+0x58>
	}

	return CMD_SUCCESS;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000541c 	.word	0x2000541c

08001034 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if( UartHandle == &huart2 )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_UART_RxCpltCallback+0x1c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_UART_RxCpltCallback+0x14>
	{
		UART_notify_RxCplt();
 8001044:	f7ff fb12 	bl	800066c <UART_notify_RxCplt>
	}
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20005420 	.word	0x20005420

08001054 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if( UartHandle == &huart2 )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_UART_TxCpltCallback+0x1c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_UART_TxCpltCallback+0x14>
	{
		UART_notify_TxCplt();
 8001064:	f7ff fb0e 	bl	8000684 <UART_notify_TxCplt>
	}
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20005420 	.word	0x20005420

08001074 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	UART_register_command( 0x1, switch_led_animations );
 800107c:	4908      	ldr	r1, [pc, #32]	; (80010a0 <StartMainTask+0x2c>)
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fad6 	bl	8000630 <UART_register_command>
	UART_register_command( 0x3, read_analog );
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <StartMainTask+0x30>)
 8001086:	2003      	movs	r0, #3
 8001088:	f7ff fad2 	bl	8000630 <UART_register_command>

	UART_initialize( &huart2, 100 );
 800108c:	2164      	movs	r1, #100	; 0x64
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <StartMainTask+0x34>)
 8001090:	f7ff fa22 	bl	80004d8 <UART_initialize>

	UART_start_server();
 8001094:	f7ff fa70 	bl	8000578 <UART_start_server>

  /* USER CODE END 5 */
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08000fd1 	.word	0x08000fd1
 80010a4:	08000edd 	.word	0x08000edd
 80010a8:	20005420 	.word	0x20005420

080010ac <StartLedAnimation1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedAnimation1 */
void StartLedAnimation1(void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedAnimation1 */

	osEventFlagsSet(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_1);
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <StartLedAnimation1+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 f956 	bl	800536c <osEventFlagsSet>


	for(;;)
	{
		osEventFlagsWait(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_1, osFlagsWaitAny|osFlagsNoClear, osWaitForever);
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <StartLedAnimation1+0xd4>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2202      	movs	r2, #2
 80010ca:	2101      	movs	r1, #1
 80010cc:	f004 f9c4 	bl	8005458 <osEventFlagsWait>
		osMutexAcquire(LedArrayMutexHandle, osWaitForever);
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <StartLedAnimation1+0xd8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 faa9 	bl	8005630 <osMutexAcquire>


	  	led_off(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fb86 	bl	80007f0 <led_off>
		for (uint8_t i=1; i<5; i++)
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e010      	b.n	800110c <StartLedAnimation1+0x60>
		{
			led_on(i);
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fb2d 	bl	800074c <led_on>
			osDelay(80*animation_period_factor);
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <StartLedAnimation1+0xdc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4618      	mov	r0, r3
 8001102:	f004 f8d8 	bl	80052b6 <osDelay>
		for (uint8_t i=1; i<5; i++)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d9eb      	bls.n	80010ea <StartLedAnimation1+0x3e>
		}

		for (uint8_t i=1;i<5;i++)
 8001112:	2301      	movs	r3, #1
 8001114:	73bb      	strb	r3, [r7, #14]
 8001116:	e010      	b.n	800113a <StartLedAnimation1+0x8e>
		{
			led_off(i);
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fb68 	bl	80007f0 <led_off>
			osDelay(80*animation_period_factor);
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <StartLedAnimation1+0xdc>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4618      	mov	r0, r3
 8001130:	f004 f8c1 	bl	80052b6 <osDelay>
		for (uint8_t i=1;i<5;i++)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	3301      	adds	r3, #1
 8001138:	73bb      	strb	r3, [r7, #14]
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d9eb      	bls.n	8001118 <StartLedAnimation1+0x6c>
		}

		led_on(0);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fb03 	bl	800074c <led_on>
		osDelay(80*animation_period_factor);
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <StartLedAnimation1+0xdc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f004 f8ae 	bl	80052b6 <osDelay>

		led_off(0);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fb48 	bl	80007f0 <led_off>
		osDelay(80*animation_period_factor);
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <StartLedAnimation1+0xdc>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f004 f8a1 	bl	80052b6 <osDelay>

		osMutexRelease(LedArrayMutexHandle);
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <StartLedAnimation1+0xd8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f004 faa4 	bl	80056c6 <osMutexRelease>
		osEventFlagsWait(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_1, osFlagsWaitAny|osFlagsNoClear, osWaitForever);
 800117e:	e79f      	b.n	80010c0 <StartLedAnimation1+0x14>
 8001180:	2000541c 	.word	0x2000541c
 8001184:	20005410 	.word	0x20005410
 8001188:	20000000 	.word	0x20000000

0800118c <StartLedAnimation2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedAnimation2 */
void StartLedAnimation2(void *argument)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedAnimation2 */

	osEventFlagsClear(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_2);
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <StartLedAnimation2+0x94>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f004 f92a 	bl	80053f4 <osEventFlagsClear>

	for(;;)
	{
		osEventFlagsWait(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_2, osFlagsWaitAny|osFlagsNoClear, osWaitForever);
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <StartLedAnimation2+0x94>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	2202      	movs	r2, #2
 80011aa:	2102      	movs	r1, #2
 80011ac:	f004 f954 	bl	8005458 <osEventFlagsWait>
		osMutexAcquire(LedArrayMutexHandle, osWaitForever);
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <StartLedAnimation2+0x98>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fa39 	bl	8005630 <osMutexAcquire>

		led_off(0);
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fb16 	bl	80007f0 <led_off>
		led_on(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff fac1 	bl	800074c <led_on>
		led_off(2);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f7ff fb10 	bl	80007f0 <led_off>
		led_on(3);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff fabb 	bl	800074c <led_on>
		osDelay(100*animation_period_factor);
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <StartLedAnimation2+0x9c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	fb03 f302 	mul.w	r3, r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 f867 	bl	80052b6 <osDelay>

		led_on(0);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff faaf 	bl	800074c <led_on>
		led_off(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fafe 	bl	80007f0 <led_off>
		led_on(2);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff faa9 	bl	800074c <led_on>
		led_off(3);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f7ff faf8 	bl	80007f0 <led_off>
		osDelay(100*animation_period_factor);
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <StartLedAnimation2+0x9c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	fb03 f302 	mul.w	r3, r3, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f004 f852 	bl	80052b6 <osDelay>

		osMutexRelease(LedArrayMutexHandle);
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <StartLedAnimation2+0x98>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fa55 	bl	80056c6 <osMutexRelease>
		osEventFlagsWait(LedAnimationEventsHandle, ENABLE_LED_ANIMATION_2, osFlagsWaitAny|osFlagsNoClear, osWaitForever);
 800121c:	e7c0      	b.n	80011a0 <StartLedAnimation2+0x14>
 800121e:	bf00      	nop
 8001220:	2000541c 	.word	0x2000541c
 8001224:	20005410 	.word	0x20005410
 8001228:	20000000 	.word	0x20000000

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 fa1d 	bl	800167c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_MspInit+0x54>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_MspInit+0x54>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x54>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_MspInit+0x54>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_MspInit+0x54>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_MspInit+0x54>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 febb 	bl	800201c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d157      	bne.n	8001386 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = A0_AIN_X_Pin|A1_AIN_Y_Pin|A2_AIN_Z_Pin|D12_AIN_TEMP_Pin;
 800130e:	2353      	movs	r3, #83	; 0x53
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001322:	f001 faa7 	bl	8002874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_ADC_MspInit+0xec>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800136c:	f000 fe80 	bl	8002070 <HAL_DMA_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001376:	f7ff ff6b 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012000 	.word	0x40012000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	200052fc 	.word	0x200052fc
 80013a0:	40026410 	.word	0x40026410

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_TIM_Base_MspInit+0x3c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10d      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_TIM_Base_MspInit+0x40>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_TIM_Base_MspInit+0x40>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <HAL_TIM_Base_MspInit+0x40>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40000400 	.word	0x40000400
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1d      	ldr	r2, [pc, #116]	; (800147c <HAL_UART_MspInit+0x94>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d133      	bne.n	8001472 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_UART_MspInit+0x98>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_UART_MspInit+0x98>)
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_UART_MspInit+0x98>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_UART_MspInit+0x98>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_UART_MspInit+0x98>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_UART_MspInit+0x98>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001442:	230c      	movs	r3, #12
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001452:	2307      	movs	r3, #7
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_UART_MspInit+0x9c>)
 800145e:	f001 fa09 	bl	8002874 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2026      	movs	r0, #38	; 0x26
 8001468:	f000 fdd8 	bl	800201c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800146c:	2026      	movs	r0, #38	; 0x26
 800146e:	f000 fdf1 	bl	8002054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40004400 	.word	0x40004400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	2019      	movs	r0, #25
 800149e:	f000 fdbd 	bl	800201c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014a2:	2019      	movs	r0, #25
 80014a4:	f000 fdd6 	bl	8002054 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_InitTick+0xa0>)
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_InitTick+0xa0>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6453      	str	r3, [r2, #68]	; 0x44
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_InitTick+0xa0>)
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c4:	f107 0210 	add.w	r2, r7, #16
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f814 	bl	80034fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014d4:	f001 fffe 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 80014d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_InitTick+0xa4>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	3b01      	subs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_InitTick+0xa8>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_InitTick+0xac>)
 80014ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_InitTick+0xa8>)
 80014f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_InitTick+0xa8>)
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_InitTick+0xa8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_InitTick+0xa8>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_InitTick+0xa8>)
 800150a:	f002 f829 	bl	8003560 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_InitTick+0xa8>)
 8001516:	f002 f873 	bl	8003600 <HAL_TIM_Base_Start_IT>
 800151a:	4603      	mov	r3, r0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	431bde83 	.word	0x431bde83
 8001530:	20005464 	.word	0x20005464
 8001534:	40010000 	.word	0x40010000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A2_AIN_Z_Pin);
 8001568:	2010      	movs	r0, #16
 800156a:	f001 fb3b 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800157a:	f002 f8fc 	bl	8003776 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20005464 	.word	0x20005464

08001588 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <USART2_IRQHandler+0x10>)
 800158e:	f002 ff31 	bl	80043f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20005420 	.word	0x20005420

0800159c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015a4:	f001 fb1e 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA2_Stream0_IRQHandler+0x10>)
 80015b2:	f000 fef5 	bl	80023a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200052fc 	.word	0x200052fc

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160e:	f7ff ffd7 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f007 fb53 	bl	8008cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff f93d 	bl	8000894 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001628:	08008e70 	.word	0x08008e70
  ldr r2, =_sbss
 800162c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001630:	200054f0 	.word	0x200054f0

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fcd0 	bl	8002006 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f7ff ff0e 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fdf6 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c
 80016a0:	200054ac 	.word	0x200054ac

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200054ac 	.word	0x200054ac

080016bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e033      	b.n	800173a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fdea 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d118      	bne.n	800172c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001702:	f023 0302 	bic.w	r3, r3, #2
 8001706:	f043 0202 	orr.w	r2, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fa4e 	bl	8001bb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f023 0303 	bic.w	r3, r3, #3
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
 800172a:	e001      	b.n	8001730 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Start_DMA+0x1e>
 800175e:	2302      	movs	r3, #2
 8001760:	e0ce      	b.n	8001900 <HAL_ADC_Start_DMA+0x1bc>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d018      	beq.n	80017aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001788:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <HAL_ADC_Start_DMA+0x1c4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a5f      	ldr	r2, [pc, #380]	; (800190c <HAL_ADC_Start_DMA+0x1c8>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9a      	lsrs	r2, r3, #18
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800179c:	e002      	b.n	80017a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b8:	d107      	bne.n	80017ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	f040 8086 	bne.w	80018e6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001804:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001818:	d106      	bne.n	8001828 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f023 0206 	bic.w	r2, r3, #6
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
 8001826:	e002      	b.n	800182e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_ADC_Start_DMA+0x1cc>)
 8001838:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	4a35      	ldr	r2, [pc, #212]	; (8001914 <HAL_ADC_Start_DMA+0x1d0>)
 8001840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	4a34      	ldr	r2, [pc, #208]	; (8001918 <HAL_ADC_Start_DMA+0x1d4>)
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184e:	4a33      	ldr	r2, [pc, #204]	; (800191c <HAL_ADC_Start_DMA+0x1d8>)
 8001850:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800185a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800186a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800187a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	334c      	adds	r3, #76	; 0x4c
 8001886:	4619      	mov	r1, r3
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f000 fc9e 	bl	80021cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10f      	bne.n	80018bc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d129      	bne.n	80018fe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	e020      	b.n	80018fe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a17      	ldr	r2, [pc, #92]	; (8001920 <HAL_ADC_Start_DMA+0x1dc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11b      	bne.n	80018fe <HAL_ADC_Start_DMA+0x1ba>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d114      	bne.n	80018fe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00b      	b.n	80018fe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000004 	.word	0x20000004
 800190c:	431bde83 	.word	0x431bde83
 8001910:	40012300 	.word	0x40012300
 8001914:	08001da9 	.word	0x08001da9
 8001918:	08001e63 	.word	0x08001e63
 800191c:	08001e7f 	.word	0x08001e7f
 8001920:	40012000 	.word	0x40012000

08001924 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1c>
 8001964:	2302      	movs	r3, #2
 8001966:	e113      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x244>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b09      	cmp	r3, #9
 8001976:	d925      	bls.n	80019c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	3b1e      	subs	r3, #30
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43da      	mvns	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	400a      	ands	r2, r1
 800199c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68d9      	ldr	r1, [r3, #12]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	4603      	mov	r3, r0
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4403      	add	r3, r0
 80019b6:	3b1e      	subs	r3, #30
 80019b8:	409a      	lsls	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	e022      	b.n	8001a0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	2207      	movs	r2, #7
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	400a      	ands	r2, r1
 80019e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4403      	add	r3, r0
 8001a00:	409a      	lsls	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d824      	bhi.n	8001a5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	3b05      	subs	r3, #5
 8001a24:	221f      	movs	r2, #31
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b05      	subs	r3, #5
 8001a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5a:	e04c      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d824      	bhi.n	8001aae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3b23      	subs	r3, #35	; 0x23
 8001a76:	221f      	movs	r2, #31
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	400a      	ands	r2, r1
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b23      	subs	r3, #35	; 0x23
 8001aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8001aac:	e023      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3b41      	subs	r3, #65	; 0x41
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	400a      	ands	r2, r1
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b41      	subs	r3, #65	; 0x41
 8001aea:	fa00 f203 	lsl.w	r2, r0, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_ADC_ConfigChannel+0x250>)
 8001af8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <HAL_ADC_ConfigChannel+0x254>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d10f      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1d8>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b12      	cmp	r3, #18
 8001b0a:	d10b      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_ADC_ConfigChannel+0x254>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12b      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x23a>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_ADC_ConfigChannel+0x258>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d003      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0x1f4>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b11      	cmp	r3, #17
 8001b3e:	d122      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_ADC_ConfigChannel+0x258>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d111      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_ADC_ConfigChannel+0x25c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_ADC_ConfigChannel+0x260>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	0c9a      	lsrs	r2, r3, #18
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b78:	e002      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f9      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40012300 	.word	0x40012300
 8001ba0:	40012000 	.word	0x40012000
 8001ba4:	10000012 	.word	0x10000012
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	431bde83 	.word	0x431bde83

08001bb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <ADC_Init+0x1f0>)
 8001bba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	021a      	lsls	r2, r3, #8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <ADC_Init+0x1f4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	e00f      	b.n	8001cae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0202 	bic.w	r2, r2, #2
 8001cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7e1b      	ldrb	r3, [r3, #24]
 8001cc8:	005a      	lsls	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	3b01      	subs	r3, #1
 8001d08:	035a      	lsls	r2, r3, #13
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	e007      	b.n	8001d24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	051a      	lsls	r2, r3, #20
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d66:	025a      	lsls	r2, r3, #9
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	029a      	lsls	r2, r3, #10
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40012300 	.word	0x40012300
 8001da4:	0f000001 	.word	0x0f000001

08001da8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d13c      	bne.n	8001e3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d12b      	bne.n	8001e34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d127      	bne.n	8001e34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d119      	bne.n	8001e34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0220 	bic.w	r2, r2, #32
 8001e0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff f80b 	bl	8000e50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e3a:	e00e      	b.n	8001e5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fd75 	bl	8001938 <HAL_ADC_ErrorCallback>
}
 8001e4e:	e004      	b.n	8001e5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fd57 	bl	8001924 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f043 0204 	orr.w	r2, r3, #4
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff fd4a 	bl	8001938 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff4c 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202e:	f7ff ff61 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002032:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	6978      	ldr	r0, [r7, #20]
 800203a:	f7ff ffb1 	bl	8001fa0 <NVIC_EncodePriority>
 800203e:	4602      	mov	r2, r0
 8002040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff80 	bl	8001f4c <__NVIC_SetPriority>
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff54 	bl	8001f10 <__NVIC_EnableIRQ>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff fb12 	bl	80016a4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e099      	b.n	80021c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ac:	e00f      	b.n	80020ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ae:	f7ff faf9 	bl	80016a4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d908      	bls.n	80020ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2203      	movs	r2, #3
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e078      	b.n	80021c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e8      	bne.n	80020ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_DMA_Init+0x158>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b04      	cmp	r3, #4
 8002126:	d107      	bne.n	8002138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	4313      	orrs	r3, r2
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f023 0307 	bic.w	r3, r3, #7
 800214e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2b04      	cmp	r3, #4
 8002160:	d117      	bne.n	8002192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00e      	beq.n	8002192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fb01 	bl	800277c <DMA_CheckFifoParam>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2240      	movs	r2, #64	; 0x40
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800218e:	2301      	movs	r3, #1
 8002190:	e016      	b.n	80021c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fab8 	bl	8002710 <DMA_CalcBaseAndBitshift>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	223f      	movs	r2, #63	; 0x3f
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	f010803f 	.word	0xf010803f

080021cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_Start_IT+0x26>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e040      	b.n	8002274 <HAL_DMA_Start_IT+0xa8>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12f      	bne.n	8002266 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fa4a 	bl	80026b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	223f      	movs	r2, #63	; 0x3f
 8002226:	409a      	lsls	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0216 	orr.w	r2, r2, #22
 800223a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e005      	b.n	8002272 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800226e:	2302      	movs	r3, #2
 8002270:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002272:	7dfb      	ldrb	r3, [r7, #23]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800228a:	f7ff fa0b 	bl	80016a4 <HAL_GetTick>
 800228e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d008      	beq.n	80022ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e052      	b.n	8002354 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0216 	bic.w	r2, r2, #22
 80022bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <HAL_DMA_Abort+0x62>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0208 	bic.w	r2, r2, #8
 80022ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fe:	e013      	b.n	8002328 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002300:	f7ff f9d0 	bl	80016a4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d90c      	bls.n	8002328 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2203      	movs	r2, #3
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e015      	b.n	8002354 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e4      	bne.n	8002300 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	223f      	movs	r2, #63	; 0x3f
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d004      	beq.n	800237a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00c      	b.n	8002394 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2205      	movs	r2, #5
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_DMA_IRQHandler+0x258>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a92      	ldr	r2, [pc, #584]	; (80025fc <HAL_DMA_IRQHandler+0x25c>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0a9b      	lsrs	r3, r3, #10
 80023b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	2208      	movs	r2, #8
 80023cc:	409a      	lsls	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01a      	beq.n	800240c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0204 	bic.w	r2, r2, #4
 80023f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	2208      	movs	r2, #8
 80023fa:	409a      	lsls	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2201      	movs	r2, #1
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	2201      	movs	r2, #1
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f043 0202 	orr.w	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2204      	movs	r2, #4
 8002448:	409a      	lsls	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	2204      	movs	r2, #4
 8002466:	409a      	lsls	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2210      	movs	r2, #16
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d043      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d03c      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	2210      	movs	r2, #16
 800249c:	409a      	lsls	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d018      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
 80024ce:	e01f      	b.n	8002510 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01b      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
 80024e0:	e016      	b.n	8002510 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0208 	bic.w	r2, r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	2220      	movs	r2, #32
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 808e 	beq.w	800263e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8086 	beq.w	800263e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	2220      	movs	r2, #32
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b05      	cmp	r3, #5
 8002548:	d136      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0216 	bic.w	r2, r2, #22
 8002558:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002568:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d103      	bne.n	800257a <HAL_DMA_IRQHandler+0x1da>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	223f      	movs	r2, #63	; 0x3f
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d07d      	beq.n	80026aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
        }
        return;
 80025b6:	e078      	b.n	80026aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01c      	beq.n	8002600 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d030      	beq.n	800263e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
 80025e4:	e02b      	b.n	800263e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d027      	beq.n	800263e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
 80025f6:	e022      	b.n	800263e <HAL_DMA_IRQHandler+0x29e>
 80025f8:	20000004 	.word	0x20000004
 80025fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0210 	bic.w	r2, r2, #16
 800261c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	2b00      	cmp	r3, #0
 8002644:	d032      	beq.n	80026ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d022      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2205      	movs	r2, #5
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3301      	adds	r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	429a      	cmp	r2, r3
 8002674:	d307      	bcc.n	8002686 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f2      	bne.n	800266a <HAL_DMA_IRQHandler+0x2ca>
 8002684:	e000      	b.n	8002688 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002686:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e000      	b.n	80026ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80026aa:	bf00      	nop
    }
  }
}
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop

080026b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d108      	bne.n	80026f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026f2:	e007      	b.n	8002704 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	60da      	str	r2, [r3, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	3b10      	subs	r3, #16
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <DMA_CalcBaseAndBitshift+0x64>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <DMA_CalcBaseAndBitshift+0x68>)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d909      	bls.n	8002752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002746:	f023 0303 	bic.w	r3, r3, #3
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	659a      	str	r2, [r3, #88]	; 0x58
 8002750:	e007      	b.n	8002762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	aaaaaaab 	.word	0xaaaaaaab
 8002778:	08008e58 	.word	0x08008e58

0800277c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d11f      	bne.n	80027d6 <DMA_CheckFifoParam+0x5a>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d856      	bhi.n	800284a <DMA_CheckFifoParam+0xce>
 800279c:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <DMA_CheckFifoParam+0x28>)
 800279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a2:	bf00      	nop
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027c7 	.word	0x080027c7
 80027ac:	080027b5 	.word	0x080027b5
 80027b0:	0800284b 	.word	0x0800284b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d046      	beq.n	800284e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e043      	b.n	800284e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ce:	d140      	bne.n	8002852 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d4:	e03d      	b.n	8002852 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027de:	d121      	bne.n	8002824 <DMA_CheckFifoParam+0xa8>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d837      	bhi.n	8002856 <DMA_CheckFifoParam+0xda>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <DMA_CheckFifoParam+0x70>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	080027fd 	.word	0x080027fd
 80027f0:	08002803 	.word	0x08002803
 80027f4:	080027fd 	.word	0x080027fd
 80027f8:	08002815 	.word	0x08002815
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	e030      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d025      	beq.n	800285a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002812:	e022      	b.n	800285a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800281c:	d11f      	bne.n	800285e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002822:	e01c      	b.n	800285e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d903      	bls.n	8002832 <DMA_CheckFifoParam+0xb6>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d003      	beq.n	8002838 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002830:	e018      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
      break;
 8002836:	e015      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00e      	beq.n	8002862 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      break;
 8002848:	e00b      	b.n	8002862 <DMA_CheckFifoParam+0xe6>
      break;
 800284a:	bf00      	nop
 800284c:	e00a      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
 8002850:	e008      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e006      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e004      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e002      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      break;   
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
    }
  } 
  
  return status; 
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e159      	b.n	8002b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8148 	bne.w	8002b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d005      	beq.n	80028c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d130      	bne.n	8002928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 0201 	and.w	r2, r3, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d017      	beq.n	8002964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a2 	beq.w	8002b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b57      	ldr	r3, [pc, #348]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a16:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_GPIO_Init+0x2ec>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a49      	ldr	r2, [pc, #292]	; (8002b64 <HAL_GPIO_Init+0x2f0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x202>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a48      	ldr	r2, [pc, #288]	; (8002b68 <HAL_GPIO_Init+0x2f4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x1fe>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a47      	ldr	r2, [pc, #284]	; (8002b6c <HAL_GPIO_Init+0x2f8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a46      	ldr	r2, [pc, #280]	; (8002b70 <HAL_GPIO_Init+0x2fc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x1f6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a45      	ldr	r2, [pc, #276]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x1f2>
 8002a62:	2304      	movs	r3, #4
 8002a64:	e008      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e004      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a76:	2300      	movs	r3, #0
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f002 0203 	and.w	r2, r2, #3
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4093      	lsls	r3, r2
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a88:	4935      	ldr	r1, [pc, #212]	; (8002b60 <HAL_GPIO_Init+0x2ec>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3301      	adds	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	f67f aea2 	bls.w	8002890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020c00 	.word	0x40020c00
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bc0:	887a      	ldrh	r2, [r7, #2]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	041a      	lsls	r2, r3, #16
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	887b      	ldrh	r3, [r7, #2]
 8002bce:	400b      	ands	r3, r1
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f8ee 	bl	8000de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40013c00 	.word	0x40013c00

08002c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e264      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d075      	beq.n	8002d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c32:	4ba3      	ldr	r3, [pc, #652]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4ba0      	ldr	r3, [pc, #640]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d112      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b9d      	ldr	r3, [pc, #628]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b99      	ldr	r3, [pc, #612]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x108>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d157      	bne.n	8002d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e23f      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d106      	bne.n	8002c88 <HAL_RCC_OscConfig+0x74>
 8002c7a:	4b91      	ldr	r3, [pc, #580]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a90      	ldr	r2, [pc, #576]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01d      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x98>
 8002c92:	4b8b      	ldr	r3, [pc, #556]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a8a      	ldr	r2, [pc, #552]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a87      	ldr	r2, [pc, #540]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002cac:	4b84      	ldr	r3, [pc, #528]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a83      	ldr	r2, [pc, #524]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a80      	ldr	r2, [pc, #512]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fcea 	bl	80016a4 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe fce6 	bl	80016a4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e204      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xc0>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fcd6 	bl	80016a4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fcd2 	bl	80016a4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1f0      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0xe8>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b62      	ldr	r3, [pc, #392]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d11c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1c4      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4952      	ldr	r1, [pc, #328]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	e03a      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <HAL_RCC_OscConfig+0x2b0>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fc8b 	bl	80016a4 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe fc87 	bl	80016a4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1a5      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4940      	ldr	r1, [pc, #256]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_OscConfig+0x2b0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fc6a 	bl	80016a4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fc66 	bl	80016a4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e184      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d030      	beq.n	8002e60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e06:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_RCC_OscConfig+0x2b4>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fc4a 	bl	80016a4 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe fc46 	bl	80016a4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e164      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x200>
 8002e32:	e015      	b.n	8002e60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_OscConfig+0x2b4>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fc33 	bl	80016a4 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe fc2f 	bl	80016a4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e14d      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a0 	beq.w	8002fae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x2b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d121      	bne.n	8002eee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCC_OscConfig+0x2b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <HAL_RCC_OscConfig+0x2b8>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fbf5 	bl	80016a4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	e011      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2ce>
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
 8002ecc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fe fbe8 	bl	80016a4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e106      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b85      	ldr	r3, [pc, #532]	; (80030f8 <HAL_RCC_OscConfig+0x4e4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2f0>
 8002ef6:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	e01c      	b.n	8002f3e <HAL_RCC_OscConfig+0x32a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCC_OscConfig+0x312>
 8002f0c:	4b7b      	ldr	r3, [pc, #492]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a7a      	ldr	r2, [pc, #488]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	4b78      	ldr	r3, [pc, #480]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a77      	ldr	r2, [pc, #476]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0x32a>
 8002f26:	4b75      	ldr	r3, [pc, #468]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a74      	ldr	r2, [pc, #464]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	4b72      	ldr	r3, [pc, #456]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a71      	ldr	r2, [pc, #452]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe fbad 	bl	80016a4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe fba9 	bl	80016a4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0c5      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ee      	beq.n	8002f4e <HAL_RCC_OscConfig+0x33a>
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fe fb97 	bl	80016a4 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe fb93 	bl	80016a4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0af      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	4b5a      	ldr	r3, [pc, #360]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ee      	bne.n	8002f7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a55      	ldr	r2, [pc, #340]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 809b 	beq.w	80030ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d05c      	beq.n	800307e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d141      	bne.n	8003050 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <HAL_RCC_OscConfig+0x4ec>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fb67 	bl	80016a4 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fda:	f7fe fb63 	bl	80016a4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e081      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fec:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	019b      	lsls	r3, r3, #6
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	3b01      	subs	r3, #1
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	4937      	ldr	r1, [pc, #220]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <HAL_RCC_OscConfig+0x4ec>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fb3c 	bl	80016a4 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fb38 	bl	80016a4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e056      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b2e      	ldr	r3, [pc, #184]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x41c>
 800304e:	e04e      	b.n	80030ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCC_OscConfig+0x4ec>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe fb25 	bl	80016a4 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fb21 	bl	80016a4 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e03f      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x44a>
 800307c:	e037      	b.n	80030ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e032      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_RCC_OscConfig+0x4e8>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d028      	beq.n	80030ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d121      	bne.n	80030ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d11a      	bne.n	80030ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d111      	bne.n	80030ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40007000 	.word	0x40007000
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470060 	.word	0x42470060

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0cc      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90c      	bls.n	8003140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d044      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e067      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fe fa56 	bl	80016a4 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fe fa52 	bl	80016a4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20c      	bcs.n	800324c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe f8ec 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08008e40 	.word	0x08008e40
 80032c8:	20000004 	.word	0x20000004
 80032cc:	20000008 	.word	0x20000008

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	2300      	movs	r3, #0
 80032e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d00d      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f200 80bd 	bhi.w	8003474 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x3a>
 8003302:	e0b7      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b61      	ldr	r3, [pc, #388]	; (800348c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003306:	60bb      	str	r3, [r7, #8]
       break;
 8003308:	e0b7      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b61      	ldr	r3, [pc, #388]	; (8003490 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800330c:	60bb      	str	r3, [r7, #8]
      break;
 800330e:	e0b4      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b5d      	ldr	r3, [pc, #372]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d04d      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	461a      	mov	r2, r3
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	ea02 0800 	and.w	r8, r2, r0
 800333e:	ea03 0901 	and.w	r9, r3, r1
 8003342:	4640      	mov	r0, r8
 8003344:	4649      	mov	r1, r9
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	014b      	lsls	r3, r1, #5
 8003350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003354:	0142      	lsls	r2, r0, #5
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	ebb0 0008 	subs.w	r0, r0, r8
 800335e:	eb61 0109 	sbc.w	r1, r1, r9
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	018b      	lsls	r3, r1, #6
 800336c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003370:	0182      	lsls	r2, r0, #6
 8003372:	1a12      	subs	r2, r2, r0
 8003374:	eb63 0301 	sbc.w	r3, r3, r1
 8003378:	f04f 0000 	mov.w	r0, #0
 800337c:	f04f 0100 	mov.w	r1, #0
 8003380:	00d9      	lsls	r1, r3, #3
 8003382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003386:	00d0      	lsls	r0, r2, #3
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	eb12 0208 	adds.w	r2, r2, r8
 8003390:	eb43 0309 	adc.w	r3, r3, r9
 8003394:	f04f 0000 	mov.w	r0, #0
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	0259      	lsls	r1, r3, #9
 800339e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033a2:	0250      	lsls	r0, r2, #9
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f7fc ff14 	bl	80001e0 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e04a      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	461a      	mov	r2, r3
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	ea02 0400 	and.w	r4, r2, r0
 80033da:	ea03 0501 	and.w	r5, r3, r1
 80033de:	4620      	mov	r0, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	014b      	lsls	r3, r1, #5
 80033ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033f0:	0142      	lsls	r2, r0, #5
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	1b00      	subs	r0, r0, r4
 80033f8:	eb61 0105 	sbc.w	r1, r1, r5
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	018b      	lsls	r3, r1, #6
 8003406:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800340a:	0182      	lsls	r2, r0, #6
 800340c:	1a12      	subs	r2, r2, r0
 800340e:	eb63 0301 	sbc.w	r3, r3, r1
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	00d9      	lsls	r1, r3, #3
 800341c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003420:	00d0      	lsls	r0, r2, #3
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	1912      	adds	r2, r2, r4
 8003428:	eb45 0303 	adc.w	r3, r5, r3
 800342c:	f04f 0000 	mov.w	r0, #0
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	0299      	lsls	r1, r3, #10
 8003436:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800343a:	0290      	lsls	r0, r2, #10
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f7fc fec8 	bl	80001e0 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	60bb      	str	r3, [r7, #8]
      break;
 8003472:	e002      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003476:	60bb      	str	r3, [r7, #8]
      break;
 8003478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347a:	68bb      	ldr	r3, [r7, #8]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	007a1200 	.word	0x007a1200

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000004 	.word	0x20000004

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08008e50 	.word	0x08008e50

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d8:	f7ff ffdc 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08008e50 	.word	0x08008e50

080034fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	220f      	movs	r2, #15
 800350a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	08db      	lsrs	r3, r3, #3
 8003536:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_RCC_GetClockConfig+0x60>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0207 	and.w	r2, r3, #7
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40023c00 	.word	0x40023c00

08003560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e041      	b.n	80035f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd ff0c 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 fb3e 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e044      	b.n	80036a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d018      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x6c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d013      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x6c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00e      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x6c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x6c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_TIM_Base_Start_IT+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x6c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d111      	bne.n	8003690 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b06      	cmp	r3, #6
 800367c:	d010      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	e007      	b.n	80036a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40014000 	.word	0x40014000

080036c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e041      	b.n	800375a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f839 	bl	8003762 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 fa8c 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d122      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b02      	cmp	r3, #2
 8003798:	d11b      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f06f 0202 	mvn.w	r2, #2
 80037a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fa12 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 80037be:	e005      	b.n	80037cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fa04 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa15 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d122      	bne.n	8003826 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d11b      	bne.n	8003826 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f06f 0204 	mvn.w	r2, #4
 80037f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9e8 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 8003812:	e005      	b.n	8003820 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f9da 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9eb 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d122      	bne.n	800387a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b08      	cmp	r3, #8
 8003840:	d11b      	bne.n	800387a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0208 	mvn.w	r2, #8
 800384a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2204      	movs	r2, #4
 8003850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f9be 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 8003866:	e005      	b.n	8003874 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f9b0 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9c1 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d122      	bne.n	80038ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b10      	cmp	r3, #16
 8003894:	d11b      	bne.n	80038ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f06f 0210 	mvn.w	r2, #16
 800389e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2208      	movs	r2, #8
 80038a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f994 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 80038ba:	e005      	b.n	80038c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f986 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f997 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d10e      	bne.n	80038fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f06f 0201 	mvn.w	r2, #1
 80038f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd fc99 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d10e      	bne.n	8003926 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b80      	cmp	r3, #128	; 0x80
 8003914:	d107      	bne.n	8003926 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800391e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fc9b 	bl	800425c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d10e      	bne.n	8003952 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d107      	bne.n	8003952 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800394a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f95c 	bl	8003c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d10e      	bne.n	800397e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d107      	bne.n	800397e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f06f 0220 	mvn.w	r2, #32
 8003976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fc65 	bl	8004248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e048      	b.n	8003a38 <HAL_TIM_OC_ConfigChannel+0xb0>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d839      	bhi.n	8003a28 <HAL_TIM_OC_ConfigChannel+0xa0>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	08003a29 	.word	0x08003a29
 80039c4:	08003a29 	.word	0x08003a29
 80039c8:	08003a29 	.word	0x08003a29
 80039cc:	080039ff 	.word	0x080039ff
 80039d0:	08003a29 	.word	0x08003a29
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	08003a29 	.word	0x08003a29
 80039dc:	08003a0d 	.word	0x08003a0d
 80039e0:	08003a29 	.word	0x08003a29
 80039e4:	08003a29 	.word	0x08003a29
 80039e8:	08003a29 	.word	0x08003a29
 80039ec:	08003a1b 	.word	0x08003a1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f992 	bl	8003d20 <TIM_OC1_SetConfig>
      break;
 80039fc:	e017      	b.n	8003a2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f9f1 	bl	8003dec <TIM_OC2_SetConfig>
      break;
 8003a0a:	e010      	b.n	8003a2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fa56 	bl	8003ec4 <TIM_OC3_SetConfig>
      break;
 8003a18:	e009      	b.n	8003a2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fab9 	bl	8003f98 <TIM_OC4_SetConfig>
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_ConfigClockSource+0x1c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0b4      	b.n	8003bc6 <HAL_TIM_ConfigClockSource+0x186>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a94:	d03e      	beq.n	8003b14 <HAL_TIM_ConfigClockSource+0xd4>
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	f200 8087 	bhi.w	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	f000 8086 	beq.w	8003bb2 <HAL_TIM_ConfigClockSource+0x172>
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d87f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b70      	cmp	r3, #112	; 0x70
 8003aae:	d01a      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0xa6>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d87b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d050      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x11a>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d877      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b50      	cmp	r3, #80	; 0x50
 8003abe:	d03c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xfa>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d873      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d058      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x13a>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d86f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d064      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d86b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d060      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d867      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d05a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	e062      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f000 fb19 	bl	800412c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	609a      	str	r2, [r3, #8]
      break;
 8003b12:	e04f      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f000 fb02 	bl	800412c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b36:	609a      	str	r2, [r3, #8]
      break;
 8003b38:	e03c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 fa76 	bl	8004038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2150      	movs	r1, #80	; 0x50
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 facf 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003b58:	e02c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 fa95 	bl	8004096 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2160      	movs	r1, #96	; 0x60
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fabf 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e01c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 fa56 	bl	8004038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2140      	movs	r1, #64	; 0x40
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 faaf 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f000 faa6 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003baa:	e003      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a34      	ldr	r2, [pc, #208]	; (8003d04 <TIM_Base_SetConfig+0xe4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00f      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3e:	d00b      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a31      	ldr	r2, [pc, #196]	; (8003d08 <TIM_Base_SetConfig+0xe8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a30      	ldr	r2, [pc, #192]	; (8003d0c <TIM_Base_SetConfig+0xec>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <TIM_Base_SetConfig+0xf0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d108      	bne.n	8003c6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a25      	ldr	r2, [pc, #148]	; (8003d04 <TIM_Base_SetConfig+0xe4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01b      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d017      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <TIM_Base_SetConfig+0xe8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a21      	ldr	r2, [pc, #132]	; (8003d0c <TIM_Base_SetConfig+0xec>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00f      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <TIM_Base_SetConfig+0xf0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <TIM_Base_SetConfig+0xf4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <TIM_Base_SetConfig+0xf8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d003      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <TIM_Base_SetConfig+0xfc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d108      	bne.n	8003cbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <TIM_Base_SetConfig+0xe4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d103      	bne.n	8003cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	615a      	str	r2, [r3, #20]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40010000 	.word	0x40010000
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800

08003d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f023 0201 	bic.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 0302 	bic.w	r3, r3, #2
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <TIM_OC1_SetConfig+0xc8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10c      	bne.n	8003d96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0308 	bic.w	r3, r3, #8
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <TIM_OC1_SetConfig+0xc8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d111      	bne.n	8003dc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40010000 	.word	0x40010000

08003dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0210 	bic.w	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0320 	bic.w	r3, r3, #32
 8003e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <TIM_OC2_SetConfig+0xd4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10d      	bne.n	8003e68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <TIM_OC2_SetConfig+0xd4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d113      	bne.n	8003e98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000

08003ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <TIM_OC3_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10d      	bne.n	8003f3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <TIM_OC3_SetConfig+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d113      	bne.n	8003f6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	621a      	str	r2, [r3, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40010000 	.word	0x40010000

08003f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	031b      	lsls	r3, r3, #12
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a10      	ldr	r2, [pc, #64]	; (8004034 <TIM_OC4_SetConfig+0x9c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d109      	bne.n	800400c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	019b      	lsls	r3, r3, #6
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40010000 	.word	0x40010000

08004038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0201 	bic.w	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 030a 	bic.w	r3, r3, #10
 8004074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0210 	bic.w	r2, r3, #16
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	031b      	lsls	r3, r3, #12
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	f043 0307 	orr.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	431a      	orrs	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e050      	b.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d013      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a16      	ldr	r2, [pc, #88]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a15      	ldr	r2, [pc, #84]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a13      	ldr	r2, [pc, #76]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10c      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	4313      	orrs	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40014000 	.word	0x40014000

08004248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e03f      	b.n	8004302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f8a6 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fd15 	bl	8004ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b20      	cmp	r3, #32
 8004322:	d130      	bne.n	8004386 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_UART_Transmit_IT+0x26>
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e029      	b.n	8004388 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_UART_Transmit_IT+0x38>
 800433e:	2302      	movs	r3, #2
 8004340:	e022      	b.n	8004388 <HAL_UART_Transmit_IT+0x7e>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2221      	movs	r2, #33	; 0x21
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004380:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d11d      	bne.n	80043ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_UART_Receive_IT+0x26>
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e016      	b.n	80043ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_UART_Receive_IT+0x38>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e00f      	b.n	80043ec <HAL_UART_Receive_IT+0x58>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	461a      	mov	r2, r3
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 faab 	bl	800493c <UART_Start_Receive_IT>
 80043e6:	4603      	mov	r3, r0
 80043e8:	e000      	b.n	80043ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b0ba      	sub	sp, #232	; 0xe8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_UART_IRQHandler+0x66>
 8004446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fb8b 	bl	8004b6e <UART_Receive_IT>
      return;
 8004458:	e256      	b.n	8004908 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800445a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80de 	beq.w	8004620 <HAL_UART_IRQHandler+0x22c>
 8004464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004474:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80d1 	beq.w	8004620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_UART_IRQHandler+0xae>
 800448a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_UART_IRQHandler+0xd2>
 80044ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0202 	orr.w	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_UART_IRQHandler+0xf6>
 80044d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0204 	orr.w	r2, r3, #4
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d011      	beq.n	800451a <HAL_UART_IRQHandler+0x126>
 80044f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f043 0208 	orr.w	r2, r3, #8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 81ed 	beq.w	80048fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_UART_IRQHandler+0x14e>
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fb16 	bl	8004b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_UART_IRQHandler+0x17a>
 8004566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d04f      	beq.n	800460e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa1e 	bl	80049b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d141      	bne.n	8004606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800459c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1d9      	bne.n	8004582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d013      	beq.n	80045fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	4a7d      	ldr	r2, [pc, #500]	; (80047d0 <HAL_UART_IRQHandler+0x3dc>)
 80045dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd feba 	bl	800235c <HAL_DMA_Abort_IT>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f8:	4610      	mov	r0, r2
 80045fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	e00e      	b.n	800461c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f986 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	e00a      	b.n	800461c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f982 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	e006      	b.n	800461c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f97e 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800461a:	e170      	b.n	80048fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	bf00      	nop
    return;
 800461e:	e16e      	b.n	80048fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	2b01      	cmp	r3, #1
 8004626:	f040 814a 	bne.w	80048be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8143 	beq.w	80048be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 813c 	beq.w	80048be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004646:	2300      	movs	r3, #0
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	f040 80b4 	bne.w	80047d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8140 	beq.w	8004902 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800468a:	429a      	cmp	r2, r3
 800468c:	f080 8139 	bcs.w	8004902 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004696:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	f000 8088 	beq.w	80047b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1d9      	bne.n	80046a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004716:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800471a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800471e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e1      	bne.n	80046f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800473e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004752:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004754:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004758:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004798:	65ba      	str	r2, [r7, #88]	; 0x58
 800479a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800479e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e3      	bne.n	8004774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fd63 	bl	800227c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8ac 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047cc:	e099      	b.n	8004902 <HAL_UART_IRQHandler+0x50e>
 80047ce:	bf00      	nop
 80047d0:	08004a77 	.word	0x08004a77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 808b 	beq.w	8004906 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8086 	beq.w	8004906 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800481e:	647a      	str	r2, [r7, #68]	; 0x44
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800482c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e3      	bne.n	80047fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	623b      	str	r3, [r7, #32]
   return(result);
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3314      	adds	r3, #20
 8004852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004856:	633a      	str	r2, [r7, #48]	; 0x30
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e3      	bne.n	8004832 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	60fb      	str	r3, [r7, #12]
   return(result);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0310 	bic.w	r3, r3, #16
 800488e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800489c:	61fa      	str	r2, [r7, #28]
 800489e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	69b9      	ldr	r1, [r7, #24]
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	617b      	str	r3, [r7, #20]
   return(result);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e3      	bne.n	8004878 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f834 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048bc:	e023      	b.n	8004906 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_UART_IRQHandler+0x4ea>
 80048ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8e1 	bl	8004a9e <UART_Transmit_IT>
    return;
 80048dc:	e014      	b.n	8004908 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00e      	beq.n	8004908 <HAL_UART_IRQHandler+0x514>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f921 	bl	8004b3e <UART_EndTransmit_IT>
    return;
 80048fc:	e004      	b.n	8004908 <HAL_UART_IRQHandler+0x514>
    return;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <HAL_UART_IRQHandler+0x514>
      return;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_UART_IRQHandler+0x514>
      return;
 8004906:	bf00      	nop
  }
}
 8004908:	37e8      	adds	r7, #232	; 0xe8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop

08004910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2222      	movs	r2, #34	; 0x22
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004980:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0220 	orr.w	r2, r2, #32
 80049a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b095      	sub	sp, #84	; 0x54
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d8:	643a      	str	r2, [r7, #64]	; 0x40
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e5      	bne.n	80049b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d119      	bne.n	8004a5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f023 0310 	bic.w	r3, r3, #16
 8004a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a48:	61ba      	str	r2, [r7, #24]
 8004a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6979      	ldr	r1, [r7, #20]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	613b      	str	r3, [r7, #16]
   return(result);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e5      	bne.n	8004a28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a6a:	bf00      	nop
 8004a6c:	3754      	adds	r7, #84	; 0x54
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff ff3d 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b21      	cmp	r3, #33	; 0x21
 8004ab0:	d13e      	bne.n	8004b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aba:	d114      	bne.n	8004ae6 <UART_Transmit_IT+0x48>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d110      	bne.n	8004ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	621a      	str	r2, [r3, #32]
 8004ae4:	e008      	b.n	8004af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6211      	str	r1, [r2, #32]
 8004af0:	781a      	ldrb	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4619      	mov	r1, r3
 8004b06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc fa78 	bl	8001054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b08c      	sub	sp, #48	; 0x30
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b22      	cmp	r3, #34	; 0x22
 8004b80:	f040 80ab 	bne.w	8004cda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	d117      	bne.n	8004bbe <UART_Receive_IT+0x50>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d113      	bne.n	8004bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	1c9a      	adds	r2, r3, #2
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
 8004bbc:	e026      	b.n	8004c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d007      	beq.n	8004be2 <UART_Receive_IT+0x74>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <UART_Receive_IT+0x82>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e008      	b.n	8004c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d15a      	bne.n	8004cd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0220 	bic.w	r2, r2, #32
 8004c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d135      	bne.n	8004ccc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	613b      	str	r3, [r7, #16]
   return(result);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f023 0310 	bic.w	r3, r3, #16
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	623a      	str	r2, [r7, #32]
 8004c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	69f9      	ldr	r1, [r7, #28]
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e5      	bne.n	8004c66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d10a      	bne.n	8004cbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fe2d 	bl	8004924 <HAL_UARTEx_RxEventCallback>
 8004cca:	e002      	b.n	8004cd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fc f9b1 	bl	8001034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e002      	b.n	8004cdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e000      	b.n	8004cdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
  }
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3730      	adds	r7, #48	; 0x30
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	b09f      	sub	sp, #124	; 0x7c
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	68d9      	ldr	r1, [r3, #12]
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	ea40 0301 	orr.w	r3, r0, r1
 8004d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d28:	f021 010c 	bic.w	r1, r1, #12
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d32:	430b      	orrs	r3, r1
 8004d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	6999      	ldr	r1, [r3, #24]
 8004d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	ea40 0301 	orr.w	r3, r0, r1
 8004d4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4bc5      	ldr	r3, [pc, #788]	; (8005068 <UART_SetConfig+0x384>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d004      	beq.n	8004d62 <UART_SetConfig+0x7e>
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4bc3      	ldr	r3, [pc, #780]	; (800506c <UART_SetConfig+0x388>)
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d103      	bne.n	8004d6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d62:	f7fe fbb7 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004d66:	6778      	str	r0, [r7, #116]	; 0x74
 8004d68:	e002      	b.n	8004d70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d6a:	f7fe fb9f 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8004d6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d78:	f040 80b6 	bne.w	8004ee8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d7e:	461c      	mov	r4, r3
 8004d80:	f04f 0500 	mov.w	r5, #0
 8004d84:	4622      	mov	r2, r4
 8004d86:	462b      	mov	r3, r5
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	6439      	str	r1, [r7, #64]	; 0x40
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d94:	1912      	adds	r2, r2, r4
 8004d96:	eb45 0303 	adc.w	r3, r5, r3
 8004d9a:	f04f 0000 	mov.w	r0, #0
 8004d9e:	f04f 0100 	mov.w	r1, #0
 8004da2:	00d9      	lsls	r1, r3, #3
 8004da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004da8:	00d0      	lsls	r0, r2, #3
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	1911      	adds	r1, r2, r4
 8004db0:	6639      	str	r1, [r7, #96]	; 0x60
 8004db2:	416b      	adcs	r3, r5
 8004db4:	667b      	str	r3, [r7, #100]	; 0x64
 8004db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dcc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004dd0:	f7fb fa06 	bl	80001e0 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4ba5      	ldr	r3, [pc, #660]	; (8005070 <UART_SetConfig+0x38c>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	011e      	lsls	r6, r3, #4
 8004de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de4:	461c      	mov	r4, r3
 8004de6:	f04f 0500 	mov.w	r5, #0
 8004dea:	4622      	mov	r2, r4
 8004dec:	462b      	mov	r3, r5
 8004dee:	1891      	adds	r1, r2, r2
 8004df0:	6339      	str	r1, [r7, #48]	; 0x30
 8004df2:	415b      	adcs	r3, r3
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
 8004df6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dfa:	1912      	adds	r2, r2, r4
 8004dfc:	eb45 0303 	adc.w	r3, r5, r3
 8004e00:	f04f 0000 	mov.w	r0, #0
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	00d9      	lsls	r1, r3, #3
 8004e0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e0e:	00d0      	lsls	r0, r2, #3
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	1911      	adds	r1, r2, r4
 8004e16:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e18:	416b      	adcs	r3, r5
 8004e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	1891      	adds	r1, r2, r2
 8004e28:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e2a:	415b      	adcs	r3, r3
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e36:	f7fb f9d3 	bl	80001e0 <__aeabi_uldivmod>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4b8c      	ldr	r3, [pc, #560]	; (8005070 <UART_SetConfig+0x38c>)
 8004e40:	fba3 1302 	umull	r1, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2164      	movs	r1, #100	; 0x64
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a87      	ldr	r2, [pc, #540]	; (8005070 <UART_SetConfig+0x38c>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e60:	441e      	add	r6, r3
 8004e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e64:	4618      	mov	r0, r3
 8004e66:	f04f 0100 	mov.w	r1, #0
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	1894      	adds	r4, r2, r2
 8004e70:	623c      	str	r4, [r7, #32]
 8004e72:	415b      	adcs	r3, r3
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e7a:	1812      	adds	r2, r2, r0
 8004e7c:	eb41 0303 	adc.w	r3, r1, r3
 8004e80:	f04f 0400 	mov.w	r4, #0
 8004e84:	f04f 0500 	mov.w	r5, #0
 8004e88:	00dd      	lsls	r5, r3, #3
 8004e8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e8e:	00d4      	lsls	r4, r2, #3
 8004e90:	4622      	mov	r2, r4
 8004e92:	462b      	mov	r3, r5
 8004e94:	1814      	adds	r4, r2, r0
 8004e96:	653c      	str	r4, [r7, #80]	; 0x50
 8004e98:	414b      	adcs	r3, r1
 8004e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	61b9      	str	r1, [r7, #24]
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004eb6:	f7fb f993 	bl	80001e0 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <UART_SetConfig+0x38c>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a67      	ldr	r2, [pc, #412]	; (8005070 <UART_SetConfig+0x38c>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 0207 	and.w	r2, r3, #7
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4432      	add	r2, r6
 8004ee4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ee6:	e0b9      	b.n	800505c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eea:	461c      	mov	r4, r3
 8004eec:	f04f 0500 	mov.w	r5, #0
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	6139      	str	r1, [r7, #16]
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f00:	1912      	adds	r2, r2, r4
 8004f02:	eb45 0303 	adc.w	r3, r5, r3
 8004f06:	f04f 0000 	mov.w	r0, #0
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	00d9      	lsls	r1, r3, #3
 8004f10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f14:	00d0      	lsls	r0, r2, #3
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	eb12 0804 	adds.w	r8, r2, r4
 8004f1e:	eb43 0905 	adc.w	r9, r3, r5
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	008b      	lsls	r3, r1, #2
 8004f36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f3a:	0082      	lsls	r2, r0, #2
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	4649      	mov	r1, r9
 8004f40:	f7fb f94e 	bl	80001e0 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4b49      	ldr	r3, [pc, #292]	; (8005070 <UART_SetConfig+0x38c>)
 8004f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	011e      	lsls	r6, r3, #4
 8004f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f54:	4618      	mov	r0, r3
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	1894      	adds	r4, r2, r2
 8004f60:	60bc      	str	r4, [r7, #8]
 8004f62:	415b      	adcs	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f6a:	1812      	adds	r2, r2, r0
 8004f6c:	eb41 0303 	adc.w	r3, r1, r3
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	f04f 0500 	mov.w	r5, #0
 8004f78:	00dd      	lsls	r5, r3, #3
 8004f7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f7e:	00d4      	lsls	r4, r2, #3
 8004f80:	4622      	mov	r2, r4
 8004f82:	462b      	mov	r3, r5
 8004f84:	1814      	adds	r4, r2, r0
 8004f86:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f88:	414b      	adcs	r3, r1
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f04f 0100 	mov.w	r1, #0
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	008b      	lsls	r3, r1, #2
 8004fa0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fa4:	0082      	lsls	r2, r0, #2
 8004fa6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004faa:	f7fb f919 	bl	80001e0 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <UART_SetConfig+0x38c>)
 8004fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	2164      	movs	r1, #100	; 0x64
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	3332      	adds	r3, #50	; 0x32
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <UART_SetConfig+0x38c>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd2:	441e      	add	r6, r3
 8004fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	1894      	adds	r4, r2, r2
 8004fe2:	603c      	str	r4, [r7, #0]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fec:	1812      	adds	r2, r2, r0
 8004fee:	eb41 0303 	adc.w	r3, r1, r3
 8004ff2:	f04f 0400 	mov.w	r4, #0
 8004ff6:	f04f 0500 	mov.w	r5, #0
 8004ffa:	00dd      	lsls	r5, r3, #3
 8004ffc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005000:	00d4      	lsls	r4, r2, #3
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	eb12 0a00 	adds.w	sl, r2, r0
 800500a:	eb43 0b01 	adc.w	fp, r3, r1
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	008b      	lsls	r3, r1, #2
 8005022:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005026:	0082      	lsls	r2, r0, #2
 8005028:	4650      	mov	r0, sl
 800502a:	4659      	mov	r1, fp
 800502c:	f7fb f8d8 	bl	80001e0 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <UART_SetConfig+0x38c>)
 8005036:	fba3 1302 	umull	r1, r3, r3, r2
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	2164      	movs	r1, #100	; 0x64
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	3332      	adds	r3, #50	; 0x32
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <UART_SetConfig+0x38c>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4432      	add	r2, r6
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	377c      	adds	r7, #124	; 0x7c
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005066:	bf00      	nop
 8005068:	40011000 	.word	0x40011000
 800506c:	40011400 	.word	0x40011400
 8005070:	51eb851f 	.word	0x51eb851f

08005074 <__NVIC_SetPriority>:
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005084:	2b00      	cmp	r3, #0
 8005086:	db0a      	blt.n	800509e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	490c      	ldr	r1, [pc, #48]	; (80050c0 <__NVIC_SetPriority+0x4c>)
 800508e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005092:	0112      	lsls	r2, r2, #4
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	440b      	add	r3, r1
 8005098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800509c:	e00a      	b.n	80050b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4908      	ldr	r1, [pc, #32]	; (80050c4 <__NVIC_SetPriority+0x50>)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	3b04      	subs	r3, #4
 80050ac:	0112      	lsls	r2, r2, #4
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	440b      	add	r3, r1
 80050b2:	761a      	strb	r2, [r3, #24]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000e100 	.word	0xe000e100
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <SysTick_Handler+0x1c>)
 80050ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050d0:	f002 fc56 	bl	8007980 <xTaskGetSchedulerState>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050da:	f003 fb75 	bl	80087c8 <xPortSysTickHandler>
  }
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	e000e010 	.word	0xe000e010

080050e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050ec:	2100      	movs	r1, #0
 80050ee:	f06f 0004 	mvn.w	r0, #4
 80050f2:	f7ff ffbf 	bl	8005074 <__NVIC_SetPriority>
#endif
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	603b      	str	r3, [r7, #0]
  return(result);
 8005108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800510e:	f06f 0305 	mvn.w	r3, #5
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	e00c      	b.n	8005130 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <osKernelInitialize+0x44>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <osKernelInitialize+0x44>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	e002      	b.n	8005130 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005130:	687b      	ldr	r3, [r7, #4]
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000350 	.word	0x20000350

08005144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800514a:	f3ef 8305 	mrs	r3, IPSR
 800514e:	603b      	str	r3, [r7, #0]
  return(result);
 8005150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005156:	f06f 0305 	mvn.w	r3, #5
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e010      	b.n	8005180 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <osKernelStart+0x48>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d109      	bne.n	800517a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005166:	f7ff ffbf 	bl	80050e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <osKernelStart+0x48>)
 800516c:	2202      	movs	r2, #2
 800516e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005170:	f001 ff10 	bl	8006f94 <vTaskStartScheduler>
      stat = osOK;
 8005174:	2300      	movs	r3, #0
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	e002      	b.n	8005180 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005180:	687b      	ldr	r3, [r7, #4]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000350 	.word	0x20000350

08005190 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b08e      	sub	sp, #56	; 0x38
 8005194:	af04      	add	r7, sp, #16
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a0:	f3ef 8305 	mrs	r3, IPSR
 80051a4:	617b      	str	r3, [r7, #20]
  return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d17f      	bne.n	80052ac <osThreadNew+0x11c>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d07c      	beq.n	80052ac <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80051b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051b6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051b8:	2318      	movs	r3, #24
 80051ba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051c0:	f04f 33ff 	mov.w	r3, #4294967295
 80051c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d045      	beq.n	8005258 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <osThreadNew+0x4a>
        name = attr->name;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <osThreadNew+0x70>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2b38      	cmp	r3, #56	; 0x38
 80051f2:	d805      	bhi.n	8005200 <osThreadNew+0x70>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <osThreadNew+0x74>
        return (NULL);
 8005200:	2300      	movs	r3, #0
 8005202:	e054      	b.n	80052ae <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	089b      	lsrs	r3, r3, #2
 8005212:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00e      	beq.n	800523a <osThreadNew+0xaa>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b5b      	cmp	r3, #91	; 0x5b
 8005222:	d90a      	bls.n	800523a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <osThreadNew+0xaa>
        mem = 1;
 8005234:	2301      	movs	r3, #1
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e010      	b.n	800525c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10c      	bne.n	800525c <osThreadNew+0xcc>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d108      	bne.n	800525c <osThreadNew+0xcc>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <osThreadNew+0xcc>
          mem = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e001      	b.n	800525c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d110      	bne.n	8005284 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800526a:	9202      	str	r2, [sp, #8]
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f001 fcb5 	bl	8006be8 <xTaskCreateStatic>
 800527e:	4603      	mov	r3, r0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e013      	b.n	80052ac <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d110      	bne.n	80052ac <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	b29a      	uxth	r2, r3
 800528e:	f107 0310 	add.w	r3, r7, #16
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f001 fd00 	bl	8006ca2 <xTaskCreate>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d001      	beq.n	80052ac <osThreadNew+0x11c>
            hTask = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052ac:	693b      	ldr	r3, [r7, #16]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052be:	f3ef 8305 	mrs	r3, IPSR
 80052c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80052c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <osDelay+0x1c>
    stat = osErrorISR;
 80052ca:	f06f 0305 	mvn.w	r3, #5
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e007      	b.n	80052e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fe25 	bl	8006f2c <vTaskDelay>
    }
  }

  return (stat);
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f8:	f3ef 8305 	mrs	r3, IPSR
 80052fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80052fe:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8005300:	2b00      	cmp	r3, #0
 8005302:	d12d      	bne.n	8005360 <osEventFlagsNew+0x74>
    mem = -1;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <osEventFlagsNew+0x3a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b1f      	cmp	r3, #31
 800531e:	d902      	bls.n	8005326 <osEventFlagsNew+0x3a>
        mem = 1;
 8005320:	2301      	movs	r3, #1
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	e00c      	b.n	8005340 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d108      	bne.n	8005340 <osEventFlagsNew+0x54>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <osEventFlagsNew+0x54>
          mem = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e001      	b.n	8005340 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d106      	bne.n	8005354 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fa2c 	bl	80057a8 <xEventGroupCreateStatic>
 8005350:	6178      	str	r0, [r7, #20]
 8005352:	e005      	b.n	8005360 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800535a:	f000 fa5c 	bl	8005816 <xEventGroupCreate>
 800535e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005360:	697b      	ldr	r3, [r7, #20]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <osEventFlagsSet+0x1e>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800538a:	f06f 0303 	mvn.w	r3, #3
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e028      	b.n	80053e4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005392:	f3ef 8305 	mrs	r3, IPSR
 8005396:	60fb      	str	r3, [r7, #12]
  return(result);
 8005398:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01d      	beq.n	80053da <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80053a2:	f107 0308 	add.w	r3, r7, #8
 80053a6:	461a      	mov	r2, r3
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	6938      	ldr	r0, [r7, #16]
 80053ac:	f000 fc54 	bl	8005c58 <xEventGroupSetBitsFromISR>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80053b6:	f06f 0302 	mvn.w	r3, #2
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e012      	b.n	80053e4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <osEventFlagsSet+0x78>
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <osEventFlagsSet+0x84>)
 80053ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	e004      	b.n	80053e4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6938      	ldr	r0, [r7, #16]
 80053de:	f000 fb73 	bl	8005ac8 <xEventGroupSetBits>
 80053e2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80053e4:	697b      	ldr	r3, [r7, #20]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <osEventFlagsClear+0x1e>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005412:	f06f 0303 	mvn.w	r3, #3
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e019      	b.n	800544e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541a:	f3ef 8305 	mrs	r3, IPSR
 800541e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005420:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8005426:	6938      	ldr	r0, [r7, #16]
 8005428:	f000 fb2a 	bl	8005a80 <xEventGroupGetBitsFromISR>
 800542c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6938      	ldr	r0, [r7, #16]
 8005432:	f000 fb11 	bl	8005a58 <xEventGroupClearBitsFromISR>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d108      	bne.n	800544e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800543c:	f06f 0302 	mvn.w	r3, #2
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e004      	b.n	800544e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	6938      	ldr	r0, [r7, #16]
 8005448:	f000 face 	bl	80059e8 <xEventGroupClearBits>
 800544c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800544e:	697b      	ldr	r3, [r7, #20]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <osEventFlagsWait+0x22>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800547a:	f06f 0303 	mvn.w	r3, #3
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	e04b      	b.n	800551a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005482:	f3ef 8305 	mrs	r3, IPSR
 8005486:	617b      	str	r3, [r7, #20]
  return(result);
 8005488:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800548e:	f06f 0305 	mvn.w	r3, #5
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	e041      	b.n	800551a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
 80054a4:	e001      	b.n	80054aa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	623b      	str	r3, [r7, #32]
 80054b8:	e001      	b.n	80054be <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	69b8      	ldr	r0, [r7, #24]
 80054ca:	f000 f9bf 	bl	800584c <xEventGroupWaitBits>
 80054ce:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4013      	ands	r3, r2
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d019      	beq.n	800551a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80054ec:	f06f 0301 	mvn.w	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e012      	b.n	800551a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80054f4:	f06f 0302 	mvn.w	r3, #2
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e00e      	b.n	800551a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800550c:	f06f 0301 	mvn.w	r3, #1
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e002      	b.n	800551a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005514:	f06f 0302 	mvn.w	r3, #2
 8005518:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800551a:	69fb      	ldr	r3, [r7, #28]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3728      	adds	r7, #40	; 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005530:	f3ef 8305 	mrs	r3, IPSR
 8005534:	60bb      	str	r3, [r7, #8]
  return(result);
 8005536:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005538:	2b00      	cmp	r3, #0
 800553a:	d174      	bne.n	8005626 <osMutexNew+0x102>
    if (attr != NULL) {
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <osMutexNew+0x26>
      type = attr->attr_bits;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e001      	b.n	800554e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <osMutexNew+0x3a>
      rmtx = 1U;
 8005558:	2301      	movs	r3, #1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e001      	b.n	8005562 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d15c      	bne.n	8005626 <osMutexNew+0x102>
      mem = -1;
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d015      	beq.n	80055a4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <osMutexNew+0x6a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b4f      	cmp	r3, #79	; 0x4f
 8005586:	d902      	bls.n	800558e <osMutexNew+0x6a>
          mem = 1;
 8005588:	2301      	movs	r3, #1
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e00c      	b.n	80055a8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <osMutexNew+0x84>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <osMutexNew+0x84>
            mem = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e001      	b.n	80055a8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d112      	bne.n	80055d4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4619      	mov	r1, r3
 80055ba:	2004      	movs	r0, #4
 80055bc:	f000 fd83 	bl	80060c6 <xQueueCreateMutexStatic>
 80055c0:	61f8      	str	r0, [r7, #28]
 80055c2:	e016      	b.n	80055f2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4619      	mov	r1, r3
 80055ca:	2001      	movs	r0, #1
 80055cc:	f000 fd7b 	bl	80060c6 <xQueueCreateMutexStatic>
 80055d0:	61f8      	str	r0, [r7, #28]
 80055d2:	e00e      	b.n	80055f2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80055e0:	2004      	movs	r0, #4
 80055e2:	f000 fd58 	bl	8006096 <xQueueCreateMutex>
 80055e6:	61f8      	str	r0, [r7, #28]
 80055e8:	e003      	b.n	80055f2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80055ea:	2001      	movs	r0, #1
 80055ec:	f000 fd53 	bl	8006096 <xQueueCreateMutex>
 80055f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00c      	beq.n	8005612 <osMutexNew+0xee>
        if (attr != NULL) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <osMutexNew+0xe2>
          name = attr->name;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e001      	b.n	800560a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	69f8      	ldr	r0, [r7, #28]
 800560e:	f001 fa8d 	bl	8006b2c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d006      	beq.n	8005626 <osMutexNew+0x102>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005626:	69fb      	ldr	r3, [r7, #28]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564e:	f3ef 8305 	mrs	r3, IPSR
 8005652:	60bb      	str	r3, [r7, #8]
  return(result);
 8005654:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800565a:	f06f 0305 	mvn.w	r3, #5
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e02c      	b.n	80056bc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005668:	f06f 0303 	mvn.w	r3, #3
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e025      	b.n	80056bc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d011      	beq.n	800569a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6938      	ldr	r0, [r7, #16]
 800567a:	f000 fd73 	bl	8006164 <xQueueTakeMutexRecursive>
 800567e:	4603      	mov	r3, r0
 8005680:	2b01      	cmp	r3, #1
 8005682:	d01b      	beq.n	80056bc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800568a:	f06f 0301 	mvn.w	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e014      	b.n	80056bc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005692:	f06f 0302 	mvn.w	r3, #2
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e010      	b.n	80056bc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6938      	ldr	r0, [r7, #16]
 800569e:	f001 f811 	bl	80066c4 <xQueueSemaphoreTake>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d009      	beq.n	80056bc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80056ae:	f06f 0301 	mvn.w	r3, #1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e002      	b.n	80056bc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80056b6:	f06f 0302 	mvn.w	r3, #2
 80056ba:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80056bc:	697b      	ldr	r3, [r7, #20]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e2:	f3ef 8305 	mrs	r3, IPSR
 80056e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056e8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80056ee:	f06f 0305 	mvn.w	r3, #5
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e01f      	b.n	8005736 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80056fc:	f06f 0303 	mvn.w	r3, #3
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e018      	b.n	8005736 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f000 fcf6 	bl	80060fc <xQueueGiveMutexRecursive>
 8005710:	4603      	mov	r3, r0
 8005712:	2b01      	cmp	r3, #1
 8005714:	d00f      	beq.n	8005736 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005716:	f06f 0302 	mvn.w	r3, #2
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e00b      	b.n	8005736 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800571e:	2300      	movs	r3, #0
 8005720:	2200      	movs	r2, #0
 8005722:	2100      	movs	r1, #0
 8005724:	6938      	ldr	r0, [r7, #16]
 8005726:	f000 fd53 	bl	80061d0 <xQueueGenericSend>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d002      	beq.n	8005736 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005730:	f06f 0302 	mvn.w	r3, #2
 8005734:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005736:	697b      	ldr	r3, [r7, #20]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4a07      	ldr	r2, [pc, #28]	; (800576c <vApplicationGetIdleTaskMemory+0x2c>)
 8005750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a06      	ldr	r2, [pc, #24]	; (8005770 <vApplicationGetIdleTaskMemory+0x30>)
 8005756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800575e:	601a      	str	r2, [r3, #0]
}
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	20000354 	.word	0x20000354
 8005770:	200003b0 	.word	0x200003b0

08005774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a07      	ldr	r2, [pc, #28]	; (80057a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4a06      	ldr	r2, [pc, #24]	; (80057a4 <vApplicationGetTimerTaskMemory+0x30>)
 800578a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	200007b0 	.word	0x200007b0
 80057a4:	2000080c 	.word	0x2000080c

080057a8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80057cc:	2320      	movs	r3, #32
 80057ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d00a      	beq.n	80057ec <xEventGroupCreateStatic+0x44>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60fb      	str	r3, [r7, #12]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3304      	adds	r3, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fa3d 	bl	8005c80 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2201      	movs	r2, #1
 800580a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800580c:	697b      	ldr	r3, [r7, #20]
	}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800581c:	2020      	movs	r0, #32
 800581e:	f003 f863 	bl	80088e8 <pvPortMalloc>
 8005822:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fa23 	bl	8005c80 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005840:	687b      	ldr	r3, [r7, #4]
	}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b090      	sub	sp, #64	; 0x40
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xEventGroupWaitBits+0x36>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	623b      	str	r3, [r7, #32]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	61fb      	str	r3, [r7, #28]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xEventGroupWaitBits+0x72>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	61bb      	str	r3, [r7, #24]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058be:	f002 f85f 	bl	8007980 <xTaskGetSchedulerState>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <xEventGroupWaitBits+0x82>
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <xEventGroupWaitBits+0x86>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <xEventGroupWaitBits+0x88>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xEventGroupWaitBits+0xa2>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	617b      	str	r3, [r7, #20]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80058ee:	f001 fbb7 	bl	8007060 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80058f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058fe:	f000 f988 	bl	8005c12 <prvTestWaitCondition>
 8005902:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800590e:	2300      	movs	r3, #0
 8005910:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d028      	beq.n	800596a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	43db      	mvns	r3, r3
 8005920:	401a      	ands	r2, r3
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e020      	b.n	800596a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005932:	2301      	movs	r3, #1
 8005934:	633b      	str	r3, [r7, #48]	; 0x30
 8005936:	e018      	b.n	800596a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005944:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	1d18      	adds	r0, r3, #4
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	4313      	orrs	r3, r2
 800595e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005960:	4619      	mov	r1, r3
 8005962:	f001 fd75 	bl	8007450 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800596a:	f001 fb87 	bl	800707c <xTaskResumeAll>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	2b00      	cmp	r3, #0
 8005974:	d031      	beq.n	80059da <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <xEventGroupWaitBits+0x198>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800598c:	f002 f96e 	bl	8007c6c <uxTaskResetEventItemValue>
 8005990:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11a      	bne.n	80059d2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800599c:	f002 fe82 	bl	80086a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80059ac:	f000 f931 	bl	8005c12 <prvTestWaitCondition>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	43db      	mvns	r3, r3
 80059c4:	401a      	ands	r2, r3
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80059ce:	f002 fe99 	bl	8008704 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80059da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3740      	adds	r7, #64	; 0x40
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xEventGroupClearBits+0x2a>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	60fb      	str	r3, [r7, #12]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <xEventGroupClearBits+0x4a>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60bb      	str	r3, [r7, #8]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005a32:	f002 fe37 	bl	80086a4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	401a      	ands	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005a4a:	f002 fe5b 	bl	8008704 <vPortExitCritical>

	return uxReturn;
 8005a4e:	693b      	ldr	r3, [r7, #16]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005a62:	2300      	movs	r3, #0
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4804      	ldr	r0, [pc, #16]	; (8005a7c <xEventGroupClearBitsFromISR+0x24>)
 8005a6a:	f002 fccd 	bl	8008408 <xTimerPendFunctionCallFromISR>
 8005a6e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005a70:	68fb      	ldr	r3, [r7, #12]
	}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	08005bf9 	.word	0x08005bf9

08005a80 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a8c:	f3ef 8211 	mrs	r2, BASEPRI
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fa      	str	r2, [r7, #12]
 8005aa2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aa6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ab8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005aba:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005abc:	4618      	mov	r0, r3
 8005abe:	3724      	adds	r7, #36	; 0x24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08e      	sub	sp, #56	; 0x38
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xEventGroupSetBits+0x32>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	613b      	str	r3, [r7, #16]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <xEventGroupSetBits+0x52>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	3308      	adds	r3, #8
 8005b24:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005b26:	f001 fa9b 	bl	8007060 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005b3c:	e03c      	b.n	8005bb8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b54:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d108      	bne.n	8005b7a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005b74:	2301      	movs	r3, #1
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b78:	e008      	b.n	8005b8c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	4013      	ands	r3, r2
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d101      	bne.n	8005b8c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bac:	4619      	mov	r1, r3
 8005bae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bb0:	f001 fd1a 	bl	80075e8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d1be      	bne.n	8005b3e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	401a      	ands	r2, r3
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005bce:	f001 fa55 	bl	800707c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	681b      	ldr	r3, [r3, #0]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3738      	adds	r7, #56	; 0x38
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ff6c 	bl	8005ac8 <xEventGroupSetBits>
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff feef 	bl	80059e8 <xEventGroupClearBits>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005c12:	b480      	push	{r7}
 8005c14:	b087      	sub	sp, #28
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e007      	b.n	8005c48 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d101      	bne.n	8005c48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005c44:	2301      	movs	r3, #1
 8005c46:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005c48:	697b      	ldr	r3, [r7, #20]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	68f9      	ldr	r1, [r7, #12]
 8005c6a:	4804      	ldr	r0, [pc, #16]	; (8005c7c <xEventGroupSetBitsFromISR+0x24>)
 8005c6c:	f002 fbcc 	bl	8008408 <xTimerPendFunctionCallFromISR>
 8005c70:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005c72:	697b      	ldr	r3, [r7, #20]
	}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08005bdf 	.word	0x08005bdf

08005c80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f103 0208 	add.w	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f103 0208 	add.w	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f103 0208 	add.w	r2, r3, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d103      	bne.n	8005d42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e00c      	b.n	8005d5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3308      	adds	r3, #8
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e002      	b.n	8005d50 <vListInsert+0x2e>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d2f6      	bcs.n	8005d4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	601a      	str	r2, [r3, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6892      	ldr	r2, [r2, #8]
 8005daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6852      	ldr	r2, [r2, #4]
 8005db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d103      	bne.n	8005dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	1e5a      	subs	r2, r3, #1
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <xQueueGenericReset+0x2a>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	60bb      	str	r3, [r7, #8]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e12:	f002 fc47 	bl	80086a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	441a      	add	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	3b01      	subs	r3, #1
 8005e44:	68f9      	ldr	r1, [r7, #12]
 8005e46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22ff      	movs	r2, #255	; 0xff
 8005e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d114      	bne.n	8005e92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01a      	beq.n	8005ea6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3310      	adds	r3, #16
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 fb53 	bl	8007520 <xTaskRemoveFromEventList>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d012      	beq.n	8005ea6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e80:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <xQueueGenericReset+0xcc>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	e009      	b.n	8005ea6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3310      	adds	r3, #16
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fef2 	bl	8005c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff feed 	bl	8005c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ea6:	f002 fc2d 	bl	8008704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005eaa:	2301      	movs	r3, #1
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	; 0x38
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <xQueueGenericCreateStatic+0x52>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <xQueueGenericCreateStatic+0x56>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericCreateStatic+0x58>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <xQueueGenericCreateStatic+0x7e>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <xQueueGenericCreateStatic+0x82>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueGenericCreateStatic+0x84>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61fb      	str	r3, [r7, #28]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f56:	2350      	movs	r3, #80	; 0x50
 8005f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b50      	cmp	r3, #80	; 0x50
 8005f5e:	d00a      	beq.n	8005f76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	61bb      	str	r3, [r7, #24]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f83f 	bl	800601c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3730      	adds	r7, #48	; 0x30
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	613b      	str	r3, [r7, #16]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3350      	adds	r3, #80	; 0x50
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 fc81 	bl	80088e8 <pvPortMalloc>
 8005fe6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3350      	adds	r3, #80	; 0x50
 8005ff6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006000:	79fa      	ldrb	r2, [r7, #7]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f805 	bl	800601c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006012:	69bb      	ldr	r3, [r7, #24]
	}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d103      	bne.n	8006038 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e002      	b.n	800603e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800604a:	2101      	movs	r1, #1
 800604c:	69b8      	ldr	r0, [r7, #24]
 800604e:	f7ff fecb 	bl	8005de8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	78fa      	ldrb	r2, [r7, #3]
 8006056:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006082:	2300      	movs	r3, #0
 8006084:	2200      	movs	r2, #0
 8006086:	2100      	movs	r1, #0
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f8a1 	bl	80061d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	4603      	mov	r3, r0
 800609e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	461a      	mov	r2, r3
 80060ac:	6939      	ldr	r1, [r7, #16]
 80060ae:	6978      	ldr	r0, [r7, #20]
 80060b0:	f7ff ff7a 	bl	8005fa8 <xQueueGenericCreate>
 80060b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ffd3 	bl	8006062 <prvInitialiseMutex>

		return xNewQueue;
 80060bc:	68fb      	ldr	r3, [r7, #12]
	}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b088      	sub	sp, #32
 80060ca:	af02      	add	r7, sp, #8
 80060cc:	4603      	mov	r3, r0
 80060ce:	6039      	str	r1, [r7, #0]
 80060d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060d2:	2301      	movs	r3, #1
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	6939      	ldr	r1, [r7, #16]
 80060e4:	6978      	ldr	r0, [r7, #20]
 80060e6:	f7ff fee7 	bl	8005eb8 <xQueueGenericCreateStatic>
 80060ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff ffb8 	bl	8006062 <prvInitialiseMutex>

		return xNewQueue;
 80060f2:	68fb      	ldr	r3, [r7, #12]
	}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60fb      	str	r3, [r7, #12]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	689c      	ldr	r4, [r3, #8]
 8006128:	f001 fc1a 	bl	8007960 <xTaskGetCurrentTaskHandle>
 800612c:	4603      	mov	r3, r0
 800612e:	429c      	cmp	r4, r3
 8006130:	d111      	bne.n	8006156 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	6938      	ldr	r0, [r7, #16]
 800614c:	f000 f840 	bl	80061d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e001      	b.n	800615a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800615a:	697b      	ldr	r3, [r7, #20]
	}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	60fb      	str	r3, [r7, #12]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	689c      	ldr	r4, [r3, #8]
 8006192:	f001 fbe5 	bl	8007960 <xTaskGetCurrentTaskHandle>
 8006196:	4603      	mov	r3, r0
 8006198:	429c      	cmp	r4, r3
 800619a:	d107      	bne.n	80061ac <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80061a6:	2301      	movs	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e00c      	b.n	80061c6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6938      	ldr	r0, [r7, #16]
 80061b0:	f000 fa88 	bl	80066c4 <xQueueSemaphoreTake>
 80061b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80061c6:	697b      	ldr	r3, [r7, #20]
	}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd90      	pop	{r4, r7, pc}

080061d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08e      	sub	sp, #56	; 0x38
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061de:	2300      	movs	r3, #0
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xQueueGenericSend+0x32>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <xQueueGenericSend+0x40>
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <xQueueGenericSend+0x44>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <xQueueGenericSend+0x46>
 8006214:	2300      	movs	r3, #0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <xQueueGenericSend+0x60>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d103      	bne.n	800623e <xQueueGenericSend+0x6e>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <xQueueGenericSend+0x72>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueGenericSend+0x74>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xQueueGenericSend+0x8e>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	623b      	str	r3, [r7, #32]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625e:	f001 fb8f 	bl	8007980 <xTaskGetSchedulerState>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xQueueGenericSend+0x9e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueGenericSend+0xa2>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueGenericSend+0xa4>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueGenericSend+0xbe>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800628e:	f002 fa09 	bl	80086a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <xQueueGenericSend+0xd4>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d129      	bne.n	80062f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062aa:	f000 fb2f 	bl	800690c <prvCopyDataToQueue>
 80062ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d010      	beq.n	80062da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	3324      	adds	r3, #36	; 0x24
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 f92f 	bl	8007520 <xTaskRemoveFromEventList>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d013      	beq.n	80062f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062c8:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <xQueueGenericSend+0x1f8>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	e00a      	b.n	80062f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062e0:	4b39      	ldr	r3, [pc, #228]	; (80063c8 <xQueueGenericSend+0x1f8>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062f0:	f002 fa08 	bl	8008704 <vPortExitCritical>
				return pdPASS;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e063      	b.n	80063c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062fe:	f002 fa01 	bl	8008704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006302:	2300      	movs	r3, #0
 8006304:	e05c      	b.n	80063c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f9cb 	bl	80076ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800631a:	f002 f9f3 	bl	8008704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800631e:	f000 fe9f 	bl	8007060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006322:	f002 f9bf 	bl	80086a4 <vPortEnterCritical>
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800632c:	b25b      	sxtb	r3, r3
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d103      	bne.n	800633c <xQueueGenericSend+0x16c>
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006342:	b25b      	sxtb	r3, r3
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d103      	bne.n	8006352 <xQueueGenericSend+0x182>
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006352:	f002 f9d7 	bl	8008704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006356:	1d3a      	adds	r2, r7, #4
 8006358:	f107 0314 	add.w	r3, r7, #20
 800635c:	4611      	mov	r1, r2
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f9ba 	bl	80076d8 <xTaskCheckForTimeOut>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d124      	bne.n	80063b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800636a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800636c:	f000 fbc6 	bl	8006afc <prvIsQueueFull>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d018      	beq.n	80063a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	3310      	adds	r3, #16
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f001 f842 	bl	8007408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006386:	f000 fb51 	bl	8006a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800638a:	f000 fe77 	bl	800707c <xTaskResumeAll>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f af7c 	bne.w	800628e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <xQueueGenericSend+0x1f8>)
 8006398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	e772      	b.n	800628e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063aa:	f000 fb3f 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ae:	f000 fe65 	bl	800707c <xTaskResumeAll>
 80063b2:	e76c      	b.n	800628e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b6:	f000 fb39 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ba:	f000 fe5f 	bl	800707c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3738      	adds	r7, #56	; 0x38
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b090      	sub	sp, #64	; 0x40
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <xQueueGenericSendFromISR+0x3c>
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <xQueueGenericSendFromISR+0x40>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <xQueueGenericSendFromISR+0x42>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d103      	bne.n	8006436 <xQueueGenericSendFromISR+0x6a>
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <xQueueGenericSendFromISR+0x6e>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <xQueueGenericSendFromISR+0x70>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	623b      	str	r3, [r7, #32]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006456:	f002 fa07 	bl	8008868 <vPortValidateInterruptPriority>
	__asm volatile
 800645a:	f3ef 8211 	mrs	r2, BASEPRI
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	61fa      	str	r2, [r7, #28]
 8006470:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006472:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <xQueueGenericSendFromISR+0xbc>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d12f      	bne.n	80064e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800649e:	f000 fa35 	bl	800690c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064aa:	d112      	bne.n	80064d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d016      	beq.n	80064e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	3324      	adds	r3, #36	; 0x24
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 f831 	bl	8007520 <xTaskRemoveFromEventList>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e007      	b.n	80064e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064d6:	3301      	adds	r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	b25a      	sxtb	r2, r3
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064e2:	2301      	movs	r3, #1
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064e6:	e001      	b.n	80064ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ee:	617b      	str	r3, [r7, #20]
	__asm volatile
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f383 8811 	msr	BASEPRI, r3
}
 80064f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3740      	adds	r7, #64	; 0x40
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08c      	sub	sp, #48	; 0x30
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006510:	2300      	movs	r3, #0
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <xQueueReceive+0x30>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	623b      	str	r3, [r7, #32]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <xQueueReceive+0x3e>
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <xQueueReceive+0x42>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <xQueueReceive+0x44>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueReceive+0x5e>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	61fb      	str	r3, [r7, #28]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006562:	f001 fa0d 	bl	8007980 <xTaskGetSchedulerState>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <xQueueReceive+0x6e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <xQueueReceive+0x72>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <xQueueReceive+0x74>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <xQueueReceive+0x8e>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	61bb      	str	r3, [r7, #24]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006592:	f002 f887 	bl	80086a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01f      	beq.n	80065e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a6:	f000 fa1b 	bl	80069e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1e5a      	subs	r2, r3, #1
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00f      	beq.n	80065da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	3310      	adds	r3, #16
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 ffae 	bl	8007520 <xTaskRemoveFromEventList>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065ca:	4b3d      	ldr	r3, [pc, #244]	; (80066c0 <xQueueReceive+0x1bc>)
 80065cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065da:	f002 f893 	bl	8008704 <vPortExitCritical>
				return pdPASS;
 80065de:	2301      	movs	r3, #1
 80065e0:	e069      	b.n	80066b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065e8:	f002 f88c 	bl	8008704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e062      	b.n	80066b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065f6:	f107 0310 	add.w	r3, r7, #16
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f856 	bl	80076ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006604:	f002 f87e 	bl	8008704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006608:	f000 fd2a 	bl	8007060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800660c:	f002 f84a 	bl	80086a4 <vPortEnterCritical>
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006616:	b25b      	sxtb	r3, r3
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d103      	bne.n	8006626 <xQueueReceive+0x122>
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800662c:	b25b      	sxtb	r3, r3
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d103      	bne.n	800663c <xQueueReceive+0x138>
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800663c:	f002 f862 	bl	8008704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006640:	1d3a      	adds	r2, r7, #4
 8006642:	f107 0310 	add.w	r3, r7, #16
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f001 f845 	bl	80076d8 <xTaskCheckForTimeOut>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d123      	bne.n	800669c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	f000 fa3b 	bl	8006ad0 <prvIsQueueEmpty>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	3324      	adds	r3, #36	; 0x24
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fecd 	bl	8007408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800666e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006670:	f000 f9dc 	bl	8006a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006674:	f000 fd02 	bl	800707c <xTaskResumeAll>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d189      	bne.n	8006592 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800667e:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <xQueueReceive+0x1bc>)
 8006680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	e780      	b.n	8006592 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006692:	f000 f9cb 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006696:	f000 fcf1 	bl	800707c <xTaskResumeAll>
 800669a:	e77a      	b.n	8006592 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800669c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800669e:	f000 f9c5 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066a2:	f000 fceb 	bl	800707c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a8:	f000 fa12 	bl	8006ad0 <prvIsQueueEmpty>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f43f af6f 	beq.w	8006592 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3730      	adds	r7, #48	; 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	; 0x38
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61fb      	str	r3, [r7, #28]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006714:	f001 f934 	bl	8007980 <xTaskGetSchedulerState>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <xQueueSemaphoreTake+0x60>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <xQueueSemaphoreTake+0x64>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <xQueueSemaphoreTake+0x66>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	61bb      	str	r3, [r7, #24]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006744:	f001 ffae 	bl	80086a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	d024      	beq.n	800679e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	1e5a      	subs	r2, r3, #1
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006764:	f001 fa9a 	bl	8007c9c <pvTaskIncrementMutexHeldCount>
 8006768:	4602      	mov	r2, r0
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00f      	beq.n	8006796 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	3310      	adds	r3, #16
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fed0 	bl	8007520 <xTaskRemoveFromEventList>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006786:	4b54      	ldr	r3, [pc, #336]	; (80068d8 <xQueueSemaphoreTake+0x214>)
 8006788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006796:	f001 ffb5 	bl	8008704 <vPortExitCritical>
				return pdPASS;
 800679a:	2301      	movs	r3, #1
 800679c:	e097      	b.n	80068ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d111      	bne.n	80067c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	617b      	str	r3, [r7, #20]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80067c0:	f001 ffa0 	bl	8008704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e082      	b.n	80068ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067ce:	f107 030c 	add.w	r3, r7, #12
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ff6a 	bl	80076ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067dc:	f001 ff92 	bl	8008704 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067e0:	f000 fc3e 	bl	8007060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067e4:	f001 ff5e 	bl	80086a4 <vPortEnterCritical>
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d103      	bne.n	80067fe <xQueueSemaphoreTake+0x13a>
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006804:	b25b      	sxtb	r3, r3
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d103      	bne.n	8006814 <xQueueSemaphoreTake+0x150>
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006814:	f001 ff76 	bl	8008704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006818:	463a      	mov	r2, r7
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f000 ff59 	bl	80076d8 <xTaskCheckForTimeOut>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d132      	bne.n	8006892 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800682c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800682e:	f000 f94f 	bl	8006ad0 <prvIsQueueEmpty>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d026      	beq.n	8006886 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006840:	f001 ff30 	bl	80086a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4618      	mov	r0, r3
 800684a:	f001 f8b7 	bl	80079bc <xTaskPriorityInherit>
 800684e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006850:	f001 ff58 	bl	8008704 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	3324      	adds	r3, #36	; 0x24
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fdd3 	bl	8007408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006864:	f000 f8e2 	bl	8006a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006868:	f000 fc08 	bl	800707c <xTaskResumeAll>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	f47f af68 	bne.w	8006744 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006874:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <xQueueSemaphoreTake+0x214>)
 8006876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	e75e      	b.n	8006744 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006888:	f000 f8d0 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800688c:	f000 fbf6 	bl	800707c <xTaskResumeAll>
 8006890:	e758      	b.n	8006744 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006894:	f000 f8ca 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006898:	f000 fbf0 	bl	800707c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800689c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800689e:	f000 f917 	bl	8006ad0 <prvIsQueueEmpty>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f43f af4d 	beq.w	8006744 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00d      	beq.n	80068cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80068b0:	f001 fef8 	bl	80086a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80068b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068b6:	f000 f811 	bl	80068dc <prvGetDisinheritPriorityAfterTimeout>
 80068ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 f950 	bl	8007b68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80068c8:	f001 ff1c 	bl	8008704 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3738      	adds	r7, #56	; 0x38
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e001      	b.n	80068fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10d      	bne.n	8006946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d14d      	bne.n	80069ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f001 f8a8 	bl	8007a8c <xTaskPriorityDisinherit>
 800693c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e043      	b.n	80069ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d119      	bne.n	8006980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6858      	ldr	r0, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	461a      	mov	r2, r3
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	f002 f9d4 	bl	8008d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	441a      	add	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d32b      	bcc.n	80069ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	e026      	b.n	80069ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68d8      	ldr	r0, [r3, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	461a      	mov	r2, r3
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	f002 f9ba 	bl	8008d04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	425b      	negs	r3, r3
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d207      	bcs.n	80069bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	425b      	negs	r3, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d105      	bne.n	80069ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d018      	beq.n	8006a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	441a      	add	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d303      	bcc.n	8006a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68d9      	ldr	r1, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6838      	ldr	r0, [r7, #0]
 8006a20:	f002 f970 	bl	8008d04 <memcpy>
	}
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a34:	f001 fe36 	bl	80086a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a40:	e011      	b.n	8006a66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d012      	beq.n	8006a70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3324      	adds	r3, #36	; 0x24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fd66 	bl	8007520 <xTaskRemoveFromEventList>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a5a:	f000 fe9f 	bl	800779c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dce9      	bgt.n	8006a42 <prvUnlockQueue+0x16>
 8006a6e:	e000      	b.n	8006a72 <prvUnlockQueue+0x46>
					break;
 8006a70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a7a:	f001 fe43 	bl	8008704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a7e:	f001 fe11 	bl	80086a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a8a:	e011      	b.n	8006ab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3310      	adds	r3, #16
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fd41 	bl	8007520 <xTaskRemoveFromEventList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006aa4:	f000 fe7a 	bl	800779c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dce9      	bgt.n	8006a8c <prvUnlockQueue+0x60>
 8006ab8:	e000      	b.n	8006abc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006aba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	22ff      	movs	r2, #255	; 0xff
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ac4:	f001 fe1e 	bl	8008704 <vPortExitCritical>
}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad8:	f001 fde4 	bl	80086a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e001      	b.n	8006aee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f001 fe09 	bl	8008704 <vPortExitCritical>

	return xReturn;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b04:	f001 fdce 	bl	80086a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d102      	bne.n	8006b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e001      	b.n	8006b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b1e:	f001 fdf1 	bl	8008704 <vPortExitCritical>

	return xReturn;
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	e014      	b.n	8006b66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b3c:	4a0f      	ldr	r2, [pc, #60]	; (8006b7c <vQueueAddToRegistry+0x50>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b48:	490c      	ldr	r1, [pc, #48]	; (8006b7c <vQueueAddToRegistry+0x50>)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b52:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <vQueueAddToRegistry+0x50>)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4413      	add	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b5e:	e006      	b.n	8006b6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b07      	cmp	r3, #7
 8006b6a:	d9e7      	bls.n	8006b3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	200054b0 	.word	0x200054b0

08006b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b90:	f001 fd88 	bl	80086a4 <vPortEnterCritical>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d103      	bne.n	8006baa <vQueueWaitForMessageRestricted+0x2a>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb0:	b25b      	sxtb	r3, r3
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d103      	bne.n	8006bc0 <vQueueWaitForMessageRestricted+0x40>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc0:	f001 fda0 	bl	8008704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fc77 	bl	80074c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f7ff ff26 	bl	8006a2c <prvUnlockQueue>
	}
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	623b      	str	r3, [r7, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xTaskCreateStatic+0x46>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	61fb      	str	r3, [r7, #28]
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c2e:	235c      	movs	r3, #92	; 0x5c
 8006c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b5c      	cmp	r3, #92	; 0x5c
 8006c36:	d00a      	beq.n	8006c4e <xTaskCreateStatic+0x66>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61bb      	str	r3, [r7, #24]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01e      	beq.n	8006c94 <xTaskCreateStatic+0xac>
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01b      	beq.n	8006c94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	9302      	str	r3, [sp, #8]
 8006c76:	f107 0314 	add.w	r3, r7, #20
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f850 	bl	8006d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c8e:	f000 f8dd 	bl	8006e4c <prvAddNewTaskToReadyList>
 8006c92:	e001      	b.n	8006c98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c98:	697b      	ldr	r3, [r7, #20]
	}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3728      	adds	r7, #40	; 0x28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b08c      	sub	sp, #48	; 0x30
 8006ca6:	af04      	add	r7, sp, #16
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fe16 	bl	80088e8 <pvPortMalloc>
 8006cbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00e      	beq.n	8006ce2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cc4:	205c      	movs	r0, #92	; 0x5c
 8006cc6:	f001 fe0f 	bl	80088e8 <pvPortMalloc>
 8006cca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd8:	e005      	b.n	8006ce6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	f001 fed0 	bl	8008a80 <vPortFree>
 8006ce0:	e001      	b.n	8006ce6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d017      	beq.n	8006d1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9303      	str	r3, [sp, #12]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	9302      	str	r3, [sp, #8]
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f80e 	bl	8006d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d10:	69f8      	ldr	r0, [r7, #28]
 8006d12:	f000 f89b 	bl	8006e4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d16:	2301      	movs	r3, #1
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	e002      	b.n	8006d22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d22:	69bb      	ldr	r3, [r7, #24]
	}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	461a      	mov	r2, r3
 8006d44:	21a5      	movs	r1, #165	; 0xa5
 8006d46:	f001 ffeb 	bl	8008d20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d54:	3b01      	subs	r3, #1
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f023 0307 	bic.w	r3, r3, #7
 8006d62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	617b      	str	r3, [r7, #20]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01f      	beq.n	8006dca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e012      	b.n	8006db6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	7819      	ldrb	r1, [r3, #0]
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3334      	adds	r3, #52	; 0x34
 8006da0:	460a      	mov	r2, r1
 8006da2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	2b0f      	cmp	r3, #15
 8006dba:	d9e9      	bls.n	8006d90 <prvInitialiseNewTask+0x64>
 8006dbc:	e000      	b.n	8006dc0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006dbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dc8:	e003      	b.n	8006dd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	2b37      	cmp	r3, #55	; 0x37
 8006dd6:	d901      	bls.n	8006ddc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dd8:	2337      	movs	r3, #55	; 0x37
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	2200      	movs	r2, #0
 8006dec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe ff64 	bl	8005cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	3318      	adds	r3, #24
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe ff5f 	bl	8005cc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	69b8      	ldr	r0, [r7, #24]
 8006e2c:	f001 fb0c 	bl	8008448 <pxPortInitialiseStack>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e42:	bf00      	nop
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e54:	f001 fc26 	bl	80086a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <prvAddNewTaskToReadyList+0xc4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	; (8006f10 <prvAddNewTaskToReadyList+0xc4>)
 8006e60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e62:	4b2c      	ldr	r3, [pc, #176]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e70:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <prvAddNewTaskToReadyList+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d110      	bne.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e78:	f000 fcb4 	bl	80077e4 <prvInitialiseTaskLists>
 8006e7c:	e00d      	b.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <prvAddNewTaskToReadyList+0xcc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e86:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d802      	bhi.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e94:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e9a:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <prvAddNewTaskToReadyList+0xd0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <prvAddNewTaskToReadyList+0xd0>)
 8006ea2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <prvAddNewTaskToReadyList+0xd0>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <prvAddNewTaskToReadyList+0xd4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d903      	bls.n	8006ec0 <prvAddNewTaskToReadyList+0x74>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4a18      	ldr	r2, [pc, #96]	; (8006f20 <prvAddNewTaskToReadyList+0xd4>)
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <prvAddNewTaskToReadyList+0xd8>)
 8006ece:	441a      	add	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f7fe feff 	bl	8005cda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006edc:	f001 fc12 	bl	8008704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ee0:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <prvAddNewTaskToReadyList+0xcc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00e      	beq.n	8006f06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d207      	bcs.n	8006f06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvAddNewTaskToReadyList+0xdc>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200014e0 	.word	0x200014e0
 8006f14:	2000100c 	.word	0x2000100c
 8006f18:	200014ec 	.word	0x200014ec
 8006f1c:	200014fc 	.word	0x200014fc
 8006f20:	200014e8 	.word	0x200014e8
 8006f24:	20001010 	.word	0x20001010
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d017      	beq.n	8006f6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <vTaskDelay+0x60>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <vTaskDelay+0x30>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60bb      	str	r3, [r7, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f5c:	f000 f880 	bl	8007060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f60:	2100      	movs	r1, #0
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 feae 	bl	8007cc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f68:	f000 f888 	bl	800707c <xTaskResumeAll>
 8006f6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d107      	bne.n	8006f84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <vTaskDelay+0x64>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20001508 	.word	0x20001508
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fa2:	463a      	mov	r2, r7
 8006fa4:	1d39      	adds	r1, r7, #4
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fbc8 	bl	8005740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	9202      	str	r2, [sp, #8]
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	4921      	ldr	r1, [pc, #132]	; (8007048 <vTaskStartScheduler+0xb4>)
 8006fc4:	4821      	ldr	r0, [pc, #132]	; (800704c <vTaskStartScheduler+0xb8>)
 8006fc6:	f7ff fe0f 	bl	8006be8 <xTaskCreateStatic>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4a20      	ldr	r2, [pc, #128]	; (8007050 <vTaskStartScheduler+0xbc>)
 8006fce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fd0:	4b1f      	ldr	r3, [pc, #124]	; (8007050 <vTaskStartScheduler+0xbc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e001      	b.n	8006fe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d102      	bne.n	8006fee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fe8:	f000 fec0 	bl	8007d6c <xTimerCreateTimerTask>
 8006fec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d116      	bne.n	8007022 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	613b      	str	r3, [r7, #16]
}
 8007006:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <vTaskStartScheduler+0xc0>)
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007010:	4b11      	ldr	r3, [pc, #68]	; (8007058 <vTaskStartScheduler+0xc4>)
 8007012:	2201      	movs	r2, #1
 8007014:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007016:	4b11      	ldr	r3, [pc, #68]	; (800705c <vTaskStartScheduler+0xc8>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800701c:	f001 faa0 	bl	8008560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007020:	e00e      	b.n	8007040 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d10a      	bne.n	8007040 <vTaskStartScheduler+0xac>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60fb      	str	r3, [r7, #12]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <vTaskStartScheduler+0xaa>
}
 8007040:	bf00      	nop
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	08008d9c 	.word	0x08008d9c
 800704c:	080077b5 	.word	0x080077b5
 8007050:	20001504 	.word	0x20001504
 8007054:	20001500 	.word	0x20001500
 8007058:	200014ec 	.word	0x200014ec
 800705c:	200014e4 	.word	0x200014e4

08007060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <vTaskSuspendAll+0x18>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3301      	adds	r3, #1
 800706a:	4a03      	ldr	r2, [pc, #12]	; (8007078 <vTaskSuspendAll+0x18>)
 800706c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800706e:	bf00      	nop
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	20001508 	.word	0x20001508

0800707c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800708a:	4b42      	ldr	r3, [pc, #264]	; (8007194 <xTaskResumeAll+0x118>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	603b      	str	r3, [r7, #0]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070a8:	f001 fafc 	bl	80086a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070ac:	4b39      	ldr	r3, [pc, #228]	; (8007194 <xTaskResumeAll+0x118>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	4a38      	ldr	r2, [pc, #224]	; (8007194 <xTaskResumeAll+0x118>)
 80070b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b6:	4b37      	ldr	r3, [pc, #220]	; (8007194 <xTaskResumeAll+0x118>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d162      	bne.n	8007184 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070be:	4b36      	ldr	r3, [pc, #216]	; (8007198 <xTaskResumeAll+0x11c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d05e      	beq.n	8007184 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070c6:	e02f      	b.n	8007128 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c8:	4b34      	ldr	r3, [pc, #208]	; (800719c <xTaskResumeAll+0x120>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3318      	adds	r3, #24
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe fe5d 	bl	8005d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fe58 	bl	8005d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <xTaskResumeAll+0x124>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d903      	bls.n	80070f8 <xTaskResumeAll+0x7c>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	4a2a      	ldr	r2, [pc, #168]	; (80071a0 <xTaskResumeAll+0x124>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <xTaskResumeAll+0x128>)
 8007106:	441a      	add	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fe fde3 	bl	8005cda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <xTaskResumeAll+0x12c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	429a      	cmp	r2, r3
 8007120:	d302      	bcc.n	8007128 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007122:	4b22      	ldr	r3, [pc, #136]	; (80071ac <xTaskResumeAll+0x130>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007128:	4b1c      	ldr	r3, [pc, #112]	; (800719c <xTaskResumeAll+0x120>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1cb      	bne.n	80070c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007136:	f000 fbf3 	bl	8007920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800713a:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <xTaskResumeAll+0x134>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d010      	beq.n	8007168 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007146:	f000 f847 	bl	80071d8 <xTaskIncrementTick>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007150:	4b16      	ldr	r3, [pc, #88]	; (80071ac <xTaskResumeAll+0x130>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3b01      	subs	r3, #1
 800715a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f1      	bne.n	8007146 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007162:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <xTaskResumeAll+0x134>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007168:	4b10      	ldr	r3, [pc, #64]	; (80071ac <xTaskResumeAll+0x130>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007174:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <xTaskResumeAll+0x138>)
 8007176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007184:	f001 fabe 	bl	8008704 <vPortExitCritical>

	return xAlreadyYielded;
 8007188:	68bb      	ldr	r3, [r7, #8]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20001508 	.word	0x20001508
 8007198:	200014e0 	.word	0x200014e0
 800719c:	200014a0 	.word	0x200014a0
 80071a0:	200014e8 	.word	0x200014e8
 80071a4:	20001010 	.word	0x20001010
 80071a8:	2000100c 	.word	0x2000100c
 80071ac:	200014f4 	.word	0x200014f4
 80071b0:	200014f0 	.word	0x200014f0
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <xTaskGetTickCount+0x1c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071c4:	687b      	ldr	r3, [r7, #4]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	200014e4 	.word	0x200014e4

080071d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e2:	4b4f      	ldr	r3, [pc, #316]	; (8007320 <xTaskIncrementTick+0x148>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 808f 	bne.w	800730a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071ec:	4b4d      	ldr	r3, [pc, #308]	; (8007324 <xTaskIncrementTick+0x14c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3301      	adds	r3, #1
 80071f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071f4:	4a4b      	ldr	r2, [pc, #300]	; (8007324 <xTaskIncrementTick+0x14c>)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d120      	bne.n	8007242 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007200:	4b49      	ldr	r3, [pc, #292]	; (8007328 <xTaskIncrementTick+0x150>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <xTaskIncrementTick+0x48>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	603b      	str	r3, [r7, #0]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <xTaskIncrementTick+0x46>
 8007220:	4b41      	ldr	r3, [pc, #260]	; (8007328 <xTaskIncrementTick+0x150>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	4b41      	ldr	r3, [pc, #260]	; (800732c <xTaskIncrementTick+0x154>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3f      	ldr	r2, [pc, #252]	; (8007328 <xTaskIncrementTick+0x150>)
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	4a3f      	ldr	r2, [pc, #252]	; (800732c <xTaskIncrementTick+0x154>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b3e      	ldr	r3, [pc, #248]	; (8007330 <xTaskIncrementTick+0x158>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3301      	adds	r3, #1
 800723a:	4a3d      	ldr	r2, [pc, #244]	; (8007330 <xTaskIncrementTick+0x158>)
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	f000 fb6f 	bl	8007920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007242:	4b3c      	ldr	r3, [pc, #240]	; (8007334 <xTaskIncrementTick+0x15c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	429a      	cmp	r2, r3
 800724a:	d349      	bcc.n	80072e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800724c:	4b36      	ldr	r3, [pc, #216]	; (8007328 <xTaskIncrementTick+0x150>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	4b37      	ldr	r3, [pc, #220]	; (8007334 <xTaskIncrementTick+0x15c>)
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	601a      	str	r2, [r3, #0]
					break;
 800725e:	e03f      	b.n	80072e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007260:	4b31      	ldr	r3, [pc, #196]	; (8007328 <xTaskIncrementTick+0x150>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d203      	bcs.n	8007280 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007278:	4a2e      	ldr	r2, [pc, #184]	; (8007334 <xTaskIncrementTick+0x15c>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800727e:	e02f      	b.n	80072e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fd85 	bl	8005d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3318      	adds	r3, #24
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fd7c 	bl	8005d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	4b25      	ldr	r3, [pc, #148]	; (8007338 <xTaskIncrementTick+0x160>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d903      	bls.n	80072b0 <xTaskIncrementTick+0xd8>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	4a22      	ldr	r2, [pc, #136]	; (8007338 <xTaskIncrementTick+0x160>)
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4a1f      	ldr	r2, [pc, #124]	; (800733c <xTaskIncrementTick+0x164>)
 80072be:	441a      	add	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe fd07 	bl	8005cda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <xTaskIncrementTick+0x168>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d3b8      	bcc.n	800724c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072da:	2301      	movs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072de:	e7b5      	b.n	800724c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072e0:	4b17      	ldr	r3, [pc, #92]	; (8007340 <xTaskIncrementTick+0x168>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e6:	4915      	ldr	r1, [pc, #84]	; (800733c <xTaskIncrementTick+0x164>)
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d901      	bls.n	80072fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072fc:	4b11      	ldr	r3, [pc, #68]	; (8007344 <xTaskIncrementTick+0x16c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e004      	b.n	8007314 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <xTaskIncrementTick+0x170>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3301      	adds	r3, #1
 8007310:	4a0d      	ldr	r2, [pc, #52]	; (8007348 <xTaskIncrementTick+0x170>)
 8007312:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007314:	697b      	ldr	r3, [r7, #20]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20001508 	.word	0x20001508
 8007324:	200014e4 	.word	0x200014e4
 8007328:	20001498 	.word	0x20001498
 800732c:	2000149c 	.word	0x2000149c
 8007330:	200014f8 	.word	0x200014f8
 8007334:	20001500 	.word	0x20001500
 8007338:	200014e8 	.word	0x200014e8
 800733c:	20001010 	.word	0x20001010
 8007340:	2000100c 	.word	0x2000100c
 8007344:	200014f4 	.word	0x200014f4
 8007348:	200014f0 	.word	0x200014f0

0800734c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007352:	4b28      	ldr	r3, [pc, #160]	; (80073f4 <vTaskSwitchContext+0xa8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800735a:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <vTaskSwitchContext+0xac>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007360:	e041      	b.n	80073e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007362:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <vTaskSwitchContext+0xac>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007368:	4b24      	ldr	r3, [pc, #144]	; (80073fc <vTaskSwitchContext+0xb0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e010      	b.n	8007392 <vTaskSwitchContext+0x46>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <vTaskSwitchContext+0x40>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	607b      	str	r3, [r7, #4]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <vTaskSwitchContext+0x3e>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3b01      	subs	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	491b      	ldr	r1, [pc, #108]	; (8007400 <vTaskSwitchContext+0xb4>)
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0e4      	beq.n	8007370 <vTaskSwitchContext+0x24>
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <vTaskSwitchContext+0xb4>)
 80073b2:	4413      	add	r3, r2
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	605a      	str	r2, [r3, #4]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	3308      	adds	r3, #8
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d104      	bne.n	80073d6 <vTaskSwitchContext+0x8a>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	605a      	str	r2, [r3, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a09      	ldr	r2, [pc, #36]	; (8007404 <vTaskSwitchContext+0xb8>)
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4a06      	ldr	r2, [pc, #24]	; (80073fc <vTaskSwitchContext+0xb0>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6013      	str	r3, [r2, #0]
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20001508 	.word	0x20001508
 80073f8:	200014f4 	.word	0x200014f4
 80073fc:	200014e8 	.word	0x200014e8
 8007400:	20001010 	.word	0x20001010
 8007404:	2000100c 	.word	0x2000100c

08007408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	60fb      	str	r3, [r7, #12]
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <vTaskPlaceOnEventList+0x44>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3318      	adds	r3, #24
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fe fc73 	bl	8005d22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800743c:	2101      	movs	r1, #1
 800743e:	6838      	ldr	r0, [r7, #0]
 8007440:	f000 fc40 	bl	8007cc4 <prvAddCurrentTaskToDelayedList>
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	2000100c 	.word	0x2000100c

08007450 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	617b      	str	r3, [r7, #20]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007478:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	613b      	str	r3, [r7, #16]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80074a0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074a2:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3318      	adds	r3, #24
 80074a8:	4619      	mov	r1, r3
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7fe fc15 	bl	8005cda <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074b0:	2101      	movs	r1, #1
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fc06 	bl	8007cc4 <prvAddCurrentTaskToDelayedList>
}
 80074b8:	bf00      	nop
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20001508 	.word	0x20001508
 80074c4:	2000100c 	.word	0x2000100c

080074c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	617b      	str	r3, [r7, #20]
}
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <vTaskPlaceOnEventListRestricted+0x54>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3318      	adds	r3, #24
 80074f6:	4619      	mov	r1, r3
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7fe fbee 	bl	8005cda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007504:	f04f 33ff 	mov.w	r3, #4294967295
 8007508:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	68b8      	ldr	r0, [r7, #8]
 800750e:	f000 fbd9 	bl	8007cc4 <prvAddCurrentTaskToDelayedList>
	}
 8007512:	bf00      	nop
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2000100c 	.word	0x2000100c

08007520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	3318      	adds	r3, #24
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe fc1f 	bl	8005d94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007556:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <xTaskRemoveFromEventList+0xb0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d11d      	bne.n	800759a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe fc16 	bl	8005d94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <xTaskRemoveFromEventList+0xb4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d903      	bls.n	800757c <xTaskRemoveFromEventList+0x5c>
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	4a16      	ldr	r2, [pc, #88]	; (80075d4 <xTaskRemoveFromEventList+0xb4>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <xTaskRemoveFromEventList+0xb8>)
 800758a:	441a      	add	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7fe fba1 	bl	8005cda <vListInsertEnd>
 8007598:	e005      	b.n	80075a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	3318      	adds	r3, #24
 800759e:	4619      	mov	r1, r3
 80075a0:	480e      	ldr	r0, [pc, #56]	; (80075dc <xTaskRemoveFromEventList+0xbc>)
 80075a2:	f7fe fb9a 	bl	8005cda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <xTaskRemoveFromEventList+0xc0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d905      	bls.n	80075c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <xTaskRemoveFromEventList+0xc4>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e001      	b.n	80075c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075c4:	697b      	ldr	r3, [r7, #20]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20001508 	.word	0x20001508
 80075d4:	200014e8 	.word	0x200014e8
 80075d8:	20001010 	.word	0x20001010
 80075dc:	200014a0 	.word	0x200014a0
 80075e0:	2000100c 	.word	0x2000100c
 80075e4:	200014f4 	.word	0x200014f4

080075e8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80075f2:	4b29      	ldr	r3, [pc, #164]	; (8007698 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	613b      	str	r3, [r7, #16]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fe fba9 	bl	8005d94 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3304      	adds	r3, #4
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fba4 	bl	8005d94 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	4b12      	ldr	r3, [pc, #72]	; (800769c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d903      	bls.n	8007660 <vTaskRemoveFromUnorderedEventList+0x78>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	4a0f      	ldr	r2, [pc, #60]	; (800769c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4a0c      	ldr	r2, [pc, #48]	; (80076a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800766e:	441a      	add	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fe fb2f 	bl	8005cda <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	429a      	cmp	r2, r3
 8007688:	d902      	bls.n	8007690 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800768c:	2201      	movs	r2, #1
 800768e:	601a      	str	r2, [r3, #0]
	}
}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20001508 	.word	0x20001508
 800769c:	200014e8 	.word	0x200014e8
 80076a0:	20001010 	.word	0x20001010
 80076a4:	2000100c 	.word	0x2000100c
 80076a8:	200014f4 	.word	0x200014f4

080076ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <vTaskInternalSetTimeOutState+0x24>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <vTaskInternalSetTimeOutState+0x28>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	605a      	str	r2, [r3, #4]
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	200014f8 	.word	0x200014f8
 80076d4:	200014e4 	.word	0x200014e4

080076d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	613b      	str	r3, [r7, #16]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	60fb      	str	r3, [r7, #12]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800771a:	f000 ffc3 	bl	80086a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800771e:	4b1d      	ldr	r3, [pc, #116]	; (8007794 <xTaskCheckForTimeOut+0xbc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d102      	bne.n	800773e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007738:	2300      	movs	r3, #0
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	e023      	b.n	8007786 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <xTaskCheckForTimeOut+0xc0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d007      	beq.n	800775a <xTaskCheckForTimeOut+0x82>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007754:	2301      	movs	r3, #1
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	e015      	b.n	8007786 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	d20b      	bcs.n	800777c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ff9b 	bl	80076ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	61fb      	str	r3, [r7, #28]
 800777a:	e004      	b.n	8007786 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007786:	f000 ffbd 	bl	8008704 <vPortExitCritical>

	return xReturn;
 800778a:	69fb      	ldr	r3, [r7, #28]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200014e4 	.word	0x200014e4
 8007798:	200014f8 	.word	0x200014f8

0800779c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077a0:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <vTaskMissedYield+0x14>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	200014f4 	.word	0x200014f4

080077b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077bc:	f000 f852 	bl	8007864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077c0:	4b06      	ldr	r3, [pc, #24]	; (80077dc <prvIdleTask+0x28>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d9f9      	bls.n	80077bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <prvIdleTask+0x2c>)
 80077ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077d8:	e7f0      	b.n	80077bc <prvIdleTask+0x8>
 80077da:	bf00      	nop
 80077dc:	20001010 	.word	0x20001010
 80077e0:	e000ed04 	.word	0xe000ed04

080077e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077ea:	2300      	movs	r3, #0
 80077ec:	607b      	str	r3, [r7, #4]
 80077ee:	e00c      	b.n	800780a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4a12      	ldr	r2, [pc, #72]	; (8007844 <prvInitialiseTaskLists+0x60>)
 80077fc:	4413      	add	r3, r2
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fa3e 	bl	8005c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3301      	adds	r3, #1
 8007808:	607b      	str	r3, [r7, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b37      	cmp	r3, #55	; 0x37
 800780e:	d9ef      	bls.n	80077f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007810:	480d      	ldr	r0, [pc, #52]	; (8007848 <prvInitialiseTaskLists+0x64>)
 8007812:	f7fe fa35 	bl	8005c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007816:	480d      	ldr	r0, [pc, #52]	; (800784c <prvInitialiseTaskLists+0x68>)
 8007818:	f7fe fa32 	bl	8005c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800781c:	480c      	ldr	r0, [pc, #48]	; (8007850 <prvInitialiseTaskLists+0x6c>)
 800781e:	f7fe fa2f 	bl	8005c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007822:	480c      	ldr	r0, [pc, #48]	; (8007854 <prvInitialiseTaskLists+0x70>)
 8007824:	f7fe fa2c 	bl	8005c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007828:	480b      	ldr	r0, [pc, #44]	; (8007858 <prvInitialiseTaskLists+0x74>)
 800782a:	f7fe fa29 	bl	8005c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800782e:	4b0b      	ldr	r3, [pc, #44]	; (800785c <prvInitialiseTaskLists+0x78>)
 8007830:	4a05      	ldr	r2, [pc, #20]	; (8007848 <prvInitialiseTaskLists+0x64>)
 8007832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <prvInitialiseTaskLists+0x7c>)
 8007836:	4a05      	ldr	r2, [pc, #20]	; (800784c <prvInitialiseTaskLists+0x68>)
 8007838:	601a      	str	r2, [r3, #0]
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20001010 	.word	0x20001010
 8007848:	20001470 	.word	0x20001470
 800784c:	20001484 	.word	0x20001484
 8007850:	200014a0 	.word	0x200014a0
 8007854:	200014b4 	.word	0x200014b4
 8007858:	200014cc 	.word	0x200014cc
 800785c:	20001498 	.word	0x20001498
 8007860:	2000149c 	.word	0x2000149c

08007864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800786a:	e019      	b.n	80078a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800786c:	f000 ff1a 	bl	80086a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007870:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <prvCheckTasksWaitingTermination+0x50>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3304      	adds	r3, #4
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fa89 	bl	8005d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007882:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <prvCheckTasksWaitingTermination+0x54>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3b01      	subs	r3, #1
 8007888:	4a0b      	ldr	r2, [pc, #44]	; (80078b8 <prvCheckTasksWaitingTermination+0x54>)
 800788a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <prvCheckTasksWaitingTermination+0x58>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3b01      	subs	r3, #1
 8007892:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <prvCheckTasksWaitingTermination+0x58>)
 8007894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007896:	f000 ff35 	bl	8008704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f810 	bl	80078c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <prvCheckTasksWaitingTermination+0x58>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e1      	bne.n	800786c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200014b4 	.word	0x200014b4
 80078b8:	200014e0 	.word	0x200014e0
 80078bc:	200014c8 	.word	0x200014c8

080078c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d108      	bne.n	80078e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 f8d2 	bl	8008a80 <vPortFree>
				vPortFree( pxTCB );
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f8cf 	bl	8008a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078e2:	e018      	b.n	8007916 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d103      	bne.n	80078f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 f8c6 	bl	8008a80 <vPortFree>
	}
 80078f4:	e00f      	b.n	8007916 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d00a      	beq.n	8007916 <prvDeleteTCB+0x56>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60fb      	str	r3, [r7, #12]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <prvDeleteTCB+0x54>
	}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007926:	4b0c      	ldr	r3, [pc, #48]	; (8007958 <prvResetNextTaskUnblockTime+0x38>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d104      	bne.n	800793a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007930:	4b0a      	ldr	r3, [pc, #40]	; (800795c <prvResetNextTaskUnblockTime+0x3c>)
 8007932:	f04f 32ff 	mov.w	r2, #4294967295
 8007936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007938:	e008      	b.n	800794c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <prvResetNextTaskUnblockTime+0x38>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	4a04      	ldr	r2, [pc, #16]	; (800795c <prvResetNextTaskUnblockTime+0x3c>)
 800794a:	6013      	str	r3, [r2, #0]
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	20001498 	.word	0x20001498
 800795c:	20001500 	.word	0x20001500

08007960 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <xTaskGetCurrentTaskHandle+0x1c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800796c:	687b      	ldr	r3, [r7, #4]
	}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	2000100c 	.word	0x2000100c

08007980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <xTaskGetSchedulerState+0x34>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800798e:	2301      	movs	r3, #1
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	e008      	b.n	80079a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <xTaskGetSchedulerState+0x38>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800799c:	2302      	movs	r3, #2
 800799e:	607b      	str	r3, [r7, #4]
 80079a0:	e001      	b.n	80079a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079a2:	2300      	movs	r3, #0
 80079a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079a6:	687b      	ldr	r3, [r7, #4]
	}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	200014ec 	.word	0x200014ec
 80079b8:	20001508 	.word	0x20001508

080079bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d051      	beq.n	8007a76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	4b2a      	ldr	r3, [pc, #168]	; (8007a80 <xTaskPriorityInherit+0xc4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d241      	bcs.n	8007a64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	db06      	blt.n	80079f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e8:	4b25      	ldr	r3, [pc, #148]	; (8007a80 <xTaskPriorityInherit+0xc4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6959      	ldr	r1, [r3, #20]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a1f      	ldr	r2, [pc, #124]	; (8007a84 <xTaskPriorityInherit+0xc8>)
 8007a08:	4413      	add	r3, r2
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	d122      	bne.n	8007a54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3304      	adds	r3, #4
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe f9be 	bl	8005d94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a18:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <xTaskPriorityInherit+0xc4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <xTaskPriorityInherit+0xcc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d903      	bls.n	8007a36 <xTaskPriorityInherit+0x7a>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <xTaskPriorityInherit+0xcc>)
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4a10      	ldr	r2, [pc, #64]	; (8007a84 <xTaskPriorityInherit+0xc8>)
 8007a44:	441a      	add	r2, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	f7fe f944 	bl	8005cda <vListInsertEnd>
 8007a52:	e004      	b.n	8007a5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <xTaskPriorityInherit+0xc4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	e008      	b.n	8007a76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <xTaskPriorityInherit+0xc4>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d201      	bcs.n	8007a76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a72:	2301      	movs	r3, #1
 8007a74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a76:	68fb      	ldr	r3, [r7, #12]
	}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	2000100c 	.word	0x2000100c
 8007a84:	20001010 	.word	0x20001010
 8007a88:	200014e8 	.word	0x200014e8

08007a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d056      	beq.n	8007b50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007aa2:	4b2e      	ldr	r3, [pc, #184]	; (8007b5c <xTaskPriorityDisinherit+0xd0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d00a      	beq.n	8007ac2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60fb      	str	r3, [r7, #12]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	60bb      	str	r3, [r7, #8]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d02c      	beq.n	8007b50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d128      	bne.n	8007b50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	3304      	adds	r3, #4
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe f946 	bl	8005d94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b20:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <xTaskPriorityDisinherit+0xd4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d903      	bls.n	8007b30 <xTaskPriorityDisinherit+0xa4>
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	4a0c      	ldr	r2, [pc, #48]	; (8007b60 <xTaskPriorityDisinherit+0xd4>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <xTaskPriorityDisinherit+0xd8>)
 8007b3e:	441a      	add	r2, r3
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7fe f8c7 	bl	8005cda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b50:	697b      	ldr	r3, [r7, #20]
	}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000100c 	.word	0x2000100c
 8007b60:	200014e8 	.word	0x200014e8
 8007b64:	20001010 	.word	0x20001010

08007b68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d06a      	beq.n	8007c56 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10a      	bne.n	8007b9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	60fb      	str	r3, [r7, #12]
}
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d902      	bls.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e002      	b.n	8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d04b      	beq.n	8007c56 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d146      	bne.n	8007c56 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bc8:	4b25      	ldr	r3, [pc, #148]	; (8007c60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d10a      	bne.n	8007be8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	60bb      	str	r3, [r7, #8]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db04      	blt.n	8007c06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	6959      	ldr	r1, [r3, #20]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007c16:	4413      	add	r3, r2
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	d11c      	bne.n	8007c56 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe f8b7 	bl	8005d94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d903      	bls.n	8007c3a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007c48:	441a      	add	r2, r3
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f7fe f842 	bl	8005cda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c56:	bf00      	nop
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	2000100c 	.word	0x2000100c
 8007c64:	20001010 	.word	0x20001010
 8007c68:	200014e8 	.word	0x200014e8

08007c6c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <uxTaskResetEventItemValue+0x2c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7a:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <uxTaskResetEventItemValue+0x2c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <uxTaskResetEventItemValue+0x2c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007c88:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007c8a:	687b      	ldr	r3, [r7, #4]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	2000100c 	.word	0x2000100c

08007c9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ca0:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d004      	beq.n	8007cb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cae:	3201      	adds	r2, #1
 8007cb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007cb2:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
	}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	2000100c 	.word	0x2000100c

08007cc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cce:	4b21      	ldr	r3, [pc, #132]	; (8007d54 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd4:	4b20      	ldr	r3, [pc, #128]	; (8007d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe f85a 	bl	8005d94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce6:	d10a      	bne.n	8007cfe <prvAddCurrentTaskToDelayedList+0x3a>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cee:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4819      	ldr	r0, [pc, #100]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x98>)
 8007cf8:	f7fd ffef 	bl	8005cda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cfc:	e026      	b.n	8007d4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d06:	4b14      	ldr	r3, [pc, #80]	; (8007d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d209      	bcs.n	8007d2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d16:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fd fffd 	bl	8005d22 <vListInsert>
}
 8007d28:	e010      	b.n	8007d4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fd fff3 	bl	8005d22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d202      	bcs.n	8007d4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d46:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	6013      	str	r3, [r2, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	200014e4 	.word	0x200014e4
 8007d58:	2000100c 	.word	0x2000100c
 8007d5c:	200014cc 	.word	0x200014cc
 8007d60:	2000149c 	.word	0x2000149c
 8007d64:	20001498 	.word	0x20001498
 8007d68:	20001500 	.word	0x20001500

08007d6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	; 0x28
 8007d70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d76:	f000 fb07 	bl	8008388 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d7a:	4b1c      	ldr	r3, [pc, #112]	; (8007dec <xTimerCreateTimerTask+0x80>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d021      	beq.n	8007dc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d8a:	1d3a      	adds	r2, r7, #4
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	f107 030c 	add.w	r3, r7, #12
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fd fced 	bl	8005774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	9202      	str	r2, [sp, #8]
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	2302      	movs	r3, #2
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2300      	movs	r3, #0
 8007daa:	460a      	mov	r2, r1
 8007dac:	4910      	ldr	r1, [pc, #64]	; (8007df0 <xTimerCreateTimerTask+0x84>)
 8007dae:	4811      	ldr	r0, [pc, #68]	; (8007df4 <xTimerCreateTimerTask+0x88>)
 8007db0:	f7fe ff1a 	bl	8006be8 <xTaskCreateStatic>
 8007db4:	4603      	mov	r3, r0
 8007db6:	4a10      	ldr	r2, [pc, #64]	; (8007df8 <xTimerCreateTimerTask+0x8c>)
 8007db8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dba:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <xTimerCreateTimerTask+0x8c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	613b      	str	r3, [r7, #16]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007de2:	697b      	ldr	r3, [r7, #20]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000153c 	.word	0x2000153c
 8007df0:	08008da4 	.word	0x08008da4
 8007df4:	08007f31 	.word	0x08007f31
 8007df8:	20001540 	.word	0x20001540

08007dfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08a      	sub	sp, #40	; 0x28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	623b      	str	r3, [r7, #32]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e2a:	4b1a      	ldr	r3, [pc, #104]	; (8007e94 <xTimerGenericCommand+0x98>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d02a      	beq.n	8007e88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	dc18      	bgt.n	8007e76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e44:	f7ff fd9c 	bl	8007980 <xTaskGetSchedulerState>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d109      	bne.n	8007e62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e4e:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <xTimerGenericCommand+0x98>)
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	f107 0110 	add.w	r1, r7, #16
 8007e56:	2300      	movs	r3, #0
 8007e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5a:	f7fe f9b9 	bl	80061d0 <xQueueGenericSend>
 8007e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007e60:	e012      	b.n	8007e88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e62:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <xTimerGenericCommand+0x98>)
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	f107 0110 	add.w	r1, r7, #16
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f7fe f9af 	bl	80061d0 <xQueueGenericSend>
 8007e72:	6278      	str	r0, [r7, #36]	; 0x24
 8007e74:	e008      	b.n	8007e88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e76:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <xTimerGenericCommand+0x98>)
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	f107 0110 	add.w	r1, r7, #16
 8007e7e:	2300      	movs	r3, #0
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	f7fe faa3 	bl	80063cc <xQueueGenericSendFromISR>
 8007e86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3728      	adds	r7, #40	; 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	2000153c 	.word	0x2000153c

08007e98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af02      	add	r7, sp, #8
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea2:	4b22      	ldr	r3, [pc, #136]	; (8007f2c <prvProcessExpiredTimer+0x94>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fd ff6f 	bl	8005d94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d022      	beq.n	8007f0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	18d1      	adds	r1, r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	6978      	ldr	r0, [r7, #20]
 8007ed2:	f000 f8d1 	bl	8008078 <prvInsertTimerInActiveList>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01f      	beq.n	8007f1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007edc:	2300      	movs	r3, #0
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	6978      	ldr	r0, [r7, #20]
 8007ee8:	f7ff ff88 	bl	8007dfc <xTimerGenericCommand>
 8007eec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d113      	bne.n	8007f1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60fb      	str	r3, [r7, #12]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	6978      	ldr	r0, [r7, #20]
 8007f22:	4798      	blx	r3
}
 8007f24:	bf00      	nop
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20001534 	.word	0x20001534

08007f30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f38:	f107 0308 	add.w	r3, r7, #8
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 f857 	bl	8007ff0 <prvGetNextExpireTime>
 8007f42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f803 	bl	8007f54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f4e:	f000 f8d5 	bl	80080fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f52:	e7f1      	b.n	8007f38 <prvTimerTask+0x8>

08007f54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f5e:	f7ff f87f 	bl	8007060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f62:	f107 0308 	add.w	r3, r7, #8
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f866 	bl	8008038 <prvSampleTimeNow>
 8007f6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d130      	bne.n	8007fd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <prvProcessTimerOrBlockTask+0x3c>
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d806      	bhi.n	8007f90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f82:	f7ff f87b 	bl	800707c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff ff85 	bl	8007e98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f8e:	e024      	b.n	8007fda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d008      	beq.n	8007fa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f96:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <prvProcessTimerOrBlockTask+0x90>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <prvProcessTimerOrBlockTask+0x50>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <prvProcessTimerOrBlockTask+0x52>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fa8:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <prvProcessTimerOrBlockTask+0x94>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f7fe fde3 	bl	8006b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fba:	f7ff f85f 	bl	800707c <xTaskResumeAll>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10a      	bne.n	8007fda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fc4:	4b09      	ldr	r3, [pc, #36]	; (8007fec <prvProcessTimerOrBlockTask+0x98>)
 8007fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	f3bf 8f6f 	isb	sy
}
 8007fd4:	e001      	b.n	8007fda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fd6:	f7ff f851 	bl	800707c <xTaskResumeAll>
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20001538 	.word	0x20001538
 8007fe8:	2000153c 	.word	0x2000153c
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ff8:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <prvGetNextExpireTime+0x44>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <prvGetNextExpireTime+0x16>
 8008002:	2201      	movs	r2, #1
 8008004:	e000      	b.n	8008008 <prvGetNextExpireTime+0x18>
 8008006:	2200      	movs	r2, #0
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008014:	4b07      	ldr	r3, [pc, #28]	; (8008034 <prvGetNextExpireTime+0x44>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e001      	b.n	8008024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008024:	68fb      	ldr	r3, [r7, #12]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20001534 	.word	0x20001534

08008038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008040:	f7ff f8ba 	bl	80071b8 <xTaskGetTickCount>
 8008044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <prvSampleTimeNow+0x3c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	429a      	cmp	r2, r3
 800804e:	d205      	bcs.n	800805c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008050:	f000 f936 	bl	80082c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	e002      	b.n	8008062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008062:	4a04      	ldr	r2, [pc, #16]	; (8008074 <prvSampleTimeNow+0x3c>)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008068:	68fb      	ldr	r3, [r7, #12]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20001544 	.word	0x20001544

08008078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	429a      	cmp	r2, r3
 800809c:	d812      	bhi.n	80080c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d302      	bcc.n	80080b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080ac:	2301      	movs	r3, #1
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e01b      	b.n	80080ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080b2:	4b10      	ldr	r3, [pc, #64]	; (80080f4 <prvInsertTimerInActiveList+0x7c>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f7fd fe30 	bl	8005d22 <vListInsert>
 80080c2:	e012      	b.n	80080ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d206      	bcs.n	80080da <prvInsertTimerInActiveList+0x62>
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d302      	bcc.n	80080da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e007      	b.n	80080ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080da:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <prvInsertTimerInActiveList+0x80>)
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3304      	adds	r3, #4
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f7fd fe1c 	bl	8005d22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080ea:	697b      	ldr	r3, [r7, #20]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20001538 	.word	0x20001538
 80080f8:	20001534 	.word	0x20001534

080080fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08e      	sub	sp, #56	; 0x38
 8008100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008102:	e0ca      	b.n	800829a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	da18      	bge.n	800813c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800810a:	1d3b      	adds	r3, r7, #4
 800810c:	3304      	adds	r3, #4
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	61fb      	str	r3, [r7, #28]
}
 8008128:	bf00      	nop
 800812a:	e7fe      	b.n	800812a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008132:	6850      	ldr	r0, [r2, #4]
 8008134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008136:	6892      	ldr	r2, [r2, #8]
 8008138:	4611      	mov	r1, r2
 800813a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f2c0 80aa 	blt.w	8008298 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	3304      	adds	r3, #4
 8008154:	4618      	mov	r0, r3
 8008156:	f7fd fe1d 	bl	8005d94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800815a:	463b      	mov	r3, r7
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff ff6b 	bl	8008038 <prvSampleTimeNow>
 8008162:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b09      	cmp	r3, #9
 8008168:	f200 8097 	bhi.w	800829a <prvProcessReceivedCommands+0x19e>
 800816c:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <prvProcessReceivedCommands+0x78>)
 800816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008172:	bf00      	nop
 8008174:	0800819d 	.word	0x0800819d
 8008178:	0800819d 	.word	0x0800819d
 800817c:	0800819d 	.word	0x0800819d
 8008180:	08008211 	.word	0x08008211
 8008184:	08008225 	.word	0x08008225
 8008188:	0800826f 	.word	0x0800826f
 800818c:	0800819d 	.word	0x0800819d
 8008190:	0800819d 	.word	0x0800819d
 8008194:	08008211 	.word	0x08008211
 8008198:	08008225 	.word	0x08008225
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	18d1      	adds	r1, r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081bc:	f7ff ff5c 	bl	8008078 <prvInsertTimerInActiveList>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d069      	beq.n	800829a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d05e      	beq.n	800829a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	441a      	add	r2, r3
 80081e4:	2300      	movs	r3, #0
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ee:	f7ff fe05 	bl	8007dfc <xTimerGenericCommand>
 80081f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d14f      	bne.n	800829a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	61bb      	str	r3, [r7, #24]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008222:	e03a      	b.n	800829a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	b2da      	uxtb	r2, r3
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	617b      	str	r3, [r7, #20]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	18d1      	adds	r1, r2, r3
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008268:	f7ff ff06 	bl	8008078 <prvInsertTimerInActiveList>
					break;
 800826c:	e015      	b.n	800829a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800827c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827e:	f000 fbff 	bl	8008a80 <vPortFree>
 8008282:	e00a      	b.n	800829a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	b2da      	uxtb	r2, r3
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008296:	e000      	b.n	800829a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008298:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800829a:	4b08      	ldr	r3, [pc, #32]	; (80082bc <prvProcessReceivedCommands+0x1c0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	1d39      	adds	r1, r7, #4
 80082a0:	2200      	movs	r2, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe f92e 	bl	8006504 <xQueueReceive>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f47f af2a 	bne.w	8008104 <prvProcessReceivedCommands+0x8>
	}
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	3730      	adds	r7, #48	; 0x30
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	2000153c 	.word	0x2000153c

080082c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082c6:	e048      	b.n	800835a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082c8:	4b2d      	ldr	r3, [pc, #180]	; (8008380 <prvSwitchTimerLists+0xc0>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d2:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <prvSwitchTimerLists+0xc0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3304      	adds	r3, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd fd57 	bl	8005d94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d02e      	beq.n	800835a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4413      	add	r3, r2
 8008304:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	429a      	cmp	r2, r3
 800830c:	d90e      	bls.n	800832c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800831a:	4b19      	ldr	r3, [pc, #100]	; (8008380 <prvSwitchTimerLists+0xc0>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7fd fcfc 	bl	8005d22 <vListInsert>
 800832a:	e016      	b.n	800835a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800832c:	2300      	movs	r3, #0
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2300      	movs	r3, #0
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff fd60 	bl	8007dfc <xTimerGenericCommand>
 800833c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	603b      	str	r3, [r7, #0]
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800835a:	4b09      	ldr	r3, [pc, #36]	; (8008380 <prvSwitchTimerLists+0xc0>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1b1      	bne.n	80082c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008364:	4b06      	ldr	r3, [pc, #24]	; (8008380 <prvSwitchTimerLists+0xc0>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <prvSwitchTimerLists+0xc4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a04      	ldr	r2, [pc, #16]	; (8008380 <prvSwitchTimerLists+0xc0>)
 8008370:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008372:	4a04      	ldr	r2, [pc, #16]	; (8008384 <prvSwitchTimerLists+0xc4>)
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6013      	str	r3, [r2, #0]
}
 8008378:	bf00      	nop
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20001534 	.word	0x20001534
 8008384:	20001538 	.word	0x20001538

08008388 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800838e:	f000 f989 	bl	80086a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008392:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <prvCheckForValidListAndQueue+0x60>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d120      	bne.n	80083dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800839a:	4814      	ldr	r0, [pc, #80]	; (80083ec <prvCheckForValidListAndQueue+0x64>)
 800839c:	f7fd fc70 	bl	8005c80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083a0:	4813      	ldr	r0, [pc, #76]	; (80083f0 <prvCheckForValidListAndQueue+0x68>)
 80083a2:	f7fd fc6d 	bl	8005c80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083a6:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <prvCheckForValidListAndQueue+0x6c>)
 80083a8:	4a10      	ldr	r2, [pc, #64]	; (80083ec <prvCheckForValidListAndQueue+0x64>)
 80083aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083ac:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <prvCheckForValidListAndQueue+0x70>)
 80083ae:	4a10      	ldr	r2, [pc, #64]	; (80083f0 <prvCheckForValidListAndQueue+0x68>)
 80083b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083b2:	2300      	movs	r3, #0
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	4b11      	ldr	r3, [pc, #68]	; (80083fc <prvCheckForValidListAndQueue+0x74>)
 80083b8:	4a11      	ldr	r2, [pc, #68]	; (8008400 <prvCheckForValidListAndQueue+0x78>)
 80083ba:	2110      	movs	r1, #16
 80083bc:	200a      	movs	r0, #10
 80083be:	f7fd fd7b 	bl	8005eb8 <xQueueGenericCreateStatic>
 80083c2:	4603      	mov	r3, r0
 80083c4:	4a08      	ldr	r2, [pc, #32]	; (80083e8 <prvCheckForValidListAndQueue+0x60>)
 80083c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083c8:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <prvCheckForValidListAndQueue+0x60>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <prvCheckForValidListAndQueue+0x60>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	490b      	ldr	r1, [pc, #44]	; (8008404 <prvCheckForValidListAndQueue+0x7c>)
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fba8 	bl	8006b2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083dc:	f000 f992 	bl	8008704 <vPortExitCritical>
}
 80083e0:	bf00      	nop
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000153c 	.word	0x2000153c
 80083ec:	2000150c 	.word	0x2000150c
 80083f0:	20001520 	.word	0x20001520
 80083f4:	20001534 	.word	0x20001534
 80083f8:	20001538 	.word	0x20001538
 80083fc:	200015e8 	.word	0x200015e8
 8008400:	20001548 	.word	0x20001548
 8008404:	08008dac 	.word	0x08008dac

08008408 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008416:	f06f 0301 	mvn.w	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008428:	4b06      	ldr	r3, [pc, #24]	; (8008444 <xTimerPendFunctionCallFromISR+0x3c>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	f107 0114 	add.w	r1, r7, #20
 8008430:	2300      	movs	r3, #0
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	f7fd ffca 	bl	80063cc <xQueueGenericSendFromISR>
 8008438:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800843c:	4618      	mov	r0, r3
 800843e:	3728      	adds	r7, #40	; 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	2000153c 	.word	0x2000153c

08008448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3b04      	subs	r3, #4
 8008458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b04      	subs	r3, #4
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f023 0201 	bic.w	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3b04      	subs	r3, #4
 8008476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008478:	4a0c      	ldr	r2, [pc, #48]	; (80084ac <pxPortInitialiseStack+0x64>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3b14      	subs	r3, #20
 8008482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3b04      	subs	r3, #4
 800848e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f06f 0202 	mvn.w	r2, #2
 8008496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3b20      	subs	r3, #32
 800849c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800849e:	68fb      	ldr	r3, [r7, #12]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	080084b1 	.word	0x080084b1

080084b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084ba:	4b12      	ldr	r3, [pc, #72]	; (8008504 <prvTaskExitError+0x54>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d00a      	beq.n	80084da <prvTaskExitError+0x2a>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	60fb      	str	r3, [r7, #12]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <prvTaskExitError+0x28>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	60bb      	str	r3, [r7, #8]
}
 80084ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ee:	bf00      	nop
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0fc      	beq.n	80084f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084f6:	bf00      	nop
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	20000010 	.word	0x20000010
	...

08008510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <pxCurrentTCBConst2>)
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	6808      	ldr	r0, [r1, #0]
 8008516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	f380 8809 	msr	PSP, r0
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8811 	msr	BASEPRI, r0
 800852a:	4770      	bx	lr
 800852c:	f3af 8000 	nop.w

08008530 <pxCurrentTCBConst2>:
 8008530:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop

08008538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008538:	4808      	ldr	r0, [pc, #32]	; (800855c <prvPortStartFirstTask+0x24>)
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	6800      	ldr	r0, [r0, #0]
 800853e:	f380 8808 	msr	MSP, r0
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	f380 8814 	msr	CONTROL, r0
 800854a:	b662      	cpsie	i
 800854c:	b661      	cpsie	f
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	df00      	svc	0
 8008558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800855a:	bf00      	nop
 800855c:	e000ed08 	.word	0xe000ed08

08008560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008566:	4b46      	ldr	r3, [pc, #280]	; (8008680 <xPortStartScheduler+0x120>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a46      	ldr	r2, [pc, #280]	; (8008684 <xPortStartScheduler+0x124>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d10a      	bne.n	8008586 <xPortStartScheduler+0x26>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	613b      	str	r3, [r7, #16]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008586:	4b3e      	ldr	r3, [pc, #248]	; (8008680 <xPortStartScheduler+0x120>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a3f      	ldr	r2, [pc, #252]	; (8008688 <xPortStartScheduler+0x128>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d10a      	bne.n	80085a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	60fb      	str	r3, [r7, #12]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085a6:	4b39      	ldr	r3, [pc, #228]	; (800868c <xPortStartScheduler+0x12c>)
 80085a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	22ff      	movs	r2, #255	; 0xff
 80085b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	4b31      	ldr	r3, [pc, #196]	; (8008690 <xPortStartScheduler+0x130>)
 80085cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085ce:	4b31      	ldr	r3, [pc, #196]	; (8008694 <xPortStartScheduler+0x134>)
 80085d0:	2207      	movs	r2, #7
 80085d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085d4:	e009      	b.n	80085ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085d6:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <xPortStartScheduler+0x134>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3b01      	subs	r3, #1
 80085dc:	4a2d      	ldr	r2, [pc, #180]	; (8008694 <xPortStartScheduler+0x134>)
 80085de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ea:	78fb      	ldrb	r3, [r7, #3]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f2:	2b80      	cmp	r3, #128	; 0x80
 80085f4:	d0ef      	beq.n	80085d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085f6:	4b27      	ldr	r3, [pc, #156]	; (8008694 <xPortStartScheduler+0x134>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f1c3 0307 	rsb	r3, r3, #7
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d00a      	beq.n	8008618 <xPortStartScheduler+0xb8>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008618:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <xPortStartScheduler+0x134>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	021b      	lsls	r3, r3, #8
 800861e:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <xPortStartScheduler+0x134>)
 8008620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <xPortStartScheduler+0x134>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800862a:	4a1a      	ldr	r2, [pc, #104]	; (8008694 <xPortStartScheduler+0x134>)
 800862c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	b2da      	uxtb	r2, r3
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008636:	4b18      	ldr	r3, [pc, #96]	; (8008698 <xPortStartScheduler+0x138>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a17      	ldr	r2, [pc, #92]	; (8008698 <xPortStartScheduler+0x138>)
 800863c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <xPortStartScheduler+0x138>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a14      	ldr	r2, [pc, #80]	; (8008698 <xPortStartScheduler+0x138>)
 8008648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800864c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800864e:	f000 f8dd 	bl	800880c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <xPortStartScheduler+0x13c>)
 8008654:	2200      	movs	r2, #0
 8008656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008658:	f000 f8fc 	bl	8008854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800865c:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <xPortStartScheduler+0x140>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0f      	ldr	r2, [pc, #60]	; (80086a0 <xPortStartScheduler+0x140>)
 8008662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008668:	f7ff ff66 	bl	8008538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800866c:	f7fe fe6e 	bl	800734c <vTaskSwitchContext>
	prvTaskExitError();
 8008670:	f7ff ff1e 	bl	80084b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	e000ed00 	.word	0xe000ed00
 8008684:	410fc271 	.word	0x410fc271
 8008688:	410fc270 	.word	0x410fc270
 800868c:	e000e400 	.word	0xe000e400
 8008690:	20001638 	.word	0x20001638
 8008694:	2000163c 	.word	0x2000163c
 8008698:	e000ed20 	.word	0xe000ed20
 800869c:	20000010 	.word	0x20000010
 80086a0:	e000ef34 	.word	0xe000ef34

080086a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	607b      	str	r3, [r7, #4]
}
 80086bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <vPortEnterCritical+0x58>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	4a0d      	ldr	r2, [pc, #52]	; (80086fc <vPortEnterCritical+0x58>)
 80086c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <vPortEnterCritical+0x58>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d10f      	bne.n	80086f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086d0:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <vPortEnterCritical+0x5c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	603b      	str	r3, [r7, #0]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <vPortEnterCritical+0x4a>
	}
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	20000010 	.word	0x20000010
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800870a:	4b12      	ldr	r3, [pc, #72]	; (8008754 <vPortExitCritical+0x50>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <vPortExitCritical+0x24>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	607b      	str	r3, [r7, #4]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <vPortExitCritical+0x50>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3b01      	subs	r3, #1
 800872e:	4a09      	ldr	r2, [pc, #36]	; (8008754 <vPortExitCritical+0x50>)
 8008730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <vPortExitCritical+0x50>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <vPortExitCritical+0x42>
 800873a:	2300      	movs	r3, #0
 800873c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	f383 8811 	msr	BASEPRI, r3
}
 8008744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000010 	.word	0x20000010
	...

08008760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008760:	f3ef 8009 	mrs	r0, PSP
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <pxCurrentTCBConst>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	f01e 0f10 	tst.w	lr, #16
 8008770:	bf08      	it	eq
 8008772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877a:	6010      	str	r0, [r2, #0]
 800877c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008784:	f380 8811 	msr	BASEPRI, r0
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f7fe fddc 	bl	800734c <vTaskSwitchContext>
 8008794:	f04f 0000 	mov.w	r0, #0
 8008798:	f380 8811 	msr	BASEPRI, r0
 800879c:	bc09      	pop	{r0, r3}
 800879e:	6819      	ldr	r1, [r3, #0]
 80087a0:	6808      	ldr	r0, [r1, #0]
 80087a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a6:	f01e 0f10 	tst.w	lr, #16
 80087aa:	bf08      	it	eq
 80087ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087b0:	f380 8809 	msr	PSP, r0
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	f3af 8000 	nop.w

080087c0 <pxCurrentTCBConst>:
 80087c0:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop

080087c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	607b      	str	r3, [r7, #4]
}
 80087e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087e2:	f7fe fcf9 	bl	80071d8 <xTaskIncrementTick>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087ec:	4b06      	ldr	r3, [pc, #24]	; (8008808 <xPortSysTickHandler+0x40>)
 80087ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	2300      	movs	r3, #0
 80087f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f383 8811 	msr	BASEPRI, r3
}
 80087fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <vPortSetupTimerInterrupt+0x34>)
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008816:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <vPortSetupTimerInterrupt+0x38>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800881c:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <vPortSetupTimerInterrupt+0x3c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a0a      	ldr	r2, [pc, #40]	; (800884c <vPortSetupTimerInterrupt+0x40>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	099b      	lsrs	r3, r3, #6
 8008828:	4a09      	ldr	r2, [pc, #36]	; (8008850 <vPortSetupTimerInterrupt+0x44>)
 800882a:	3b01      	subs	r3, #1
 800882c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800882e:	4b04      	ldr	r3, [pc, #16]	; (8008840 <vPortSetupTimerInterrupt+0x34>)
 8008830:	2207      	movs	r2, #7
 8008832:	601a      	str	r2, [r3, #0]
}
 8008834:	bf00      	nop
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	e000e010 	.word	0xe000e010
 8008844:	e000e018 	.word	0xe000e018
 8008848:	20000004 	.word	0x20000004
 800884c:	10624dd3 	.word	0x10624dd3
 8008850:	e000e014 	.word	0xe000e014

08008854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008864 <vPortEnableVFP+0x10>
 8008858:	6801      	ldr	r1, [r0, #0]
 800885a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800885e:	6001      	str	r1, [r0, #0]
 8008860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008862:	bf00      	nop
 8008864:	e000ed88 	.word	0xe000ed88

08008868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800886e:	f3ef 8305 	mrs	r3, IPSR
 8008872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b0f      	cmp	r3, #15
 8008878:	d914      	bls.n	80088a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800887a:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <vPortValidateInterruptPriority+0x70>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008884:	4b15      	ldr	r3, [pc, #84]	; (80088dc <vPortValidateInterruptPriority+0x74>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	7afa      	ldrb	r2, [r7, #11]
 800888a:	429a      	cmp	r2, r3
 800888c:	d20a      	bcs.n	80088a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	607b      	str	r3, [r7, #4]
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088a4:	4b0e      	ldr	r3, [pc, #56]	; (80088e0 <vPortValidateInterruptPriority+0x78>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088ac:	4b0d      	ldr	r3, [pc, #52]	; (80088e4 <vPortValidateInterruptPriority+0x7c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d90a      	bls.n	80088ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	603b      	str	r3, [r7, #0]
}
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <vPortValidateInterruptPriority+0x60>
	}
 80088ca:	bf00      	nop
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	e000e3f0 	.word	0xe000e3f0
 80088dc:	20001638 	.word	0x20001638
 80088e0:	e000ed0c 	.word	0xe000ed0c
 80088e4:	2000163c 	.word	0x2000163c

080088e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088f4:	f7fe fbb4 	bl	8007060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088f8:	4b5b      	ldr	r3, [pc, #364]	; (8008a68 <pvPortMalloc+0x180>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008900:	f000 f920 	bl	8008b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008904:	4b59      	ldr	r3, [pc, #356]	; (8008a6c <pvPortMalloc+0x184>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	f040 8093 	bne.w	8008a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01d      	beq.n	8008954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008918:	2208      	movs	r2, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	2b00      	cmp	r3, #0
 8008928:	d014      	beq.n	8008954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f023 0307 	bic.w	r3, r3, #7
 8008930:	3308      	adds	r3, #8
 8008932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <pvPortMalloc+0x6c>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	617b      	str	r3, [r7, #20]
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d06e      	beq.n	8008a38 <pvPortMalloc+0x150>
 800895a:	4b45      	ldr	r3, [pc, #276]	; (8008a70 <pvPortMalloc+0x188>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d869      	bhi.n	8008a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008964:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <pvPortMalloc+0x18c>)
 8008966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008968:	4b42      	ldr	r3, [pc, #264]	; (8008a74 <pvPortMalloc+0x18c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800896e:	e004      	b.n	800897a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d903      	bls.n	800898c <pvPortMalloc+0xa4>
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1f1      	bne.n	8008970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800898c:	4b36      	ldr	r3, [pc, #216]	; (8008a68 <pvPortMalloc+0x180>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008992:	429a      	cmp	r2, r3
 8008994:	d050      	beq.n	8008a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2208      	movs	r2, #8
 800899c:	4413      	add	r3, r2
 800899e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	2308      	movs	r3, #8
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d91f      	bls.n	80089f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4413      	add	r3, r2
 80089be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <pvPortMalloc+0xf8>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	613b      	str	r3, [r7, #16]
}
 80089dc:	bf00      	nop
 80089de:	e7fe      	b.n	80089de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	1ad2      	subs	r2, r2, r3
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089f2:	69b8      	ldr	r0, [r7, #24]
 80089f4:	f000 f908 	bl	8008c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089f8:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <pvPortMalloc+0x188>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	4a1b      	ldr	r2, [pc, #108]	; (8008a70 <pvPortMalloc+0x188>)
 8008a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a06:	4b1a      	ldr	r3, [pc, #104]	; (8008a70 <pvPortMalloc+0x188>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <pvPortMalloc+0x190>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d203      	bcs.n	8008a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a12:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <pvPortMalloc+0x188>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a18      	ldr	r2, [pc, #96]	; (8008a78 <pvPortMalloc+0x190>)
 8008a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <pvPortMalloc+0x184>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a2e:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <pvPortMalloc+0x194>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	4a11      	ldr	r2, [pc, #68]	; (8008a7c <pvPortMalloc+0x194>)
 8008a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a38:	f7fe fb20 	bl	800707c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <pvPortMalloc+0x174>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60fb      	str	r3, [r7, #12]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <pvPortMalloc+0x172>
	return pvReturn;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3728      	adds	r7, #40	; 0x28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20005248 	.word	0x20005248
 8008a6c:	2000525c 	.word	0x2000525c
 8008a70:	2000524c 	.word	0x2000524c
 8008a74:	20005240 	.word	0x20005240
 8008a78:	20005250 	.word	0x20005250
 8008a7c:	20005254 	.word	0x20005254

08008a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d04d      	beq.n	8008b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a92:	2308      	movs	r3, #8
 8008a94:	425b      	negs	r3, r3
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4413      	add	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <vPortFree+0xb8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <vPortFree+0x44>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60fb      	str	r3, [r7, #12]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00a      	beq.n	8008ae2 <vPortFree+0x62>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	60bb      	str	r3, [r7, #8]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <vPortFree+0xb8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4013      	ands	r3, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01e      	beq.n	8008b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d11a      	bne.n	8008b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	4b0e      	ldr	r3, [pc, #56]	; (8008b38 <vPortFree+0xb8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	43db      	mvns	r3, r3
 8008b02:	401a      	ands	r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b08:	f7fe faaa 	bl	8007060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <vPortFree+0xbc>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4413      	add	r3, r2
 8008b16:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <vPortFree+0xbc>)
 8008b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f000 f874 	bl	8008c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <vPortFree+0xc0>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	4a06      	ldr	r2, [pc, #24]	; (8008b40 <vPortFree+0xc0>)
 8008b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b2a:	f7fe faa7 	bl	800707c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b2e:	bf00      	nop
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000525c 	.word	0x2000525c
 8008b3c:	2000524c 	.word	0x2000524c
 8008b40:	20005258 	.word	0x20005258

08008b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b50:	4b27      	ldr	r3, [pc, #156]	; (8008bf0 <prvHeapInit+0xac>)
 8008b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00c      	beq.n	8008b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3307      	adds	r3, #7
 8008b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0307 	bic.w	r3, r3, #7
 8008b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	4a1f      	ldr	r2, [pc, #124]	; (8008bf0 <prvHeapInit+0xac>)
 8008b74:	4413      	add	r3, r2
 8008b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b7c:	4a1d      	ldr	r2, [pc, #116]	; (8008bf4 <prvHeapInit+0xb0>)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b82:	4b1c      	ldr	r3, [pc, #112]	; (8008bf4 <prvHeapInit+0xb0>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b90:	2208      	movs	r2, #8
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0307 	bic.w	r3, r3, #7
 8008b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4a15      	ldr	r2, [pc, #84]	; (8008bf8 <prvHeapInit+0xb4>)
 8008ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <prvHeapInit+0xb4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <prvHeapInit+0xb4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	1ad2      	subs	r2, r2, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <prvHeapInit+0xb4>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <prvHeapInit+0xb8>)
 8008bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <prvHeapInit+0xbc>)
 8008bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bdc:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <prvHeapInit+0xc0>)
 8008bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008be2:	601a      	str	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	20001640 	.word	0x20001640
 8008bf4:	20005240 	.word	0x20005240
 8008bf8:	20005248 	.word	0x20005248
 8008bfc:	20005250 	.word	0x20005250
 8008c00:	2000524c 	.word	0x2000524c
 8008c04:	2000525c 	.word	0x2000525c

08008c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c10:	4b28      	ldr	r3, [pc, #160]	; (8008cb4 <prvInsertBlockIntoFreeList+0xac>)
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	e002      	b.n	8008c1c <prvInsertBlockIntoFreeList+0x14>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d8f7      	bhi.n	8008c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	4413      	add	r3, r2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d108      	bne.n	8008c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	441a      	add	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	441a      	add	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d118      	bne.n	8008c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	4b15      	ldr	r3, [pc, #84]	; (8008cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d00d      	beq.n	8008c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	441a      	add	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	e008      	b.n	8008c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c86:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	e003      	b.n	8008c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d002      	beq.n	8008ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20005240 	.word	0x20005240
 8008cb8:	20005248 	.word	0x20005248

08008cbc <__libc_init_array>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	4d0d      	ldr	r5, [pc, #52]	; (8008cf4 <__libc_init_array+0x38>)
 8008cc0:	4c0d      	ldr	r4, [pc, #52]	; (8008cf8 <__libc_init_array+0x3c>)
 8008cc2:	1b64      	subs	r4, r4, r5
 8008cc4:	10a4      	asrs	r4, r4, #2
 8008cc6:	2600      	movs	r6, #0
 8008cc8:	42a6      	cmp	r6, r4
 8008cca:	d109      	bne.n	8008ce0 <__libc_init_array+0x24>
 8008ccc:	4d0b      	ldr	r5, [pc, #44]	; (8008cfc <__libc_init_array+0x40>)
 8008cce:	4c0c      	ldr	r4, [pc, #48]	; (8008d00 <__libc_init_array+0x44>)
 8008cd0:	f000 f82e 	bl	8008d30 <_init>
 8008cd4:	1b64      	subs	r4, r4, r5
 8008cd6:	10a4      	asrs	r4, r4, #2
 8008cd8:	2600      	movs	r6, #0
 8008cda:	42a6      	cmp	r6, r4
 8008cdc:	d105      	bne.n	8008cea <__libc_init_array+0x2e>
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce4:	4798      	blx	r3
 8008ce6:	3601      	adds	r6, #1
 8008ce8:	e7ee      	b.n	8008cc8 <__libc_init_array+0xc>
 8008cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cee:	4798      	blx	r3
 8008cf0:	3601      	adds	r6, #1
 8008cf2:	e7f2      	b.n	8008cda <__libc_init_array+0x1e>
 8008cf4:	08008e68 	.word	0x08008e68
 8008cf8:	08008e68 	.word	0x08008e68
 8008cfc:	08008e68 	.word	0x08008e68
 8008d00:	08008e6c 	.word	0x08008e6c

08008d04 <memcpy>:
 8008d04:	440a      	add	r2, r1
 8008d06:	4291      	cmp	r1, r2
 8008d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d0c:	d100      	bne.n	8008d10 <memcpy+0xc>
 8008d0e:	4770      	bx	lr
 8008d10:	b510      	push	{r4, lr}
 8008d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d1a:	4291      	cmp	r1, r2
 8008d1c:	d1f9      	bne.n	8008d12 <memcpy+0xe>
 8008d1e:	bd10      	pop	{r4, pc}

08008d20 <memset>:
 8008d20:	4402      	add	r2, r0
 8008d22:	4603      	mov	r3, r0
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d100      	bne.n	8008d2a <memset+0xa>
 8008d28:	4770      	bx	lr
 8008d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2e:	e7f9      	b.n	8008d24 <memset+0x4>

08008d30 <_init>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	bf00      	nop
 8008d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d36:	bc08      	pop	{r3}
 8008d38:	469e      	mov	lr, r3
 8008d3a:	4770      	bx	lr

08008d3c <_fini>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	bf00      	nop
 8008d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d42:	bc08      	pop	{r3}
 8008d44:	469e      	mov	lr, r3
 8008d46:	4770      	bx	lr
